{
  "address": "0x58180cf370662a57e7Fe85088B12dBD8ba0C75D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnershipUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "major",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "VersionPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "getPackageLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "getPackageOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "packages",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "publishVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "resolveToLeaf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "domainOwner",
          "type": "address"
        }
      ],
      "name": "updateOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ownershipUpdater",
          "type": "address"
        }
      ],
      "name": "updateOwnershipUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionPublisher",
          "type": "address"
        }
      ],
      "name": "updateVersionPublisher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "versionNodes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "leaf",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "latestSubVersion",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPublisher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0xE9FFd2d4c1e3eAF13f6e17DfDCD615a66f357dF4"
  ],
  "solcInputHash": "1bcf4f481a51a58f83bd3a333202be49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"VersionPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"getPackageLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"getPackageOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"publishVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"resolveToLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"domainOwner\",\"type\":\"address\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownershipUpdater\",\"type\":\"address\"}],\"name\":\"updateOwnershipUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionPublisher\",\"type\":\"address\"}],\"name\":\"updateVersionPublisher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"versionNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"leaf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"latestSubVersion\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPublisher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/registry/PolywrapRegistry.sol\":\"PolywrapRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/registry/PolywrapRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./VersionResolver.sol\\\";\\n\\ncontract PolywrapRegistry is VersionResolver {\\n  constructor(address owner) Registry(owner) {}\\n}\\n\",\"keccak256\":\"0xa2cb95832fec3dc0ccb17340d7a94b1be89ece46192c82eb0e2a97bedb6733a2\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor(\\n    address owner\\n  ) {\\n    initialize();\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x464aadc7bbfc29cc52424181cdbf66cc1f613b0fe73cba13cc9320511333eea5\",\"license\":\"MIT\"},\"contracts/versioning/registry/VersionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Registry.sol\\\";\\n\\nabstract contract VersionResolver is Registry {\\n  function resolveToLeaf(bytes32 versionNodeId) public view returns (bytes32) {\\n    PackageVersion storage versionNode = versionNodes[versionNodeId];\\n    require(versionNode.created, \\\"Invalid Node\\\");\\n\\n    if (versionNode.leaf) {\\n      return versionNodeId;\\n    }\\n\\n    bytes32 latestNodeId = keccak256(\\n      abi.encodePacked(versionNodeId, versionNode.latestSubVersion)\\n    );\\n\\n    return resolveToLeaf(latestNodeId);\\n  }\\n\\n  function getPackageLocation(bytes32 versionNodeId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    bytes32 concreteVersionId = resolveToLeaf(versionNodeId);\\n    return versionNodes[concreteVersionId].location;\\n  }\\n}\\n\",\"keccak256\":\"0x6a4e5e49e84673d05c0b021ff6f57e1c5f1c88ed5e5d0a686d301cc406b89fc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024fe380380620024fe833981810160405281019062000037919062000652565b80620000486200006160201b60201c565b62000059816200015060201b60201c565b50506200087f565b600060019054906101000a900460ff168062000088575060008054906101000a900460ff16155b620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000715565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200011b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200012b6200026660201b60201c565b80156200014d5760008060016101000a81548160ff0219169083151502179055505b50565b620001606200036560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001866200036d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d69062000737565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000252576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024990620006f3565b60405180910390fd5b62000263816200039760201b60201c565b50565b600060019054906101000a900460ff16806200028d575060008054906101000a900460ff16155b620002cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002c69062000715565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000320576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620003306200045d60201b60201c565b620003406200053c60201b60201c565b8015620003625760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff168062000484575060008054906101000a900460ff16155b620004c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004bd9062000715565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000517576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620005395760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000563575060008054906101000a900460ff16155b620005a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200059c9062000715565b60405180910390fd5b60008060019054906101000a900460ff161590508015620005f6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620006166200060a6200036560201b60201c565b6200039760201b60201c565b8015620006385760008060016101000a81548160ff0219169083151502179055505b50565b6000815190506200064c8162000865565b92915050565b6000602082840312156200066557600080fd5b600062000675848285016200063b565b91505092915050565b60006200068d60268362000759565b91506200069a826200079e565b604082019050919050565b6000620006b4602e8362000759565b9150620006c182620007ed565b604082019050919050565b6000620006db60208362000759565b9150620006e8826200083c565b602082019050919050565b600060208201905081810360008301526200070e816200067e565b9050919050565b600060208201905081810360008301526200073081620006a5565b9050919050565b600060208201905081810360008301526200075281620006cc565b9050919050565b600082825260208201905092915050565b600062000777826200077e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b62000870816200076a565b81146200087c57600080fd5b50565b611c6f806200088f6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806371102819116100975780638da5cb5b116100665780638da5cb5b14610289578063c9f006b6146102a7578063ecb1b8d5146102c3578063f2fde38b146102e1576100f5565b80637110281914610213578063715018a61461024557806371fd7f811461024f5780638129fc1c1461027f576100f5565b80634dc1d99d116100d35780634dc1d99d146101765780635ab608e3146101a657806366b606a5146101c457806369317eb7146101e0576100f5565b8063233a1d99146100fa578063427a94d41461012a578063479661481461015a575b600080fd5b610114600480360381019061010f9190611433565b6102fd565b604051610121919061179d565b60405180910390f35b610144600480360381019061013f9190611433565b6103ca565b60405161015191906116ff565b60405180910390f35b610174600480360381019061016f919061145c565b61040a565b005b610190600480360381019061018b91906114ab565b6105da565b60405161019d919061179d565b60405180910390f35b6101ae61091e565b6040516101bb91906116ff565b60405180910390f35b6101de60048036038101906101d9919061140a565b610944565b005b6101fa60048036038101906101f59190611433565b610a04565b60405161020a9493929190611751565b60405180910390f35b61022d60048036038101906102289190611433565b610ad6565b60405161023c9392919061171a565b60405180910390f35b61024d610b20565b005b61026960048036038101906102649190611433565b610ba8565b60405161027691906117e1565b60405180910390f35b610287610c5e565b005b610291610d3f565b60405161029e91906116ff565b60405180910390f35b6102c160048036038101906102bc919061140a565b610d69565b005b6102cb610e29565b6040516102d891906116ff565b60405180910390f35b6102fb60048036038101906102f6919061140a565b610e4f565b005b6000806065600084815260200190815260200160002090508060020160009054906101000a900460ff16610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d90611883565b60405180910390fd5b8060000160009054906101000a900460ff161561038657829150506103c5565b600083826001015460405160200161039f9291906116d3565b6040516020818303038152906040528051906020012090506103c0816102fd565b925050505b919050565b60006066600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000826040516020016104a1919061168c565b60405160208183030381529060405280519060200120846040516020016104c99291906116a7565b60405160208183030381529060405280519060200120905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001858152506066600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff16837f7f290f38b12a4ba0db0dae399f91016a9fbf6c954370fc1988e92953060d5e5183876040516105cc9291906117b8565b60405180910390a350505050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600086866040516020016106759291906116d3565b604051602081830303815290604052805190602001209050600081866040516020016106a29291906116d3565b604051602081830303815290604052805190602001209050600081866040516020016106cf9291906116d3565b6040516020818303038152906040528051906020012090506000606560008b81526020019081526020016000209050600060656000868152602001908152602001600020905060006065600086815260200190815260200160002090508a83600101541015610742578a83600101819055505b60018360020160006101000a81548160ff0219169083151502179055508982600101541015610775578982600101819055505b60018260020160006101000a81548160ff02191690831515021790555088816001015410156107a8578881600101819055505b60018160020160006101000a81548160ff0219169083151502179055506065600085815260200190815260200160002060020160009054906101000a900460ff1615610829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082090611863565b60405180910390fd5b604051806080016040528060011515815260200160008152602001600115158152602001898152506065600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906108ca9291906112c0565b509050508b7fa0cf073ede1b5fef0ae41259066849d8f4af26eb95525731a11b3b6cdde968588c8c8c8c60405161090494939291906118a3565b60405180910390a283965050505050505095945050505050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094c610f47565b73ffffffffffffffffffffffffffffffffffffffff1661096a610d3f565b73ffffffffffffffffffffffffffffffffffffffff16146109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790611843565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900460ff1690806003018054610a53906119f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f906119f5565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905084565b60666020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b610b28610f47565b73ffffffffffffffffffffffffffffffffffffffff16610b46610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9390611843565b60405180910390fd5b610ba66000610f4f565b565b60606000610bb5836102fd565b9050606560008281526020019081526020016000206003018054610bd8906119f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c04906119f5565b8015610c515780601f10610c2657610100808354040283529160200191610c51565b820191906000526020600020905b815481529060010190602001808311610c3457829003601f168201915b5050505050915050919050565b600060019054906101000a900460ff1680610c84575060008054906101000a900460ff16155b610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611823565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d13576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d1b611015565b8015610d3c5760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d71610f47565b73ffffffffffffffffffffffffffffffffffffffff16610d8f610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611843565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e57610f47565b73ffffffffffffffffffffffffffffffffffffffff16610e75610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec290611843565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290611803565b60405180910390fd5b610f4481610f4f565b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff168061103b575060008054906101000a900460ff16155b61107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107190611823565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110ca576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6110d26110fe565b6110da6111d7565b80156110fb5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611124575060008054906101000a900460ff16155b611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90611823565b60405180910390fd5b60008060019054906101000a900460ff1615905080156111b3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156111d45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806111fd575060008054906101000a900460ff16155b61123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390611823565b60405180910390fd5b60008060019054906101000a900460ff16159050801561128c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61129c611297610f47565b610f4f565b80156112bd5760008060016101000a81548160ff0219169083151502179055505b50565b8280546112cc906119f5565b90600052602060002090601f0160209004810192826112ee5760008555611335565b82601f1061130757805160ff1916838001178555611335565b82800160010185558215611335579182015b82811115611334578251825591602001919060010190611319565b5b5090506113429190611346565b5090565b5b8082111561135f576000816000905550600101611347565b5090565b600061137661137184611914565b6118ef565b90508281526020810184848401111561138e57600080fd5b6113998482856119b3565b509392505050565b6000813590506113b081611bf4565b92915050565b6000813590506113c581611c0b565b92915050565b600082601f8301126113dc57600080fd5b81356113ec848260208601611363565b91505092915050565b60008135905061140481611c22565b92915050565b60006020828403121561141c57600080fd5b600061142a848285016113a1565b91505092915050565b60006020828403121561144557600080fd5b6000611453848285016113b6565b91505092915050565b60008060006060848603121561147157600080fd5b600061147f868287016113b6565b9350506020611490868287016113b6565b92505060406114a1868287016113a1565b9150509250925092565b600080600080600060a086880312156114c357600080fd5b60006114d1888289016113b6565b95505060206114e2888289016113f5565b94505060406114f3888289016113f5565b9350506060611504888289016113f5565b925050608086013567ffffffffffffffff81111561152157600080fd5b61152d888289016113cb565b9150509295509295909350565b61154381611961565b82525050565b61155281611973565b82525050565b6115618161197f565b82525050565b6115786115738261197f565b611a58565b82525050565b600061158982611945565b6115938185611950565b93506115a38185602086016119c2565b6115ac81611aca565b840191505092915050565b60006115c4602683611950565b91506115cf82611adb565b604082019050919050565b60006115e7602e83611950565b91506115f282611b2a565b604082019050919050565b600061160a602083611950565b915061161582611b79565b602082019050919050565b600061162d601c83611950565b915061163882611ba2565b602082019050919050565b6000611650600c83611950565b915061165b82611bcb565b602082019050919050565b61166f816119a9565b82525050565b611686611681826119a9565b611a62565b82525050565b60006116988284611567565b60208201915081905092915050565b60006116b38285611567565b6020820191506116c38284611567565b6020820191508190509392505050565b60006116df8285611567565b6020820191506116ef8284611675565b6020820191508190509392505050565b6000602082019050611714600083018461153a565b92915050565b600060608201905061172f600083018661153a565b61173c6020830185611558565b6117496040830184611558565b949350505050565b60006080820190506117666000830187611549565b6117736020830186611666565b6117806040830185611549565b8181036060830152611792818461157e565b905095945050505050565b60006020820190506117b26000830184611558565b92915050565b60006040820190506117cd6000830185611558565b6117da6020830184611558565b9392505050565b600060208201905081810360008301526117fb818461157e565b905092915050565b6000602082019050818103600083015261181c816115b7565b9050919050565b6000602082019050818103600083015261183c816115da565b9050919050565b6000602082019050818103600083015261185c816115fd565b9050919050565b6000602082019050818103600083015261187c81611620565b9050919050565b6000602082019050818103600083015261189c81611643565b9050919050565b60006080820190506118b86000830187611666565b6118c56020830186611666565b6118d26040830185611666565b81810360608301526118e4818461157e565b905095945050505050565b60006118f961190a565b90506119058282611a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561192f5761192e611a9b565b5b61193882611aca565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061196c82611989565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119e05780820151818401526020810190506119c5565b838111156119ef576000848401525b50505050565b60006002820490506001821680611a0d57607f821691505b60208210811415611a2157611a20611a6c565b5b50919050565b611a3082611aca565b810181811067ffffffffffffffff82111715611a4f57611a4e611a9b565b5b80604052505050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f56657273696f6e20697320616c7265616479207075626c697368656400000000600082015250565b7f496e76616c6964204e6f64650000000000000000000000000000000000000000600082015250565b611bfd81611961565b8114611c0857600080fd5b50565b611c148161197f565b8114611c1f57600080fd5b50565b611c2b816119a9565b8114611c3657600080fd5b5056fea26469706673582212204c0ffb3812cd2d7ee76f385c500908b9664a3106a80a48b24506eadc0e02816564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806371102819116100975780638da5cb5b116100665780638da5cb5b14610289578063c9f006b6146102a7578063ecb1b8d5146102c3578063f2fde38b146102e1576100f5565b80637110281914610213578063715018a61461024557806371fd7f811461024f5780638129fc1c1461027f576100f5565b80634dc1d99d116100d35780634dc1d99d146101765780635ab608e3146101a657806366b606a5146101c457806369317eb7146101e0576100f5565b8063233a1d99146100fa578063427a94d41461012a578063479661481461015a575b600080fd5b610114600480360381019061010f9190611433565b6102fd565b604051610121919061179d565b60405180910390f35b610144600480360381019061013f9190611433565b6103ca565b60405161015191906116ff565b60405180910390f35b610174600480360381019061016f919061145c565b61040a565b005b610190600480360381019061018b91906114ab565b6105da565b60405161019d919061179d565b60405180910390f35b6101ae61091e565b6040516101bb91906116ff565b60405180910390f35b6101de60048036038101906101d9919061140a565b610944565b005b6101fa60048036038101906101f59190611433565b610a04565b60405161020a9493929190611751565b60405180910390f35b61022d60048036038101906102289190611433565b610ad6565b60405161023c9392919061171a565b60405180910390f35b61024d610b20565b005b61026960048036038101906102649190611433565b610ba8565b60405161027691906117e1565b60405180910390f35b610287610c5e565b005b610291610d3f565b60405161029e91906116ff565b60405180910390f35b6102c160048036038101906102bc919061140a565b610d69565b005b6102cb610e29565b6040516102d891906116ff565b60405180910390f35b6102fb60048036038101906102f6919061140a565b610e4f565b005b6000806065600084815260200190815260200160002090508060020160009054906101000a900460ff16610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d90611883565b60405180910390fd5b8060000160009054906101000a900460ff161561038657829150506103c5565b600083826001015460405160200161039f9291906116d3565b6040516020818303038152906040528051906020012090506103c0816102fd565b925050505b919050565b60006066600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000826040516020016104a1919061168c565b60405160208183030381529060405280519060200120846040516020016104c99291906116a7565b60405160208183030381529060405280519060200120905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001858152506066600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff16837f7f290f38b12a4ba0db0dae399f91016a9fbf6c954370fc1988e92953060d5e5183876040516105cc9291906117b8565b60405180910390a350505050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600086866040516020016106759291906116d3565b604051602081830303815290604052805190602001209050600081866040516020016106a29291906116d3565b604051602081830303815290604052805190602001209050600081866040516020016106cf9291906116d3565b6040516020818303038152906040528051906020012090506000606560008b81526020019081526020016000209050600060656000868152602001908152602001600020905060006065600086815260200190815260200160002090508a83600101541015610742578a83600101819055505b60018360020160006101000a81548160ff0219169083151502179055508982600101541015610775578982600101819055505b60018260020160006101000a81548160ff02191690831515021790555088816001015410156107a8578881600101819055505b60018160020160006101000a81548160ff0219169083151502179055506065600085815260200190815260200160002060020160009054906101000a900460ff1615610829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082090611863565b60405180910390fd5b604051806080016040528060011515815260200160008152602001600115158152602001898152506065600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906108ca9291906112c0565b509050508b7fa0cf073ede1b5fef0ae41259066849d8f4af26eb95525731a11b3b6cdde968588c8c8c8c60405161090494939291906118a3565b60405180910390a283965050505050505095945050505050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094c610f47565b73ffffffffffffffffffffffffffffffffffffffff1661096a610d3f565b73ffffffffffffffffffffffffffffffffffffffff16146109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790611843565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900460ff1690806003018054610a53906119f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f906119f5565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905084565b60666020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b610b28610f47565b73ffffffffffffffffffffffffffffffffffffffff16610b46610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9390611843565b60405180910390fd5b610ba66000610f4f565b565b60606000610bb5836102fd565b9050606560008281526020019081526020016000206003018054610bd8906119f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c04906119f5565b8015610c515780601f10610c2657610100808354040283529160200191610c51565b820191906000526020600020905b815481529060010190602001808311610c3457829003601f168201915b5050505050915050919050565b600060019054906101000a900460ff1680610c84575060008054906101000a900460ff16155b610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611823565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d13576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d1b611015565b8015610d3c5760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d71610f47565b73ffffffffffffffffffffffffffffffffffffffff16610d8f610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611843565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e57610f47565b73ffffffffffffffffffffffffffffffffffffffff16610e75610d3f565b73ffffffffffffffffffffffffffffffffffffffff1614610ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec290611843565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290611803565b60405180910390fd5b610f4481610f4f565b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff168061103b575060008054906101000a900460ff16155b61107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107190611823565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110ca576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6110d26110fe565b6110da6111d7565b80156110fb5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611124575060008054906101000a900460ff16155b611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90611823565b60405180910390fd5b60008060019054906101000a900460ff1615905080156111b3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156111d45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806111fd575060008054906101000a900460ff16155b61123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390611823565b60405180910390fd5b60008060019054906101000a900460ff16159050801561128c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61129c611297610f47565b610f4f565b80156112bd5760008060016101000a81548160ff0219169083151502179055505b50565b8280546112cc906119f5565b90600052602060002090601f0160209004810192826112ee5760008555611335565b82601f1061130757805160ff1916838001178555611335565b82800160010185558215611335579182015b82811115611334578251825591602001919060010190611319565b5b5090506113429190611346565b5090565b5b8082111561135f576000816000905550600101611347565b5090565b600061137661137184611914565b6118ef565b90508281526020810184848401111561138e57600080fd5b6113998482856119b3565b509392505050565b6000813590506113b081611bf4565b92915050565b6000813590506113c581611c0b565b92915050565b600082601f8301126113dc57600080fd5b81356113ec848260208601611363565b91505092915050565b60008135905061140481611c22565b92915050565b60006020828403121561141c57600080fd5b600061142a848285016113a1565b91505092915050565b60006020828403121561144557600080fd5b6000611453848285016113b6565b91505092915050565b60008060006060848603121561147157600080fd5b600061147f868287016113b6565b9350506020611490868287016113b6565b92505060406114a1868287016113a1565b9150509250925092565b600080600080600060a086880312156114c357600080fd5b60006114d1888289016113b6565b95505060206114e2888289016113f5565b94505060406114f3888289016113f5565b9350506060611504888289016113f5565b925050608086013567ffffffffffffffff81111561152157600080fd5b61152d888289016113cb565b9150509295509295909350565b61154381611961565b82525050565b61155281611973565b82525050565b6115618161197f565b82525050565b6115786115738261197f565b611a58565b82525050565b600061158982611945565b6115938185611950565b93506115a38185602086016119c2565b6115ac81611aca565b840191505092915050565b60006115c4602683611950565b91506115cf82611adb565b604082019050919050565b60006115e7602e83611950565b91506115f282611b2a565b604082019050919050565b600061160a602083611950565b915061161582611b79565b602082019050919050565b600061162d601c83611950565b915061163882611ba2565b602082019050919050565b6000611650600c83611950565b915061165b82611bcb565b602082019050919050565b61166f816119a9565b82525050565b611686611681826119a9565b611a62565b82525050565b60006116988284611567565b60208201915081905092915050565b60006116b38285611567565b6020820191506116c38284611567565b6020820191508190509392505050565b60006116df8285611567565b6020820191506116ef8284611675565b6020820191508190509392505050565b6000602082019050611714600083018461153a565b92915050565b600060608201905061172f600083018661153a565b61173c6020830185611558565b6117496040830184611558565b949350505050565b60006080820190506117666000830187611549565b6117736020830186611666565b6117806040830185611549565b8181036060830152611792818461157e565b905095945050505050565b60006020820190506117b26000830184611558565b92915050565b60006040820190506117cd6000830185611558565b6117da6020830184611558565b9392505050565b600060208201905081810360008301526117fb818461157e565b905092915050565b6000602082019050818103600083015261181c816115b7565b9050919050565b6000602082019050818103600083015261183c816115da565b9050919050565b6000602082019050818103600083015261185c816115fd565b9050919050565b6000602082019050818103600083015261187c81611620565b9050919050565b6000602082019050818103600083015261189c81611643565b9050919050565b60006080820190506118b86000830187611666565b6118c56020830186611666565b6118d26040830185611666565b81810360608301526118e4818461157e565b905095945050505050565b60006118f961190a565b90506119058282611a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561192f5761192e611a9b565b5b61193882611aca565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061196c82611989565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119e05780820151818401526020810190506119c5565b838111156119ef576000848401525b50505050565b60006002820490506001821680611a0d57607f821691505b60208210811415611a2157611a20611a6c565b5b50919050565b611a3082611aca565b810181811067ffffffffffffffff82111715611a4f57611a4e611a9b565b5b80604052505050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f56657273696f6e20697320616c7265616479207075626c697368656400000000600082015250565b7f496e76616c6964204e6f64650000000000000000000000000000000000000000600082015250565b611bfd81611961565b8114611c0857600080fd5b50565b611c148161197f565b8114611c1f57600080fd5b50565b611c2b816119a9565b8114611c3657600080fd5b5056fea26469706673582212204c0ffb3812cd2d7ee76f385c500908b9664a3106a80a48b24506eadc0e02816564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3674,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "versionNodes",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(PackageVersion)3662_storage)"
      },
      {
        "astId": 3679,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "packages",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_struct(PackageInfo)3669_storage)"
      },
      {
        "astId": 3681,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "ownershipUpdater",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 3683,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "versionPublisher",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(PackageInfo)3669_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Registry.PackageInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PackageInfo)3669_storage"
      },
      "t_mapping(t_bytes32,t_struct(PackageVersion)3662_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Registry.PackageVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(PackageVersion)3662_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PackageInfo)3669_storage": {
        "encoding": "inplace",
        "label": "struct Registry.PackageInfo",
        "members": [
          {
            "astId": 3664,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3666,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "domainRegistryNode",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3668,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "domainRegistry",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PackageVersion)3662_storage": {
        "encoding": "inplace",
        "label": "struct Registry.PackageVersion",
        "members": [
          {
            "astId": 3655,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "leaf",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3657,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "latestSubVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3659,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3661,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}