{
  "address": "0x961234BFD8cc5697BE36D36A8E6A7d7e9736acBC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistrarNode",
          "type": "bytes32"
        }
      ],
      "name": "getPolywrapOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3f4ebb392b36d830985df851fd403a0296dfd55b3b5d5d2c527e2735d56760e",
  "receipt": {
    "to": null,
    "from": "0xE9FFd2d4c1e3eAF13f6e17DfDCD615a66f357dF4",
    "contractAddress": "0x961234BFD8cc5697BE36D36A8E6A7d7e9736acBC",
    "transactionIndex": 2,
    "gasUsed": "676029",
    "logsBloom": "0x
    "blockHash": "0x2ce320c5eed47b476c46b4e0eac3d4ead93c4b688397a902df00bd50bd9ee503",
    "transactionHash": "0xf3f4ebb392b36d830985df851fd403a0296dfd55b3b5d5d2c527e2735d56760e",
    "logs": [],
    "blockNumber": 9332897,
    "cumulativeGasUsed": "1137657",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E375a9141BDD9ebd9d414a74C8A225a495c443A"
  ],
  "solcInputHash": "4fe21111f3bf0fc3ecce138e1de61edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistrarNode\",\"type\":\"bytes32\"}],\"name\":\"getPolywrapOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/domain-registries/links/EnsLink.sol\":\"EnsLink\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"contracts/helpers/StringToAddressParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract StringToAddressParser {\\n  function stringToAddress(string memory _a)\\n    internal\\n    pure\\n    returns (address _parsedAddress)\\n  {\\n    bytes memory tmp = bytes(_a);\\n    uint160 iaddr = 0;\\n    uint160 b1;\\n    uint160 b2;\\n    for (uint256 i = 2; i < 2 + 2 * 20; i += 2) {\\n      iaddr *= 256;\\n      b1 = uint160(uint8(tmp[i]));\\n      b2 = uint160(uint8(tmp[i + 1]));\\n      if ((b1 >= 97) && (b1 <= 102)) {\\n        b1 -= 87;\\n      } else if ((b1 >= 65) && (b1 <= 70)) {\\n        b1 -= 55;\\n      } else if ((b1 >= 48) && (b1 <= 57)) {\\n        b1 -= 48;\\n      }\\n      if ((b2 >= 97) && (b2 <= 102)) {\\n        b2 -= 87;\\n      } else if ((b2 >= 65) && (b2 <= 70)) {\\n        b2 -= 55;\\n      } else if ((b2 >= 48) && (b2 <= 57)) {\\n        b2 -= 48;\\n      }\\n      iaddr += (b1 * 16 + b2);\\n    }\\n    return address(iaddr);\\n  }\\n}\\n\",\"keccak256\":\"0x05f1a4bd28f0dea8a9ceb928615a9e1af9d7cae3d89ed838feb2dd752216b392\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/links/EnsLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"../../../helpers/StringToAddressParser.sol\\\";\\nimport \\\"../interfaces/IDomainRegistryLink.sol\\\";\\n\\ninterface ITextResolverInterface {\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  ) external;\\n\\n  function text(bytes32 node, string calldata key)\\n    external\\n    view\\n    returns (string memory);\\n}\\n\\ncontract EnsLink is StringToAddressParser, IDomainRegistryLink {\\n  string internal constant POLYWRAP_OWNER_RECORD_NAME = \\\"polywrap-owner\\\";\\n\\n  ENS internal ens;\\n\\n  constructor(ENS _ens) {\\n    ens = _ens;\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistrarNode)\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    address textResolverAddr = ens.resolver(domainRegistrarNode);\\n\\n    require(textResolverAddr != address(0), \\\"Resolver not set\\\");\\n\\n    ITextResolverInterface ensTextResolver = ITextResolverInterface(\\n      textResolverAddr\\n    );\\n\\n    return\\n      stringToAddress(\\n        ensTextResolver.text(domainRegistrarNode, POLYWRAP_OWNER_RECORD_NAME)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xf641b6bd116c85e12a5fa343e4107c40cdb241c6322b658223838159d9307fa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610bf2380380610bf28339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600081519050610087816100fa565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100da565b9050919050565b60006100d3826100b6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610103816100c8565b811461010e57600080fd5b50565b610ad2806101206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806331ac1d0d14610030575b600080fd5b61004a6004803603810190610045919061062e565b610060565b6040516100579190610712565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b81526004016100bc919061072d565b60206040518083038186803b1580156100d457600080fd5b505afa1580156100e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010c9190610605565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017590610778565b60405180910390fd5b60008190506102508173ffffffffffffffffffffffffffffffffffffffff166359d1d43c866040518060400160405280600e81526020017f706f6c79777261702d6f776e65720000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016101f6929190610748565b60006040518083038186803b15801561020e57600080fd5b505afa158015610222573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061024b9190610657565b610259565b92505050919050565b600080829050600080806000600290505b602a811015610566576101008461028191906108aa565b93508481815181106102bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff169250846001826102dd9190610854565b81518110610314577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16915060618373ffffffffffffffffffffffffffffffffffffffff1610158015610365575060668373ffffffffffffffffffffffffffffffffffffffff1611155b1561037e5760578361037791906108f8565b925061042a565b60418373ffffffffffffffffffffffffffffffffffffffff16101580156103bc575060468373ffffffffffffffffffffffffffffffffffffffff1611155b156103d5576037836103ce91906108f8565b9250610429565b60308373ffffffffffffffffffffffffffffffffffffffff1610158015610413575060398373ffffffffffffffffffffffffffffffffffffffff1611155b156104285760308361042591906108f8565b92505b5b5b60618273ffffffffffffffffffffffffffffffffffffffff1610158015610468575060668273ffffffffffffffffffffffffffffffffffffffff1611155b156104815760578261047a91906108f8565b915061052d565b60418273ffffffffffffffffffffffffffffffffffffffff16101580156104bf575060468273ffffffffffffffffffffffffffffffffffffffff1611155b156104d8576037826104d191906108f8565b915061052c565b60308273ffffffffffffffffffffffffffffffffffffffff1610158015610516575060398273ffffffffffffffffffffffffffffffffffffffff1611155b1561052b5760308261052891906108f8565b91505b5b5b8160108461053b91906108aa565b610545919061080a565b84610550919061080a565b935060028161055f9190610854565b905061026a565b5082945050505050919050565b6000610586610581846107bd565b610798565b90508281526020810184848401111561059e57600080fd5b6105a9848285610972565b509392505050565b6000815190506105c081610a6e565b92915050565b6000813590506105d581610a85565b92915050565b600082601f8301126105ec57600080fd5b81516105fc848260208601610573565b91505092915050565b60006020828403121561061757600080fd5b6000610625848285016105b1565b91505092915050565b60006020828403121561064057600080fd5b600061064e848285016105c6565b91505092915050565b60006020828403121561066957600080fd5b600082015167ffffffffffffffff81111561068357600080fd5b61068f848285016105db565b91505092915050565b6106a18161092c565b82525050565b6106b08161093e565b82525050565b60006106c1826107ee565b6106cb81856107f9565b93506106db818560208601610972565b6106e481610a34565b840191505092915050565b60006106fc6010836107f9565b915061070782610a45565b602082019050919050565b60006020820190506107276000830184610698565b92915050565b600060208201905061074260008301846106a7565b92915050565b600060408201905061075d60008301856106a7565b818103602083015261076f81846106b6565b90509392505050565b60006020820190508181036000830152610791816106ef565b9050919050565b60006107a26107b3565b90506107ae82826109a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156107d8576107d7610a05565b5b6107e182610a34565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061081582610948565b915061082083610948565b92508273ffffffffffffffffffffffffffffffffffffffff03821115610849576108486109d6565b5b828201905092915050565b600061085f82610968565b915061086a83610968565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561089f5761089e6109d6565b5b828201905092915050565b60006108b582610948565b91506108c083610948565b92508173ffffffffffffffffffffffffffffffffffffffff04831182151516156108ed576108ec6109d6565b5b828202905092915050565b600061090382610948565b915061090e83610948565b925082821015610921576109206109d6565b5b828203905092915050565b600061093782610948565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610990578082015181840152602081019050610975565b8381111561099f576000848401525b50505050565b6109ae82610a34565b810181811067ffffffffffffffff821117156109cd576109cc610a05565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5265736f6c766572206e6f742073657400000000000000000000000000000000600082015250565b610a778161092c565b8114610a8257600080fd5b50565b610a8e8161093e565b8114610a9957600080fd5b5056fea2646970667358221220d3430a2b5ccc1f2ca82634855d20538d045c37dd9061b66e976c2217ceb358e564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806331ac1d0d14610030575b600080fd5b61004a6004803603810190610045919061062e565b610060565b6040516100579190610712565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b81526004016100bc919061072d565b60206040518083038186803b1580156100d457600080fd5b505afa1580156100e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010c9190610605565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017590610778565b60405180910390fd5b60008190506102508173ffffffffffffffffffffffffffffffffffffffff166359d1d43c866040518060400160405280600e81526020017f706f6c79777261702d6f776e65720000000000000000000000000000000000008152506040518363ffffffff1660e01b81526004016101f6929190610748565b60006040518083038186803b15801561020e57600080fd5b505afa158015610222573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061024b9190610657565b610259565b92505050919050565b600080829050600080806000600290505b602a811015610566576101008461028191906108aa565b93508481815181106102bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff169250846001826102dd9190610854565b81518110610314577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16915060618373ffffffffffffffffffffffffffffffffffffffff1610158015610365575060668373ffffffffffffffffffffffffffffffffffffffff1611155b1561037e5760578361037791906108f8565b925061042a565b60418373ffffffffffffffffffffffffffffffffffffffff16101580156103bc575060468373ffffffffffffffffffffffffffffffffffffffff1611155b156103d5576037836103ce91906108f8565b9250610429565b60308373ffffffffffffffffffffffffffffffffffffffff1610158015610413575060398373ffffffffffffffffffffffffffffffffffffffff1611155b156104285760308361042591906108f8565b92505b5b5b60618273ffffffffffffffffffffffffffffffffffffffff1610158015610468575060668273ffffffffffffffffffffffffffffffffffffffff1611155b156104815760578261047a91906108f8565b915061052d565b60418273ffffffffffffffffffffffffffffffffffffffff16101580156104bf575060468273ffffffffffffffffffffffffffffffffffffffff1611155b156104d8576037826104d191906108f8565b915061052c565b60308273ffffffffffffffffffffffffffffffffffffffff1610158015610516575060398273ffffffffffffffffffffffffffffffffffffffff1611155b1561052b5760308261052891906108f8565b91505b5b5b8160108461053b91906108aa565b610545919061080a565b84610550919061080a565b935060028161055f9190610854565b905061026a565b5082945050505050919050565b6000610586610581846107bd565b610798565b90508281526020810184848401111561059e57600080fd5b6105a9848285610972565b509392505050565b6000815190506105c081610a6e565b92915050565b6000813590506105d581610a85565b92915050565b600082601f8301126105ec57600080fd5b81516105fc848260208601610573565b91505092915050565b60006020828403121561061757600080fd5b6000610625848285016105b1565b91505092915050565b60006020828403121561064057600080fd5b600061064e848285016105c6565b91505092915050565b60006020828403121561066957600080fd5b600082015167ffffffffffffffff81111561068357600080fd5b61068f848285016105db565b91505092915050565b6106a18161092c565b82525050565b6106b08161093e565b82525050565b60006106c1826107ee565b6106cb81856107f9565b93506106db818560208601610972565b6106e481610a34565b840191505092915050565b60006106fc6010836107f9565b915061070782610a45565b602082019050919050565b60006020820190506107276000830184610698565b92915050565b600060208201905061074260008301846106a7565b92915050565b600060408201905061075d60008301856106a7565b818103602083015261076f81846106b6565b90509392505050565b60006020820190508181036000830152610791816106ef565b9050919050565b60006107a26107b3565b90506107ae82826109a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156107d8576107d7610a05565b5b6107e182610a34565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061081582610948565b915061082083610948565b92508273ffffffffffffffffffffffffffffffffffffffff03821115610849576108486109d6565b5b828201905092915050565b600061085f82610968565b915061086a83610968565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561089f5761089e6109d6565b5b828201905092915050565b60006108b582610948565b91506108c083610948565b92508173ffffffffffffffffffffffffffffffffffffffff04831182151516156108ed576108ec6109d6565b5b828202905092915050565b600061090382610948565b915061090e83610948565b925082821015610921576109206109d6565b5b828203905092915050565b600061093782610948565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610990578082015181840152602081019050610975565b8381111561099f576000848401525b50505050565b6109ae82610a34565b810181811067ffffffffffffffff821117156109cd576109cc610a05565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5265736f6c766572206e6f742073657400000000000000000000000000000000600082015250565b610a778161092c565b8114610a8257600080fd5b50565b610a8e8161093e565b8114610a9957600080fd5b5056fea2646970667358221220d3430a2b5ccc1f2ca82634855d20538d045c37dd9061b66e976c2217ceb358e564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10367,
        "contract": "contracts/versioning/domain-registries/links/EnsLink.sol:EnsLink",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)3164"
      }
    ],
    "types": {
      "t_contract(ENS)3164": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      }
    }
  }
}