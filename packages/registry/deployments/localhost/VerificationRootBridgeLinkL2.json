{
  "address": "0x81dd67bB2E6f0f8C0110A14E55F385Ae708DE9e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayVerificationRootGasLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeChainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeLink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayVerificationRootGasLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "verificationRoot",
          "type": "bytes32"
        }
      ],
      "name": "receiveVerificationRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "verificationRoot",
          "type": "bytes32"
        }
      ],
      "name": "relayVerificationRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayVerificationRootGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        }
      ],
      "name": "updateBridgeChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_relayVerificationRootGasLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRelayVerificationRootGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRootRelayer",
          "type": "address"
        }
      ],
      "name": "updateVerificationRootRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionVerificationManager",
          "type": "address"
        }
      ],
      "name": "updateVersionVerificationManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRootRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionVerificationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5b657e03dfe185694fd4dad907618f66f0d31b6faf920d484aab3ed0f3e2280",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1297924",
    "logsBloom": "0x
    "blockHash": "0xa711492f81950a6c597a7b772cea12051cefa3e77d4c0446a13f01e63fe938dc",
    "transactionHash": "0xe5b657e03dfe185694fd4dad907618f66f0d31b6faf920d484aab3ed0f3e2280",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11845684,
        "transactionHash": "0xe5b657e03dfe185694fd4dad907618f66f0d31b6faf920d484aab3ed0f3e2280",
        "address": "0x81dd67bB2E6f0f8C0110A14E55F385Ae708DE9e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa711492f81950a6c597a7b772cea12051cefa3e77d4c0446a13f01e63fe938dc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11845684,
        "transactionHash": "0xe5b657e03dfe185694fd4dad907618f66f0d31b6faf920d484aab3ed0f3e2280",
        "address": "0x81dd67bB2E6f0f8C0110A14E55F385Ae708DE9e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa711492f81950a6c597a7b772cea12051cefa3e77d4c0446a13f01e63fe938dc"
      }
    ],
    "blockNumber": 11845684,
    "cumulativeGasUsed": "1297924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x0000000000000000000000000000000000000000",
    "0x3100000000000000000000000000000000000000000000000000000000000000",
    1
  ],
  "solcInputHash": "1bcf4f481a51a58f83bd3a333202be49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayVerificationRootGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayVerificationRootGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationRoot\",\"type\":\"bytes32\"}],\"name\":\"receiveVerificationRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"verificationRoot\",\"type\":\"bytes32\"}],\"name\":\"relayVerificationRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayVerificationRootGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"}],\"name\":\"updateBridgeChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeLink\",\"type\":\"address\"}],\"name\":\"updateBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relayVerificationRootGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateRelayVerificationRootGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRootRelayer\",\"type\":\"address\"}],\"name\":\"updateVerificationRootRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionVerificationManager\",\"type\":\"address\"}],\"name\":\"updateVersionVerificationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRootRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionVerificationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol\":\"VerificationRootBridgeLinkMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/PackageOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\nimport \\\"./bridges/interfaces/IOwnershipBridgeLink.sol\\\";\\nimport \\\"./domain-registries/interfaces/IDomainRegistryLink.sol\\\";\\n\\ncontract PackageOwnershipManager is OwnableUpgradeable {\\n  address public registry;\\n\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  mapping(bytes32 => bool) public allowedLocalDomainRegistries;\\n  mapping(bytes32 => address) public incomingBridgeLinks;\\n  mapping(bytes32 => address) public outgoingBridgeLinks;\\n\\n  constructor(\\n    address owner,\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) {\\n    initialize(_registry, _domainRegistries, _domainRegistryLinks);\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n  function updateRegistry(address _registry) public {\\n    registry = _registry;\\n  }\\n\\n  function updateLocalDomainRegistryPermission(\\n    bytes32 domainRegistry,\\n    bool allowed\\n  ) public onlyOwner {\\n    allowedLocalDomainRegistries[domainRegistry] = allowed;\\n  }\\n\\n  function updateIncomingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    incomingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function updateOutgoingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    outgoingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function connectDomainRegistryLink(\\n    bytes32 domainRegistry,\\n    address _domainRegistryLink\\n  ) public onlyOwner {\\n    domainRegistryLinks[domainRegistry] = _domainRegistryLink;\\n  }\\n\\n  function updateOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n  {\\n    require(\\n      allowedLocalDomainRegistries[domainRegistry],\\n      \\\"Domain registry is not allowed for local updates\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function relayOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode\\n  ) public {\\n    address bridgeLink = outgoingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Outgoing relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    IOwnershipBridgeLink(bridgeLink).relayOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address owner\\n  ) public {\\n    address bridgeLink = incomingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Incoming relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    assert(msg.sender == bridgeLink);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    require(\\n      domainRegistryLinkAddress != address(0),\\n      \\\"Domain registry is not supported\\\"\\n    );\\n\\n    return\\n      IDomainRegistryLink(domainRegistryLinkAddress).getPolywrapOwner(\\n        domainRegistryNode\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x7f6a396e73c999999d951817d6fdaea0690d3b0c413bfa78bbf8c261ef9b8cf3\",\"license\":\"MIT\"},\"contracts/versioning/VersionVerificationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\n\\ncontract VersionVerificationManager is OwnableUpgradeable {\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    bytes32 indexed verifiedVersionId,\\n    bytes32 indexed patchNodeId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  address public registry;\\n  address public verificationRootUpdater;\\n\\n  bytes32 public verificationRoot;\\n\\n  constructor(\\n    address owner,\\n    address _registry\\n  ) {\\n    initialize(_registry);\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVerificationRootUpdater(address _verificationRootUpdater)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootUpdater = _verificationRootUpdater;\\n  }\\n\\n  function updateVerificationRoot(bytes32 root) public {\\n    assert(msg.sender == verificationRootUpdater);\\n\\n    verificationRoot = root;\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location,\\n    bytes32[] memory proof,\\n    bool[] memory sides\\n  ) public packageOwner(packageId) {\\n    bytes32 verifiedVersionId = keccak256(\\n      abi.encodePacked(patchNodeId, keccak256(abi.encodePacked(location)))\\n    );\\n\\n    require(\\n      proveVerifiedVersion(proof, sides, verifiedVersionId, verificationRoot),\\n      \\\"Invalid proof\\\"\\n    );\\n\\n    bytes32 actualPatchNodeId = Registry(registry).publishVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    require(\\n      patchNodeId == actualPatchNodeId,\\n      \\\"Supplied patchNodeId does not match the calculated patchNodeId\\\"\\n    );\\n\\n    emit VersionPublished(\\n      packageId,\\n      verifiedVersionId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n  }\\n\\n  function proveVerifiedVersion(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 verifiedVersionId,\\n    bytes32 root\\n  ) private pure returns (bool) {\\n    bytes32 hash = verifiedVersionId;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (sides[i]) {\\n        hash = keccak256(abi.encodePacked(proofElement, hash));\\n      } else {\\n        hash = keccak256(abi.encodePacked(hash, proofElement));\\n      }\\n    }\\n\\n    return hash == root;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0x15f805f8abfff904e5de7a21ef0db431206c8ec9f53affc8c861ad121f9c7d4e\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IOwnershipBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IOwnershipBridgeLink {\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea21d565c39c25979e93d9caf21aa4f976e8ead0946839e482b82f666e56f4\"},\"contracts/versioning/bridges/interfaces/IVerificationRootBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IVerificationRootBridgeLink {\\n  function relayVerificationRoot(bytes32 verificationRoot) external;\\n\\n  function receiveVerificationRoot(bytes32 verificationRoot) external;\\n}\\n\",\"keccak256\":\"0x2391cff3ce550e4b444a84af3c277edf1f8845f2fe99a32d4cfe2b2566c4280d\"},\"contracts/versioning/bridges/token-bridge/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITokenBridge {\\n  function requireToPassMessage(\\n    address _contract,\\n    bytes calldata _data,\\n    uint256 _gas\\n  ) external returns (bytes32);\\n\\n  function messageSender() external view returns (address);\\n\\n  function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f9503f07a46633b317c0a59e958d259f95e50bd1f3ebdc79bfbdcc7785ae53b\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/VerificationRootBridgeLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../VersionVerificationManager.sol\\\";\\nimport \\\"../../PackageOwnershipManager.sol\\\";\\nimport \\\"./ITokenBridge.sol\\\";\\nimport \\\"../interfaces/IVerificationRootBridgeLink.sol\\\";\\n\\ncontract VerificationRootBridgeLink is\\n  IVerificationRootBridgeLink,\\n  OwnableUpgradeable\\n{\\n  address public bridge;\\n  address public bridgeLink;\\n  address public verificationRootRelayer;\\n  address public versionVerificationManager;\\n  bytes32 public bridgeChainId;\\n  uint256 public relayVerificationRootGasLimit;\\n\\n  constructor(\\n    address owner,\\n    address _bridge,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayVerificationRootGasLimit\\n  ) {\\n    initialize(_bridge, _bridgeChainId, _relayVerificationRootGasLimit);\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize(\\n    address _bridge,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayVerificationRootGasLimit\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    bridge = _bridge;\\n    bridgeChainId = _bridgeChainId;\\n    relayVerificationRootGasLimit = _relayVerificationRootGasLimit;\\n  }\\n\\n  function updateBridge(address _bridge) public onlyOwner {\\n    bridge = _bridge;\\n  }\\n\\n  function updateBridgeLink(address _bridgeLink) public onlyOwner {\\n    bridgeLink = _bridgeLink;\\n  }\\n\\n  function updateVerificationRootRelayer(address _verificationRootRelayer)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootRelayer = _verificationRootRelayer;\\n  }\\n\\n  function updateVersionVerificationManager(address _versionVerificationManager)\\n    public\\n    onlyOwner\\n  {\\n    versionVerificationManager = _versionVerificationManager;\\n  }\\n\\n  function updateBridgeChainId(bytes32 _bridgeChainId) public onlyOwner {\\n    bridgeChainId = _bridgeChainId;\\n  }\\n\\n  function updateRelayVerificationRootGasLimit(\\n    uint256 _relayVerificationRootGasLimit\\n  ) public onlyOwner {\\n    relayVerificationRootGasLimit = _relayVerificationRootGasLimit;\\n  }\\n\\n  function relayVerificationRoot(bytes32 verificationRoot)\\n    public\\n    virtual\\n    override\\n  {\\n    assert(msg.sender == verificationRootRelayer);\\n\\n    bytes4 methodSelector = IVerificationRootBridgeLink(address(0))\\n      .receiveVerificationRoot\\n      .selector;\\n    bytes memory data = abi.encodeWithSelector(\\n      methodSelector,\\n      verificationRoot\\n    );\\n    ITokenBridge(bridge).requireToPassMessage(\\n      bridgeLink,\\n      data,\\n      relayVerificationRootGasLimit\\n    );\\n  }\\n\\n  function receiveVerificationRoot(bytes32 verificationRoot)\\n    public\\n    virtual\\n    override\\n  {\\n    assert(msg.sender == bridge);\\n\\n    ITokenBridge bridgeContract = ITokenBridge(bridge);\\n    require(bridgeContract.messageSender() == bridgeLink);\\n    require(bridgeContract.messageSourceChainId() == bridgeChainId);\\n\\n    VersionVerificationManager(versionVerificationManager)\\n      .updateVerificationRoot(verificationRoot);\\n  }\\n}\\n\",\"keccak256\":\"0x7dd9444ddf8c3382ab374cf73ea16a4f8b6d8756e5bb9d0e6b9eeda5b43f0979\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../../VersionVerificationManager.sol\\\";\\nimport \\\"../../../PackageOwnershipManager.sol\\\";\\nimport \\\"../ITokenBridge.sol\\\";\\nimport \\\"../VerificationRootBridgeLink.sol\\\";\\nimport \\\"../../interfaces/IVerificationRootBridgeLink.sol\\\";\\n\\ncontract VerificationRootBridgeLinkMock is VerificationRootBridgeLink {\\n  constructor(\\n    address owner,\\n    address _bridge,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayVerificationRootGasLimit\\n  )\\n    VerificationRootBridgeLink(\\n      owner,\\n      _bridge,\\n      _bridgeChainId,\\n      _relayVerificationRootGasLimit\\n    )\\n  {}\\n\\n  function relayVerificationRoot(bytes32 verificationRoot) public override {\\n    assert(msg.sender == verificationRootRelayer);\\n\\n    IVerificationRootBridgeLink(bridgeLink).receiveVerificationRoot(\\n      verificationRoot\\n    );\\n  }\\n\\n  function receiveVerificationRoot(bytes32 verificationRoot) public override {\\n    assert(msg.sender == bridgeLink);\\n\\n    VersionVerificationManager(versionVerificationManager)\\n      .updateVerificationRoot(verificationRoot);\\n  }\\n}\\n\",\"keccak256\":\"0x2fad56513763885101251e9468e1217115c57c3eaccd5fcbd1fbbf6f007f15ed\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor(\\n    address owner\\n  ) {\\n    initialize();\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x464aadc7bbfc29cc52424181cdbf66cc1f613b0fe73cba13cc9320511333eea5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dc938038062001dc98339818101604052810190620000379190620006de565b838383836200004e8383836200006d60201b60201c565b6200005f84620001ae60201b60201c565b505050505050505062000993565b600060019054906101000a900460ff168062000094575060008054906101000a900460ff16155b620000d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000cd90620007e1565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000127576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b62000137620002c460201b60201c565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260698190555081606a819055508015620001a85760008060016101000a81548160ff0219169083151502179055505b50505050565b620001be620003c360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001e4620003cb60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200023d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002349062000803565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002a790620007bf565b60405180910390fd5b620002c181620003f560201b60201c565b50565b600060019054906101000a900460ff1680620002eb575060008054906101000a900460ff16155b6200032d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032490620007e1565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200037e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200038e620004bb60201b60201c565b6200039e6200059a60201b60201c565b8015620003c05760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680620004e2575060008054906101000a900460ff16155b62000524576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200051b90620007e1565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000575576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620005975760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620005c1575060008054906101000a900460ff16155b62000603576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005fa90620007e1565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000654576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200067462000668620003c360201b60201c565b620003f560201b60201c565b8015620006965760008060016101000a81548160ff0219169083151502179055505b50565b600081519050620006aa8162000945565b92915050565b600081519050620006c1816200095f565b92915050565b600081519050620006d88162000979565b92915050565b60008060008060808587031215620006f557600080fd5b6000620007058782880162000699565b9450506020620007188782880162000699565b93505060406200072b87828801620006b0565b92505060606200073e87828801620006c7565b91505092959194509250565b60006200075960268362000825565b915062000766826200087e565b604082019050919050565b600062000780602e8362000825565b91506200078d82620008cd565b604082019050919050565b6000620007a760208362000825565b9150620007b4826200091c565b602082019050919050565b60006020820190508181036000830152620007da816200074a565b9050919050565b60006020820190508181036000830152620007fc8162000771565b9050919050565b600060208201905081810360008301526200081e8162000798565b9050919050565b600082825260208201905092915050565b6000620008438262000854565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620009508162000836565b81146200095c57600080fd5b50565b6200096a816200084a565b81146200097657600080fd5b50565b620009848162000874565b81146200099057600080fd5b50565b61142680620009a36000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637cc41844116100a2578063c97a51bd11610071578063c97a51bd1461027d578063cf9cdb2514610299578063e78cea92146102b7578063f2fde38b146102d5578063f9e5eafd146102f157610116565b80637cc41844146102075780638da5cb5b146102255780639bd6473f14610243578063c18a0c401461025f57610116565b80636113c1bd116100e95780636113c1bd1461018d578063684560a2146101a95780636d140f00146101c55780636eb38212146101e1578063715018a6146101fd57610116565b80630d9f552e1461011b5780630e4c98071461013757806335d7d56a146101535780634c8d9af11461016f575b600080fd5b6101356004803603810190610130919061107c565b61030f565b005b610151600480360381019061014c919061107c565b6103cf565b005b61016d6004803603810190610168919061111d565b61048f565b005b610177610515565b60405161018491906111dc565b60405180910390f35b6101a760048036038101906101a2919061107c565b61053b565b005b6101c360048036038101906101be91906110a5565b6105fb565b005b6101df60048036038101906101da91906110f4565b61072e565b005b6101fb60048036038101906101f6919061107c565b610842565b005b610205610902565b005b61020f61098a565b60405161021c91906111dc565b60405180910390f35b61022d6109b0565b60405161023a91906111dc565b60405180910390f35b61025d600480360381019061025891906110f4565b6109da565b005b610267610aee565b6040516102749190611272565b60405180910390f35b610297600480360381019061029291906110f4565b610af4565b005b6102a1610b7a565b6040516102ae91906111f7565b60405180910390f35b6102bf610b80565b6040516102cc91906111dc565b60405180910390f35b6102ef60048036038101906102ea919061107c565b610ba6565b005b6102f9610c9e565b60405161030691906111dc565b60405180910390f35b610317610cc4565b73ffffffffffffffffffffffffffffffffffffffff166103356109b0565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611252565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103d7610cc4565b73ffffffffffffffffffffffffffffffffffffffff166103f56109b0565b73ffffffffffffffffffffffffffffffffffffffff161461044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044290611252565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610497610cc4565b73ffffffffffffffffffffffffffffffffffffffff166104b56109b0565b73ffffffffffffffffffffffffffffffffffffffff161461050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290611252565b60405180910390fd5b80606a8190555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610543610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105616109b0565b73ffffffffffffffffffffffffffffffffffffffff16146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90611252565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610621575060008054906101000a900460ff16155b610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611232565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106b0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106b8610ccc565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260698190555081606a8190555080156107285760008060016101000a81548160ff0219169083151502179055505b50505050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343ed751d826040518263ffffffff1660e01b815260040161080d91906111f7565b600060405180830381600087803b15801561082757600080fd5b505af115801561083b573d6000803e3d6000fd5b5050505050565b61084a610cc4565b73ffffffffffffffffffffffffffffffffffffffff166108686109b0565b73ffffffffffffffffffffffffffffffffffffffff16146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590611252565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61090a610cc4565b73ffffffffffffffffffffffffffffffffffffffff166109286109b0565b73ffffffffffffffffffffffffffffffffffffffff161461097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590611252565b60405180910390fd5b6109886000610db5565b565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d140f00826040518263ffffffff1660e01b8152600401610ab991906111f7565b600060405180830381600087803b158015610ad357600080fd5b505af1158015610ae7573d6000803e3d6000fd5b5050505050565b606a5481565b610afc610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610b1a6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6790611252565b60405180910390fd5b8060698190555050565b60695481565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bae610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610bcc6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1990611252565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8990611212565b60405180910390fd5b610c9b81610db5565b50565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610cf2575060008054906101000a900460ff16155b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d81576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d89610e7b565b610d91610f54565b8015610db25760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610ea1575060008054906101000a900460ff16155b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f30576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f515760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f7a575060008054906101000a900460ff16155b610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015611009576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611019611014610cc4565b610db5565b801561103a5760008060016101000a81548160ff0219169083151502179055505b50565b60008135905061104c816113ab565b92915050565b600081359050611061816113c2565b92915050565b600081359050611076816113d9565b92915050565b60006020828403121561108e57600080fd5b600061109c8482850161103d565b91505092915050565b6000806000606084860312156110ba57600080fd5b60006110c88682870161103d565b93505060206110d986828701611052565b92505060406110ea86828701611067565b9150509250925092565b60006020828403121561110657600080fd5b600061111484828501611052565b91505092915050565b60006020828403121561112f57600080fd5b600061113d84828501611067565b91505092915050565b61114f8161129e565b82525050565b61115e816112b0565b82525050565b600061117160268361128d565b915061117c826112e4565b604082019050919050565b6000611194602e8361128d565b915061119f82611333565b604082019050919050565b60006111b760208361128d565b91506111c282611382565b602082019050919050565b6111d6816112da565b82525050565b60006020820190506111f16000830184611146565b92915050565b600060208201905061120c6000830184611155565b92915050565b6000602082019050818103600083015261122b81611164565b9050919050565b6000602082019050818103600083015261124b81611187565b9050919050565b6000602082019050818103600083015261126b816111aa565b9050919050565b600060208201905061128760008301846111cd565b92915050565b600082825260208201905092915050565b60006112a9826112ba565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6113b48161129e565b81146113bf57600080fd5b50565b6113cb816112b0565b81146113d657600080fd5b50565b6113e2816112da565b81146113ed57600080fd5b5056fea2646970667358221220a3155d3b63af0980359cbd96d998e38d10b4f6f72037203115c4dfdcc76501c664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637cc41844116100a2578063c97a51bd11610071578063c97a51bd1461027d578063cf9cdb2514610299578063e78cea92146102b7578063f2fde38b146102d5578063f9e5eafd146102f157610116565b80637cc41844146102075780638da5cb5b146102255780639bd6473f14610243578063c18a0c401461025f57610116565b80636113c1bd116100e95780636113c1bd1461018d578063684560a2146101a95780636d140f00146101c55780636eb38212146101e1578063715018a6146101fd57610116565b80630d9f552e1461011b5780630e4c98071461013757806335d7d56a146101535780634c8d9af11461016f575b600080fd5b6101356004803603810190610130919061107c565b61030f565b005b610151600480360381019061014c919061107c565b6103cf565b005b61016d6004803603810190610168919061111d565b61048f565b005b610177610515565b60405161018491906111dc565b60405180910390f35b6101a760048036038101906101a2919061107c565b61053b565b005b6101c360048036038101906101be91906110a5565b6105fb565b005b6101df60048036038101906101da91906110f4565b61072e565b005b6101fb60048036038101906101f6919061107c565b610842565b005b610205610902565b005b61020f61098a565b60405161021c91906111dc565b60405180910390f35b61022d6109b0565b60405161023a91906111dc565b60405180910390f35b61025d600480360381019061025891906110f4565b6109da565b005b610267610aee565b6040516102749190611272565b60405180910390f35b610297600480360381019061029291906110f4565b610af4565b005b6102a1610b7a565b6040516102ae91906111f7565b60405180910390f35b6102bf610b80565b6040516102cc91906111dc565b60405180910390f35b6102ef60048036038101906102ea919061107c565b610ba6565b005b6102f9610c9e565b60405161030691906111dc565b60405180910390f35b610317610cc4565b73ffffffffffffffffffffffffffffffffffffffff166103356109b0565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611252565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103d7610cc4565b73ffffffffffffffffffffffffffffffffffffffff166103f56109b0565b73ffffffffffffffffffffffffffffffffffffffff161461044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044290611252565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610497610cc4565b73ffffffffffffffffffffffffffffffffffffffff166104b56109b0565b73ffffffffffffffffffffffffffffffffffffffff161461050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290611252565b60405180910390fd5b80606a8190555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610543610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105616109b0565b73ffffffffffffffffffffffffffffffffffffffff16146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90611252565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610621575060008054906101000a900460ff16155b610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611232565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106b0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106b8610ccc565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260698190555081606a8190555080156107285760008060016101000a81548160ff0219169083151502179055505b50505050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343ed751d826040518263ffffffff1660e01b815260040161080d91906111f7565b600060405180830381600087803b15801561082757600080fd5b505af115801561083b573d6000803e3d6000fd5b5050505050565b61084a610cc4565b73ffffffffffffffffffffffffffffffffffffffff166108686109b0565b73ffffffffffffffffffffffffffffffffffffffff16146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590611252565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61090a610cc4565b73ffffffffffffffffffffffffffffffffffffffff166109286109b0565b73ffffffffffffffffffffffffffffffffffffffff161461097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590611252565b60405180910390fd5b6109886000610db5565b565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d140f00826040518263ffffffff1660e01b8152600401610ab991906111f7565b600060405180830381600087803b158015610ad357600080fd5b505af1158015610ae7573d6000803e3d6000fd5b5050505050565b606a5481565b610afc610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610b1a6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6790611252565b60405180910390fd5b8060698190555050565b60695481565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bae610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610bcc6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1990611252565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8990611212565b60405180910390fd5b610c9b81610db5565b50565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610cf2575060008054906101000a900460ff16155b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d81576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d89610e7b565b610d91610f54565b8015610db25760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610ea1575060008054906101000a900460ff16155b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f30576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f515760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f7a575060008054906101000a900460ff16155b610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090611232565b60405180910390fd5b60008060019054906101000a900460ff161590508015611009576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611019611014610cc4565b610db5565b801561103a5760008060016101000a81548160ff0219169083151502179055505b50565b60008135905061104c816113ab565b92915050565b600081359050611061816113c2565b92915050565b600081359050611076816113d9565b92915050565b60006020828403121561108e57600080fd5b600061109c8482850161103d565b91505092915050565b6000806000606084860312156110ba57600080fd5b60006110c88682870161103d565b93505060206110d986828701611052565b92505060406110ea86828701611067565b9150509250925092565b60006020828403121561110657600080fd5b600061111484828501611052565b91505092915050565b60006020828403121561112f57600080fd5b600061113d84828501611067565b91505092915050565b61114f8161129e565b82525050565b61115e816112b0565b82525050565b600061117160268361128d565b915061117c826112e4565b604082019050919050565b6000611194602e8361128d565b915061119f82611333565b604082019050919050565b60006111b760208361128d565b91506111c282611382565b602082019050919050565b6111d6816112da565b82525050565b60006020820190506111f16000830184611146565b92915050565b600060208201905061120c6000830184611155565b92915050565b6000602082019050818103600083015261122b81611164565b9050919050565b6000602082019050818103600083015261124b81611187565b9050919050565b6000602082019050818103600083015261126b816111aa565b9050919050565b600060208201905061128760008301846111cd565b92915050565b600082825260208201905092915050565b60006112a9826112ba565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6113b48161129e565b81146113bf57600080fd5b50565b6113cb816112b0565b81146113d657600080fd5b50565b6113e2816112da565b81146113ed57600080fd5b5056fea2646970667358221220a3155d3b63af0980359cbd96d998e38d10b4f6f72037203115c4dfdcc76501c664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2948,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "bridge",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2950,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "bridgeLink",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 2952,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "verificationRootRelayer",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 2954,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "versionVerificationManager",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 2956,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "bridgeChainId",
        "offset": 0,
        "slot": "105",
        "type": "t_bytes32"
      },
      {
        "astId": 2958,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/VerificationRootBridgeLinkMock.sol:VerificationRootBridgeLinkMock",
        "label": "relayVerificationRootGasLimit",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}