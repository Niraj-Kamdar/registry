{
  "address": "0x1f55f0b7B51C45E9d35d31BbA35373f399a8E0f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_domainRegistries",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_domainRegistryLinks",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "allowedLocalDomainRegistries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_domainRegistryLink",
          "type": "address"
        }
      ],
      "name": "connectDomainRegistryLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domainRegistryLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "getPolywrapOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "incomingBridgeLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_domainRegistries",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_domainRegistryLinks",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "outgoingBridgeLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "receiveOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "relayOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateIncomingBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateLocalDomainRegistryPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateOutgoingBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "updateOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xd32Edd7217b1fae9f492415fA98738A12610AFdf",
    [
      "0x656e730000000000000000000000000000000000000000000000000000000000"
    ],
    [
      "0xa90AFD04C0aeb4fC631C793EB77a46E25b06B495"
    ]
  ],
  "solcInputHash": "1bcf4f481a51a58f83bd3a333202be49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_domainRegistries\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_domainRegistryLinks\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedLocalDomainRegistries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_domainRegistryLink\",\"type\":\"address\"}],\"name\":\"connectDomainRegistryLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domainRegistryLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"getPolywrapOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incomingBridgeLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_domainRegistries\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_domainRegistryLinks\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"outgoingBridgeLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"relayOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridgeLink\",\"type\":\"address\"}],\"name\":\"updateIncomingBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateLocalDomainRegistryPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridgeLink\",\"type\":\"address\"}],\"name\":\"updateOutgoingBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/PackageOwnershipManager.sol\":\"PackageOwnershipManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/PackageOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\nimport \\\"./bridges/interfaces/IOwnershipBridgeLink.sol\\\";\\nimport \\\"./domain-registries/interfaces/IDomainRegistryLink.sol\\\";\\n\\ncontract PackageOwnershipManager is OwnableUpgradeable {\\n  address public registry;\\n\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  mapping(bytes32 => bool) public allowedLocalDomainRegistries;\\n  mapping(bytes32 => address) public incomingBridgeLinks;\\n  mapping(bytes32 => address) public outgoingBridgeLinks;\\n\\n  constructor(\\n    address owner,\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) {\\n    initialize(_registry, _domainRegistries, _domainRegistryLinks);\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n  function updateRegistry(address _registry) public {\\n    registry = _registry;\\n  }\\n\\n  function updateLocalDomainRegistryPermission(\\n    bytes32 domainRegistry,\\n    bool allowed\\n  ) public onlyOwner {\\n    allowedLocalDomainRegistries[domainRegistry] = allowed;\\n  }\\n\\n  function updateIncomingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    incomingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function updateOutgoingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    outgoingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function connectDomainRegistryLink(\\n    bytes32 domainRegistry,\\n    address _domainRegistryLink\\n  ) public onlyOwner {\\n    domainRegistryLinks[domainRegistry] = _domainRegistryLink;\\n  }\\n\\n  function updateOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n  {\\n    require(\\n      allowedLocalDomainRegistries[domainRegistry],\\n      \\\"Domain registry is not allowed for local updates\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function relayOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode\\n  ) public {\\n    address bridgeLink = outgoingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Outgoing relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    IOwnershipBridgeLink(bridgeLink).relayOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address owner\\n  ) public {\\n    address bridgeLink = incomingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Incoming relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    assert(msg.sender == bridgeLink);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    require(\\n      domainRegistryLinkAddress != address(0),\\n      \\\"Domain registry is not supported\\\"\\n    );\\n\\n    return\\n      IDomainRegistryLink(domainRegistryLinkAddress).getPolywrapOwner(\\n        domainRegistryNode\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x7f6a396e73c999999d951817d6fdaea0690d3b0c413bfa78bbf8c261ef9b8cf3\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IOwnershipBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IOwnershipBridgeLink {\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea21d565c39c25979e93d9caf21aa4f976e8ead0946839e482b82f666e56f4\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor(\\n    address owner\\n  ) {\\n    initialize();\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x464aadc7bbfc29cc52424181cdbf66cc1f613b0fe73cba13cc9320511333eea5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ec238038062002ec2833981810160405281019062000037919062000934565b6200004a8383836200006560201b60201c565b6200005b84620002d760201b60201c565b5050505062000e13565b600060019054906101000a900460ff16806200008c575060008054906101000a900460ff16155b620000ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c59062000a90565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200011f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200012f620003ed60201b60201c565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114620001b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ae9062000ad4565b60405180910390fd5b60005b8351811015620002ae57828181518110620001fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516066600086848151811062000244577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620002a59062000c0c565b915050620001ba565b508015620002d15760008060016101000a81548160ff0219169083151502179055505b50505050565b620002e7620004ec60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200030d620004f460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000366576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200035d9062000ab2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620003d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003d09062000a6e565b60405180910390fd5b620003ea816200051e60201b60201c565b50565b600060019054906101000a900460ff168062000414575060008054906101000a900460ff16155b62000456576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200044d9062000a90565b60405180910390fd5b60008060019054906101000a900460ff161590508015620004a7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620004b7620005e460201b60201c565b620004c7620006c360201b60201c565b8015620004e95760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16806200060b575060008054906101000a900460ff16155b6200064d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006449062000a90565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200069e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620006c05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620006ea575060008054906101000a900460ff16155b6200072c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007239062000a90565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200077d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200079d62000791620004ec60201b60201c565b6200051e60201b60201c565b8015620007bf5760008060016101000a81548160ff0219169083151502179055505b50565b6000620007d9620007d38462000b1f565b62000af6565b90508083825260208201905082856020860282011115620007f957600080fd5b60005b858110156200082d5781620008128882620008ac565b845260208401935060208301925050600181019050620007fc565b5050509392505050565b60006200084e620008488462000b4e565b62000af6565b905080838252602082019050828560208602820111156200086e57600080fd5b60005b85811015620008a257816200088788826200091d565b84526020840193506020830192505060018101905062000871565b5050509392505050565b600081519050620008bd8162000ddf565b92915050565b600082601f830112620008d557600080fd5b8151620008e7848260208601620007c2565b91505092915050565b600082601f8301126200090257600080fd5b81516200091484826020860162000837565b91505092915050565b6000815190506200092e8162000df9565b92915050565b600080600080608085870312156200094b57600080fd5b60006200095b87828801620008ac565b94505060206200096e87828801620008ac565b935050604085015167ffffffffffffffff8111156200098c57600080fd5b6200099a87828801620008f0565b925050606085015167ffffffffffffffff811115620009b857600080fd5b620009c687828801620008c3565b91505092959194509250565b6000620009e160268362000b7d565b9150620009ee8262000cc9565b604082019050919050565b600062000a08602e8362000b7d565b915062000a158262000d18565b604082019050919050565b600062000a2f60208362000b7d565b915062000a3c8262000d67565b602082019050919050565b600062000a5660298362000b7d565b915062000a638262000d90565b604082019050919050565b6000602082019050818103600083015262000a8981620009d2565b9050919050565b6000602082019050818103600083015262000aab81620009f9565b9050919050565b6000602082019050818103600083015262000acd8162000a20565b9050919050565b6000602082019050818103600083015262000aef8162000a47565b9050919050565b600062000b0262000b15565b905062000b10828262000bd6565b919050565b6000604051905090565b600067ffffffffffffffff82111562000b3d5762000b3c62000c89565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000b6c5762000b6b62000c89565b5b602082029050602081019050919050565b600082825260208201905092915050565b600062000b9b8262000bac565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000be18262000cb8565b810181811067ffffffffffffffff8211171562000c035762000c0262000c89565b5b80604052505050565b600062000c198262000bcc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000c4f5762000c4e62000c5a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b62000dea8162000b8e565b811462000df657600080fd5b50565b62000e048162000ba2565b811462000e1057600080fd5b50565b61209f8062000e236000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c7c3d18011610071578063c7c3d180146102dd578063d41b4e72146102f9578063e7da1cd614610315578063f2fde38b14610331578063fe50a1111461034d57610116565b80638da5cb5b14610243578063a485572d14610261578063a5d7a24e14610291578063c6fa176e146102ad57610116565b806356033774116100e9578063560337741461019f5780635f47a231146101cf578063715018a6146101eb578063739f0476146101f55780637b1039991461022557610116565b80631a5da6c81461011b5780631cbfb765146101375780634b5c178714610167578063511147bd14610183575b600080fd5b61013560048036038101906101309190611666565b610369565b005b610151600480360381019061014c9190611737565b6103ad565b60405161015e9190611a9d565b60405180910390f35b610181600480360381019061017c9190611760565b6103e0565b005b61019d60048036038101906101989190611814565b6104b2565b005b6101b960048036038101906101b49190611737565b6105b3565b6040516101c69190611ab8565b60405180910390f35b6101e960048036038101906101e49190611863565b6105d3565b005b6101f3610727565b005b61020f600480360381019061020a9190611737565b6107af565b60405161021c9190611a9d565b60405180910390f35b61022d6107e2565b60405161023a9190611a9d565b60405180910390f35b61024b610808565b6040516102589190611a9d565b60405180910390f35b61027b60048036038101906102769190611737565b610832565b6040516102889190611a9d565b60405180910390f35b6102ab60048036038101906102a691906117d8565b610865565b005b6102c760048036038101906102c291906117d8565b610969565b6040516102d49190611a9d565b60405180910390f35b6102f760048036038101906102f29190611814565b610aa4565b005b610313600480360381019061030e91906116b8565b610ba5565b005b61032f600480360381019061032a91906118b2565b610e00565b005b61034b60048036038101906103469190611666565b610fca565b005b6103676004803603810190610362919061179c565b6110c2565b005b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60686020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103e861116d565b73ffffffffffffffffffffffffffffffffffffffff16610406610808565b73ffffffffffffffffffffffffffffffffffffffff161461045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611be5565b60405180910390fd5b806066600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6104ba61116d565b73ffffffffffffffffffffffffffffffffffffffff166104d8610808565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590611be5565b60405180910390fd5b60008383604051602001610543929190611a71565b604051602081830303815290604052805190602001209050816068600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60676020528060005260406000206000915054906101000a900460ff1681565b60006069600084866040516020016105ec929190611a71565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a90611b25565b60405180910390fd5b60006106af8484610969565b90508173ffffffffffffffffffffffffffffffffffffffff1663d78801818585846040518463ffffffff1660e01b81526004016106ee93929190611aee565b600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050505050505050565b61072f61116d565b73ffffffffffffffffffffffffffffffffffffffff1661074d610808565b73ffffffffffffffffffffffffffffffffffffffff16146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611be5565b60405180910390fd5b6107ad6000611175565b565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6067600083815260200190815260200160002060009054906101000a900460ff166108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc90611bc5565b60405180910390fd5b60006108d18383610969565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488484846040518463ffffffff1660e01b815260040161093293929190611aee565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b50505050505050565b6000806066600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0990611b65565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166331ac1d0d846040518263ffffffff1660e01b8152600401610a4b9190611ad3565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b919061168f565b91505092915050565b610aac61116d565b73ffffffffffffffffffffffffffffffffffffffff16610aca610808565b73ffffffffffffffffffffffffffffffffffffffff1614610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790611be5565b60405180910390fd5b60008383604051602001610b35929190611a71565b604051602081830303815290604052805190602001209050816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600060019054906101000a900460ff1680610bcb575060008054906101000a900460ff16155b610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0190611ba5565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c5a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c6261123b565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cde90611c05565b60405180910390fd5b60005b8351811015610dd857828181518110610d2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160666000868481518110610d71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610dd090611d36565b915050610cea565b508015610dfa5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000606860008587604051602001610e19929190611a71565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec790611b85565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f32577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488585856040518463ffffffff1660e01b8152600401610f9193929190611aee565b600060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505050505050505050565b610fd261116d565b73ffffffffffffffffffffffffffffffffffffffff16610ff0610808565b73ffffffffffffffffffffffffffffffffffffffff1614611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90611be5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ad90611b45565b60405180910390fd5b6110bf81611175565b50565b6110ca61116d565b73ffffffffffffffffffffffffffffffffffffffff166110e8610808565b73ffffffffffffffffffffffffffffffffffffffff161461113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590611be5565b60405180910390fd5b806067600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680611261575060008054906101000a900460ff16155b6112a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129790611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156112f0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6112f8611324565b6113006113fd565b80156113215760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061134a575060008054906101000a900460ff16155b611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138090611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156113fa5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611423575060008054906101000a900460ff16155b611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156114b2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6114c26114bd61116d565b611175565b80156114e35760008060016101000a81548160ff0219169083151502179055505b50565b60006114f96114f484611c4a565b611c25565b9050808382526020820190508285602086028201111561151857600080fd5b60005b85811015611548578161152e88826115be565b84526020840193506020830192505060018101905061151b565b5050509392505050565b600061156561156084611c76565b611c25565b9050808382526020820190508285602086028201111561158457600080fd5b60005b858110156115b4578161159a8882611651565b845260208401935060208301925050600181019050611587565b5050509392505050565b6000813590506115cd81612024565b92915050565b6000815190506115e281612024565b92915050565b600082601f8301126115f957600080fd5b81356116098482602086016114e6565b91505092915050565b600082601f83011261162357600080fd5b8135611633848260208601611552565b91505092915050565b60008135905061164b8161203b565b92915050565b60008135905061166081612052565b92915050565b60006020828403121561167857600080fd5b6000611686848285016115be565b91505092915050565b6000602082840312156116a157600080fd5b60006116af848285016115d3565b91505092915050565b6000806000606084860312156116cd57600080fd5b60006116db868287016115be565b935050602084013567ffffffffffffffff8111156116f857600080fd5b61170486828701611612565b925050604084013567ffffffffffffffff81111561172157600080fd5b61172d868287016115e8565b9150509250925092565b60006020828403121561174957600080fd5b600061175784828501611651565b91505092915050565b6000806040838503121561177357600080fd5b600061178185828601611651565b9250506020611792858286016115be565b9150509250929050565b600080604083850312156117af57600080fd5b60006117bd85828601611651565b92505060206117ce8582860161163c565b9150509250929050565b600080604083850312156117eb57600080fd5b60006117f985828601611651565b925050602061180a85828601611651565b9150509250929050565b60008060006060848603121561182957600080fd5b600061183786828701611651565b935050602061184886828701611651565b9250506040611859868287016115be565b9150509250925092565b60008060006060848603121561187857600080fd5b600061188686828701611651565b935050602061189786828701611651565b92505060406118a886828701611651565b9150509250925092565b600080600080608085870312156118c857600080fd5b60006118d687828801611651565b94505060206118e787828801611651565b93505060406118f887828801611651565b9250506060611909878288016115be565b91505092959194509250565b61191e81611cb3565b82525050565b61192d81611cc5565b82525050565b61193c81611cd1565b82525050565b61195361194e82611cd1565b611d7f565b82525050565b6000611966603f83611ca2565b915061197182611df8565b604082019050919050565b6000611989602683611ca2565b915061199482611e47565b604082019050919050565b60006119ac602083611ca2565b91506119b782611e96565b602082019050919050565b60006119cf603f83611ca2565b91506119da82611ebf565b604082019050919050565b60006119f2602e83611ca2565b91506119fd82611f0e565b604082019050919050565b6000611a15603083611ca2565b9150611a2082611f5d565b604082019050919050565b6000611a38602083611ca2565b9150611a4382611fac565b602082019050919050565b6000611a5b602983611ca2565b9150611a6682611fd5565b604082019050919050565b6000611a7d8285611942565b602082019150611a8d8284611942565b6020820191508190509392505050565b6000602082019050611ab26000830184611915565b92915050565b6000602082019050611acd6000830184611924565b92915050565b6000602082019050611ae86000830184611933565b92915050565b6000606082019050611b036000830186611933565b611b106020830185611933565b611b1d6040830184611915565b949350505050565b60006020820190508181036000830152611b3e81611959565b9050919050565b60006020820190508181036000830152611b5e8161197c565b9050919050565b60006020820190508181036000830152611b7e8161199f565b9050919050565b60006020820190508181036000830152611b9e816119c2565b9050919050565b60006020820190508181036000830152611bbe816119e5565b9050919050565b60006020820190508181036000830152611bde81611a08565b9050919050565b60006020820190508181036000830152611bfe81611a2b565b9050919050565b60006020820190508181036000830152611c1e81611a4e565b9050919050565b6000611c2f611c40565b9050611c3b8282611d05565b919050565b6000604051905090565b600067ffffffffffffffff821115611c6557611c64611db8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611c9157611c90611db8565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000611cbe82611cdb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611d0e82611de7565b810181811067ffffffffffffffff82111715611d2d57611d2c611db8565b5b80604052505050565b6000611d4182611cfb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d7457611d73611d89565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f7574676f696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420737570706f72746564600082015250565b7f496e636f6d696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420616c6c6f776564206660008201527f6f72206c6f63616c207570646174657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b61202d81611cb3565b811461203857600080fd5b50565b61204481611cc5565b811461204f57600080fd5b50565b61205b81611cd1565b811461206657600080fd5b5056fea2646970667358221220c35ca1936de8afa47aaea69c489538788bc23e4470e98a7aafd0b88658e211e464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c7c3d18011610071578063c7c3d180146102dd578063d41b4e72146102f9578063e7da1cd614610315578063f2fde38b14610331578063fe50a1111461034d57610116565b80638da5cb5b14610243578063a485572d14610261578063a5d7a24e14610291578063c6fa176e146102ad57610116565b806356033774116100e9578063560337741461019f5780635f47a231146101cf578063715018a6146101eb578063739f0476146101f55780637b1039991461022557610116565b80631a5da6c81461011b5780631cbfb765146101375780634b5c178714610167578063511147bd14610183575b600080fd5b61013560048036038101906101309190611666565b610369565b005b610151600480360381019061014c9190611737565b6103ad565b60405161015e9190611a9d565b60405180910390f35b610181600480360381019061017c9190611760565b6103e0565b005b61019d60048036038101906101989190611814565b6104b2565b005b6101b960048036038101906101b49190611737565b6105b3565b6040516101c69190611ab8565b60405180910390f35b6101e960048036038101906101e49190611863565b6105d3565b005b6101f3610727565b005b61020f600480360381019061020a9190611737565b6107af565b60405161021c9190611a9d565b60405180910390f35b61022d6107e2565b60405161023a9190611a9d565b60405180910390f35b61024b610808565b6040516102589190611a9d565b60405180910390f35b61027b60048036038101906102769190611737565b610832565b6040516102889190611a9d565b60405180910390f35b6102ab60048036038101906102a691906117d8565b610865565b005b6102c760048036038101906102c291906117d8565b610969565b6040516102d49190611a9d565b60405180910390f35b6102f760048036038101906102f29190611814565b610aa4565b005b610313600480360381019061030e91906116b8565b610ba5565b005b61032f600480360381019061032a91906118b2565b610e00565b005b61034b60048036038101906103469190611666565b610fca565b005b6103676004803603810190610362919061179c565b6110c2565b005b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60686020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103e861116d565b73ffffffffffffffffffffffffffffffffffffffff16610406610808565b73ffffffffffffffffffffffffffffffffffffffff161461045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611be5565b60405180910390fd5b806066600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6104ba61116d565b73ffffffffffffffffffffffffffffffffffffffff166104d8610808565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590611be5565b60405180910390fd5b60008383604051602001610543929190611a71565b604051602081830303815290604052805190602001209050816068600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60676020528060005260406000206000915054906101000a900460ff1681565b60006069600084866040516020016105ec929190611a71565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a90611b25565b60405180910390fd5b60006106af8484610969565b90508173ffffffffffffffffffffffffffffffffffffffff1663d78801818585846040518463ffffffff1660e01b81526004016106ee93929190611aee565b600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050505050505050565b61072f61116d565b73ffffffffffffffffffffffffffffffffffffffff1661074d610808565b73ffffffffffffffffffffffffffffffffffffffff16146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611be5565b60405180910390fd5b6107ad6000611175565b565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6067600083815260200190815260200160002060009054906101000a900460ff166108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc90611bc5565b60405180910390fd5b60006108d18383610969565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488484846040518463ffffffff1660e01b815260040161093293929190611aee565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b50505050505050565b6000806066600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0990611b65565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166331ac1d0d846040518263ffffffff1660e01b8152600401610a4b9190611ad3565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b919061168f565b91505092915050565b610aac61116d565b73ffffffffffffffffffffffffffffffffffffffff16610aca610808565b73ffffffffffffffffffffffffffffffffffffffff1614610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790611be5565b60405180910390fd5b60008383604051602001610b35929190611a71565b604051602081830303815290604052805190602001209050816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600060019054906101000a900460ff1680610bcb575060008054906101000a900460ff16155b610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0190611ba5565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c5a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c6261123b565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cde90611c05565b60405180910390fd5b60005b8351811015610dd857828181518110610d2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160666000868481518110610d71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610dd090611d36565b915050610cea565b508015610dfa5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000606860008587604051602001610e19929190611a71565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec790611b85565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f32577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488585856040518463ffffffff1660e01b8152600401610f9193929190611aee565b600060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505050505050505050565b610fd261116d565b73ffffffffffffffffffffffffffffffffffffffff16610ff0610808565b73ffffffffffffffffffffffffffffffffffffffff1614611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90611be5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ad90611b45565b60405180910390fd5b6110bf81611175565b50565b6110ca61116d565b73ffffffffffffffffffffffffffffffffffffffff166110e8610808565b73ffffffffffffffffffffffffffffffffffffffff161461113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590611be5565b60405180910390fd5b806067600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680611261575060008054906101000a900460ff16155b6112a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129790611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156112f0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6112f8611324565b6113006113fd565b80156113215760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061134a575060008054906101000a900460ff16155b611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138090611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156113fa5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611423575060008054906101000a900460ff16155b611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990611ba5565b60405180910390fd5b60008060019054906101000a900460ff1615905080156114b2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6114c26114bd61116d565b611175565b80156114e35760008060016101000a81548160ff0219169083151502179055505b50565b60006114f96114f484611c4a565b611c25565b9050808382526020820190508285602086028201111561151857600080fd5b60005b85811015611548578161152e88826115be565b84526020840193506020830192505060018101905061151b565b5050509392505050565b600061156561156084611c76565b611c25565b9050808382526020820190508285602086028201111561158457600080fd5b60005b858110156115b4578161159a8882611651565b845260208401935060208301925050600181019050611587565b5050509392505050565b6000813590506115cd81612024565b92915050565b6000815190506115e281612024565b92915050565b600082601f8301126115f957600080fd5b81356116098482602086016114e6565b91505092915050565b600082601f83011261162357600080fd5b8135611633848260208601611552565b91505092915050565b60008135905061164b8161203b565b92915050565b60008135905061166081612052565b92915050565b60006020828403121561167857600080fd5b6000611686848285016115be565b91505092915050565b6000602082840312156116a157600080fd5b60006116af848285016115d3565b91505092915050565b6000806000606084860312156116cd57600080fd5b60006116db868287016115be565b935050602084013567ffffffffffffffff8111156116f857600080fd5b61170486828701611612565b925050604084013567ffffffffffffffff81111561172157600080fd5b61172d868287016115e8565b9150509250925092565b60006020828403121561174957600080fd5b600061175784828501611651565b91505092915050565b6000806040838503121561177357600080fd5b600061178185828601611651565b9250506020611792858286016115be565b9150509250929050565b600080604083850312156117af57600080fd5b60006117bd85828601611651565b92505060206117ce8582860161163c565b9150509250929050565b600080604083850312156117eb57600080fd5b60006117f985828601611651565b925050602061180a85828601611651565b9150509250929050565b60008060006060848603121561182957600080fd5b600061183786828701611651565b935050602061184886828701611651565b9250506040611859868287016115be565b9150509250925092565b60008060006060848603121561187857600080fd5b600061188686828701611651565b935050602061189786828701611651565b92505060406118a886828701611651565b9150509250925092565b600080600080608085870312156118c857600080fd5b60006118d687828801611651565b94505060206118e787828801611651565b93505060406118f887828801611651565b9250506060611909878288016115be565b91505092959194509250565b61191e81611cb3565b82525050565b61192d81611cc5565b82525050565b61193c81611cd1565b82525050565b61195361194e82611cd1565b611d7f565b82525050565b6000611966603f83611ca2565b915061197182611df8565b604082019050919050565b6000611989602683611ca2565b915061199482611e47565b604082019050919050565b60006119ac602083611ca2565b91506119b782611e96565b602082019050919050565b60006119cf603f83611ca2565b91506119da82611ebf565b604082019050919050565b60006119f2602e83611ca2565b91506119fd82611f0e565b604082019050919050565b6000611a15603083611ca2565b9150611a2082611f5d565b604082019050919050565b6000611a38602083611ca2565b9150611a4382611fac565b602082019050919050565b6000611a5b602983611ca2565b9150611a6682611fd5565b604082019050919050565b6000611a7d8285611942565b602082019150611a8d8284611942565b6020820191508190509392505050565b6000602082019050611ab26000830184611915565b92915050565b6000602082019050611acd6000830184611924565b92915050565b6000602082019050611ae86000830184611933565b92915050565b6000606082019050611b036000830186611933565b611b106020830185611933565b611b1d6040830184611915565b949350505050565b60006020820190508181036000830152611b3e81611959565b9050919050565b60006020820190508181036000830152611b5e8161197c565b9050919050565b60006020820190508181036000830152611b7e8161199f565b9050919050565b60006020820190508181036000830152611b9e816119c2565b9050919050565b60006020820190508181036000830152611bbe816119e5565b9050919050565b60006020820190508181036000830152611bde81611a08565b9050919050565b60006020820190508181036000830152611bfe81611a2b565b9050919050565b60006020820190508181036000830152611c1e81611a4e565b9050919050565b6000611c2f611c40565b9050611c3b8282611d05565b919050565b6000604051905090565b600067ffffffffffffffff821115611c6557611c64611db8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611c9157611c90611db8565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000611cbe82611cdb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611d0e82611de7565b810181811067ffffffffffffffff82111715611d2d57611d2c611db8565b5b80604052505050565b6000611d4182611cfb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d7457611d73611d89565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f7574676f696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420737570706f72746564600082015250565b7f496e636f6d696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420616c6c6f776564206660008201527f6f72206c6f63616c207570646174657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b61202d81611cb3565b811461203857600080fd5b50565b61204481611cc5565b811461204f57600080fd5b50565b61205b81611cd1565b811461206657600080fd5b5056fea2646970667358221220c35ca1936de8afa47aaea69c489538788bc23e4470e98a7aafd0b88658e211e464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "domainRegistryLinks",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 232,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "allowedLocalDomainRegistries",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 236,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "incomingBridgeLinks",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 240,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "outgoingBridgeLinks",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}