{
  "address": "0x98D669278F61BCC6a5c6c36b2F47b749364beA07",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnershipUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "major",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "VersionPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "getPackageLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        }
      ],
      "name": "getPackageOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "packages",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "publishVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionNodeId",
          "type": "bytes32"
        }
      ],
      "name": "resolveToLeaf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "domainOwner",
          "type": "address"
        }
      ],
      "name": "updateOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ownershipUpdater",
          "type": "address"
        }
      ],
      "name": "updateOwnershipUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionPublisher",
          "type": "address"
        }
      ],
      "name": "updateVersionPublisher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "versionNodes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "leaf",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "latestSubVersion",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPublisher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbae4452ff0cb64190df1fdcf946edf9deefa12995c80368a8ce60c5c7d92e7e3",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0x98D669278F61BCC6a5c6c36b2F47b749364beA07",
    "transactionIndex": 0,
    "gasUsed": "1759902",
    "logsBloom": "0x
    "blockHash": "0x0f078d72c04631c28a00be9b625dc71b4fed12f0df3df699400de031078b93b5",
    "transactionHash": "0xbae4452ff0cb64190df1fdcf946edf9deefa12995c80368a8ce60c5c7d92e7e3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xbae4452ff0cb64190df1fdcf946edf9deefa12995c80368a8ce60c5c7d92e7e3",
        "address": "0x98D669278F61BCC6a5c6c36b2F47b749364beA07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0f078d72c04631c28a00be9b625dc71b4fed12f0df3df699400de031078b93b5"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "1759902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"VersionPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"getPackageLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"}],\"name\":\"getPackageOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"publishVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionNodeId\",\"type\":\"bytes32\"}],\"name\":\"resolveToLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"domainOwner\",\"type\":\"address\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownershipUpdater\",\"type\":\"address\"}],\"name\":\"updateOwnershipUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionPublisher\",\"type\":\"address\"}],\"name\":\"updateVersionPublisher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"versionNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"leaf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"latestSubVersion\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPublisher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/registry/PolywrapRegistry.sol\":\"PolywrapRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/registry/PolywrapRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./VersionResolver.sol\\\";\\n\\ncontract PolywrapRegistry is VersionResolver {}\\n\",\"keccak256\":\"0x7a823ef70dadab0731708514074fa035620d8994b049f40038f96157b5b71d8f\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"},\"contracts/versioning/registry/VersionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Registry.sol\\\";\\n\\nabstract contract VersionResolver is Registry {\\n  function resolveToLeaf(bytes32 versionNodeId) public view returns (bytes32) {\\n    PackageVersion storage versionNode = versionNodes[versionNodeId];\\n    require(versionNode.created, \\\"Invalid Node\\\");\\n\\n    if (versionNode.leaf) {\\n      return versionNodeId;\\n    }\\n\\n    bytes32 latestNodeId = keccak256(\\n      abi.encodePacked(versionNodeId, versionNode.latestSubVersion)\\n    );\\n\\n    return resolveToLeaf(latestNodeId);\\n  }\\n\\n  function getPackageLocation(bytes32 versionNodeId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    bytes32 concreteVersionId = resolveToLeaf(versionNodeId);\\n    return versionNodes[concreteVersionId].location;\\n  }\\n}\\n\",\"keccak256\":\"0x6a4e5e49e84673d05c0b021ff6f57e1c5f1c88ed5e5d0a686d301cc406b89fc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b62000536565b600060019054906101000a900460ff16806200004f575060008054906101000a900460ff16155b62000091576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200008890620004b4565b60405180910390fd5b60008060019054906101000a900460ff161590508015620000e2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620000f26200011760201b60201c565b8015620001145760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200013e575060008054906101000a900460ff16155b62000180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017790620004b4565b60405180910390fd5b60008060019054906101000a900460ff161590508015620001d1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620001e16200021660201b60201c565b620001f1620002f560201b60201c565b8015620002135760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200023d575060008054906101000a900460ff16155b6200027f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200027690620004b4565b60405180910390fd5b60008060019054906101000a900460ff161590508015620002d0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620002f25760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200031c575060008054906101000a900460ff16155b6200035e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200035590620004b4565b60405180910390fd5b60008060019054906101000a900460ff161590508015620003af576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000620003c16200048560201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620004825760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b60006200049c602e83620004d6565b9150620004a982620004e7565b604082019050919050565b60006020820190508181036000830152620004cf816200048d565b9050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b611dab80620005466000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806371102819116100975780638da5cb5b116100665780638da5cb5b14610289578063c9f006b6146102a7578063ecb1b8d5146102c3578063f2fde38b146102e1576100f5565b80637110281914610213578063715018a61461024557806371fd7f811461024f5780638129fc1c1461027f576100f5565b80634dc1d99d116100d35780634dc1d99d146101765780635ab608e3146101a657806366b606a5146101c457806369317eb7146101e0576100f5565b8063233a1d99146100fa578063427a94d41461012a578063479661481461015a575b600080fd5b610114600480360381019061010f919061156f565b6102fd565b60405161012191906118d9565b60405180910390f35b610144600480360381019061013f919061156f565b6103ca565b604051610151919061183b565b60405180910390f35b610174600480360381019061016f9190611598565b61040a565b005b610190600480360381019061018b91906115e7565b6105da565b60405161019d91906118d9565b60405180910390f35b6101ae61091e565b6040516101bb919061183b565b60405180910390f35b6101de60048036038101906101d99190611546565b610944565b005b6101fa60048036038101906101f5919061156f565b610a04565b60405161020a949392919061188d565b60405180910390f35b61022d6004803603810190610228919061156f565b610ad6565b60405161023c93929190611856565b60405180910390f35b61024d610b20565b005b6102696004803603810190610264919061156f565b610c5d565b604051610276919061191d565b60405180910390f35b610287610d13565b005b610291610df4565b60405161029e919061183b565b60405180910390f35b6102c160048036038101906102bc9190611546565b610e1e565b005b6102cb610ede565b6040516102d8919061183b565b60405180910390f35b6102fb60048036038101906102f69190611546565b610f04565b005b6000806065600084815260200190815260200160002090508060020160009054906101000a900460ff16610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d906119bf565b60405180910390fd5b8060000160009054906101000a900460ff161561038657829150506103c5565b600083826001015460405160200161039f92919061180f565b6040516020818303038152906040528051906020012090506103c0816102fd565b925050505b919050565b60006066600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000826040516020016104a191906117c8565b60405160208183030381529060405280519060200120846040516020016104c99291906117e3565b60405160208183030381529060405280519060200120905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001858152506066600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff16837f7f290f38b12a4ba0db0dae399f91016a9fbf6c954370fc1988e92953060d5e5183876040516105cc9291906118f4565b60405180910390a350505050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000868660405160200161067592919061180f565b604051602081830303815290604052805190602001209050600081866040516020016106a292919061180f565b604051602081830303815290604052805190602001209050600081866040516020016106cf92919061180f565b6040516020818303038152906040528051906020012090506000606560008b81526020019081526020016000209050600060656000868152602001908152602001600020905060006065600086815260200190815260200160002090508a83600101541015610742578a83600101819055505b60018360020160006101000a81548160ff0219169083151502179055508982600101541015610775578982600101819055505b60018260020160006101000a81548160ff02191690831515021790555088816001015410156107a8578881600101819055505b60018160020160006101000a81548160ff0219169083151502179055506065600085815260200190815260200160002060020160009054906101000a900460ff1615610829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108209061199f565b60405180910390fd5b604051806080016040528060011515815260200160008152602001600115158152602001898152506065600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906108ca9291906113fc565b509050508b7fa0cf073ede1b5fef0ae41259066849d8f4af26eb95525731a11b3b6cdde968588c8c8c8c60405161090494939291906119df565b60405180910390a283965050505050505095945050505050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094c6110b0565b73ffffffffffffffffffffffffffffffffffffffff1661096a610df4565b73ffffffffffffffffffffffffffffffffffffffff16146109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b79061197f565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900460ff1690806003018054610a5390611b31565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f90611b31565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905084565b60666020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b610b286110b0565b73ffffffffffffffffffffffffffffffffffffffff16610b46610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b939061197f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606000610c6a836102fd565b9050606560008281526020019081526020016000206003018054610c8d90611b31565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb990611b31565b8015610d065780601f10610cdb57610100808354040283529160200191610d06565b820191906000526020600020905b815481529060010190602001808311610ce957829003601f168201915b5050505050915050919050565b600060019054906101000a900460ff1680610d39575060008054906101000a900460ff16155b610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f9061195f565b60405180910390fd5b60008060019054906101000a900460ff161590508015610dc8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610dd06110b8565b8015610df15760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e266110b0565b73ffffffffffffffffffffffffffffffffffffffff16610e44610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e919061197f565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f0c6110b0565b73ffffffffffffffffffffffffffffffffffffffff16610f2a610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f779061197f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe79061193f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff16806110de575060008054906101000a900460ff16155b61111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111149061195f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561116d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6111756111a1565b61117d61127a565b801561119e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806111c7575060008054906101000a900460ff16155b611206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fd9061195f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611256576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156112775760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806112a0575060008054906101000a900460ff16155b6112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d69061195f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561132f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006113396110b0565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156113f95760008060016101000a81548160ff0219169083151502179055505b50565b82805461140890611b31565b90600052602060002090601f01602090048101928261142a5760008555611471565b82601f1061144357805160ff1916838001178555611471565b82800160010185558215611471579182015b82811115611470578251825591602001919060010190611455565b5b50905061147e9190611482565b5090565b5b8082111561149b576000816000905550600101611483565b5090565b60006114b26114ad84611a50565b611a2b565b9050828152602081018484840111156114ca57600080fd5b6114d5848285611aef565b509392505050565b6000813590506114ec81611d30565b92915050565b60008135905061150181611d47565b92915050565b600082601f83011261151857600080fd5b813561152884826020860161149f565b91505092915050565b60008135905061154081611d5e565b92915050565b60006020828403121561155857600080fd5b6000611566848285016114dd565b91505092915050565b60006020828403121561158157600080fd5b600061158f848285016114f2565b91505092915050565b6000806000606084860312156115ad57600080fd5b60006115bb868287016114f2565b93505060206115cc868287016114f2565b92505060406115dd868287016114dd565b9150509250925092565b600080600080600060a086880312156115ff57600080fd5b600061160d888289016114f2565b955050602061161e88828901611531565b945050604061162f88828901611531565b935050606061164088828901611531565b925050608086013567ffffffffffffffff81111561165d57600080fd5b61166988828901611507565b9150509295509295909350565b61167f81611a9d565b82525050565b61168e81611aaf565b82525050565b61169d81611abb565b82525050565b6116b46116af82611abb565b611b94565b82525050565b60006116c582611a81565b6116cf8185611a8c565b93506116df818560208601611afe565b6116e881611c06565b840191505092915050565b6000611700602683611a8c565b915061170b82611c17565b604082019050919050565b6000611723602e83611a8c565b915061172e82611c66565b604082019050919050565b6000611746602083611a8c565b915061175182611cb5565b602082019050919050565b6000611769601c83611a8c565b915061177482611cde565b602082019050919050565b600061178c600c83611a8c565b915061179782611d07565b602082019050919050565b6117ab81611ae5565b82525050565b6117c26117bd82611ae5565b611b9e565b82525050565b60006117d482846116a3565b60208201915081905092915050565b60006117ef82856116a3565b6020820191506117ff82846116a3565b6020820191508190509392505050565b600061181b82856116a3565b60208201915061182b82846117b1565b6020820191508190509392505050565b60006020820190506118506000830184611676565b92915050565b600060608201905061186b6000830186611676565b6118786020830185611694565b6118856040830184611694565b949350505050565b60006080820190506118a26000830187611685565b6118af60208301866117a2565b6118bc6040830185611685565b81810360608301526118ce81846116ba565b905095945050505050565b60006020820190506118ee6000830184611694565b92915050565b60006040820190506119096000830185611694565b6119166020830184611694565b9392505050565b6000602082019050818103600083015261193781846116ba565b905092915050565b60006020820190508181036000830152611958816116f3565b9050919050565b6000602082019050818103600083015261197881611716565b9050919050565b6000602082019050818103600083015261199881611739565b9050919050565b600060208201905081810360008301526119b88161175c565b9050919050565b600060208201905081810360008301526119d88161177f565b9050919050565b60006080820190506119f460008301876117a2565b611a0160208301866117a2565b611a0e60408301856117a2565b8181036060830152611a2081846116ba565b905095945050505050565b6000611a35611a46565b9050611a418282611b63565b919050565b6000604051905090565b600067ffffffffffffffff821115611a6b57611a6a611bd7565b5b611a7482611c06565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611aa882611ac5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611b1c578082015181840152602081019050611b01565b83811115611b2b576000848401525b50505050565b60006002820490506001821680611b4957607f821691505b60208210811415611b5d57611b5c611ba8565b5b50919050565b611b6c82611c06565b810181811067ffffffffffffffff82111715611b8b57611b8a611bd7565b5b80604052505050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f56657273696f6e20697320616c7265616479207075626c697368656400000000600082015250565b7f496e76616c6964204e6f64650000000000000000000000000000000000000000600082015250565b611d3981611a9d565b8114611d4457600080fd5b50565b611d5081611abb565b8114611d5b57600080fd5b50565b611d6781611ae5565b8114611d7257600080fd5b5056fea264697066735822122093a2e110354cc7075b3c647db977c823c1b2f388d716e4d284daf42d00d79e2664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806371102819116100975780638da5cb5b116100665780638da5cb5b14610289578063c9f006b6146102a7578063ecb1b8d5146102c3578063f2fde38b146102e1576100f5565b80637110281914610213578063715018a61461024557806371fd7f811461024f5780638129fc1c1461027f576100f5565b80634dc1d99d116100d35780634dc1d99d146101765780635ab608e3146101a657806366b606a5146101c457806369317eb7146101e0576100f5565b8063233a1d99146100fa578063427a94d41461012a578063479661481461015a575b600080fd5b610114600480360381019061010f919061156f565b6102fd565b60405161012191906118d9565b60405180910390f35b610144600480360381019061013f919061156f565b6103ca565b604051610151919061183b565b60405180910390f35b610174600480360381019061016f9190611598565b61040a565b005b610190600480360381019061018b91906115e7565b6105da565b60405161019d91906118d9565b60405180910390f35b6101ae61091e565b6040516101bb919061183b565b60405180910390f35b6101de60048036038101906101d99190611546565b610944565b005b6101fa60048036038101906101f5919061156f565b610a04565b60405161020a949392919061188d565b60405180910390f35b61022d6004803603810190610228919061156f565b610ad6565b60405161023c93929190611856565b60405180910390f35b61024d610b20565b005b6102696004803603810190610264919061156f565b610c5d565b604051610276919061191d565b60405180910390f35b610287610d13565b005b610291610df4565b60405161029e919061183b565b60405180910390f35b6102c160048036038101906102bc9190611546565b610e1e565b005b6102cb610ede565b6040516102d8919061183b565b60405180910390f35b6102fb60048036038101906102f69190611546565b610f04565b005b6000806065600084815260200190815260200160002090508060020160009054906101000a900460ff16610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d906119bf565b60405180910390fd5b8060000160009054906101000a900460ff161561038657829150506103c5565b600083826001015460405160200161039f92919061180f565b6040516020818303038152906040528051906020012090506103c0816102fd565b925050505b919050565b60006066600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000826040516020016104a191906117c8565b60405160208183030381529060405280519060200120846040516020016104c99291906117e3565b60405160208183030381529060405280519060200120905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001858152506066600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff16837f7f290f38b12a4ba0db0dae399f91016a9fbf6c954370fc1988e92953060d5e5183876040516105cc9291906118f4565b60405180910390a350505050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000868660405160200161067592919061180f565b604051602081830303815290604052805190602001209050600081866040516020016106a292919061180f565b604051602081830303815290604052805190602001209050600081866040516020016106cf92919061180f565b6040516020818303038152906040528051906020012090506000606560008b81526020019081526020016000209050600060656000868152602001908152602001600020905060006065600086815260200190815260200160002090508a83600101541015610742578a83600101819055505b60018360020160006101000a81548160ff0219169083151502179055508982600101541015610775578982600101819055505b60018260020160006101000a81548160ff02191690831515021790555088816001015410156107a8578881600101819055505b60018160020160006101000a81548160ff0219169083151502179055506065600085815260200190815260200160002060020160009054906101000a900460ff1615610829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108209061199f565b60405180910390fd5b604051806080016040528060011515815260200160008152602001600115158152602001898152506065600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906108ca9291906113fc565b509050508b7fa0cf073ede1b5fef0ae41259066849d8f4af26eb95525731a11b3b6cdde968588c8c8c8c60405161090494939291906119df565b60405180910390a283965050505050505095945050505050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61094c6110b0565b73ffffffffffffffffffffffffffffffffffffffff1661096a610df4565b73ffffffffffffffffffffffffffffffffffffffff16146109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b79061197f565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020160009054906101000a900460ff1690806003018054610a5390611b31565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f90611b31565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905084565b60666020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b610b286110b0565b73ffffffffffffffffffffffffffffffffffffffff16610b46610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b939061197f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606000610c6a836102fd565b9050606560008281526020019081526020016000206003018054610c8d90611b31565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb990611b31565b8015610d065780601f10610cdb57610100808354040283529160200191610d06565b820191906000526020600020905b815481529060010190602001808311610ce957829003601f168201915b5050505050915050919050565b600060019054906101000a900460ff1680610d39575060008054906101000a900460ff16155b610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f9061195f565b60405180910390fd5b60008060019054906101000a900460ff161590508015610dc8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610dd06110b8565b8015610df15760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e266110b0565b73ffffffffffffffffffffffffffffffffffffffff16610e44610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e919061197f565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f0c6110b0565b73ffffffffffffffffffffffffffffffffffffffff16610f2a610df4565b73ffffffffffffffffffffffffffffffffffffffff1614610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f779061197f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe79061193f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff16806110de575060008054906101000a900460ff16155b61111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111149061195f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561116d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6111756111a1565b61117d61127a565b801561119e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806111c7575060008054906101000a900460ff16155b611206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fd9061195f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611256576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156112775760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806112a0575060008054906101000a900460ff16155b6112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d69061195f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561132f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006113396110b0565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156113f95760008060016101000a81548160ff0219169083151502179055505b50565b82805461140890611b31565b90600052602060002090601f01602090048101928261142a5760008555611471565b82601f1061144357805160ff1916838001178555611471565b82800160010185558215611471579182015b82811115611470578251825591602001919060010190611455565b5b50905061147e9190611482565b5090565b5b8082111561149b576000816000905550600101611483565b5090565b60006114b26114ad84611a50565b611a2b565b9050828152602081018484840111156114ca57600080fd5b6114d5848285611aef565b509392505050565b6000813590506114ec81611d30565b92915050565b60008135905061150181611d47565b92915050565b600082601f83011261151857600080fd5b813561152884826020860161149f565b91505092915050565b60008135905061154081611d5e565b92915050565b60006020828403121561155857600080fd5b6000611566848285016114dd565b91505092915050565b60006020828403121561158157600080fd5b600061158f848285016114f2565b91505092915050565b6000806000606084860312156115ad57600080fd5b60006115bb868287016114f2565b93505060206115cc868287016114f2565b92505060406115dd868287016114dd565b9150509250925092565b600080600080600060a086880312156115ff57600080fd5b600061160d888289016114f2565b955050602061161e88828901611531565b945050604061162f88828901611531565b935050606061164088828901611531565b925050608086013567ffffffffffffffff81111561165d57600080fd5b61166988828901611507565b9150509295509295909350565b61167f81611a9d565b82525050565b61168e81611aaf565b82525050565b61169d81611abb565b82525050565b6116b46116af82611abb565b611b94565b82525050565b60006116c582611a81565b6116cf8185611a8c565b93506116df818560208601611afe565b6116e881611c06565b840191505092915050565b6000611700602683611a8c565b915061170b82611c17565b604082019050919050565b6000611723602e83611a8c565b915061172e82611c66565b604082019050919050565b6000611746602083611a8c565b915061175182611cb5565b602082019050919050565b6000611769601c83611a8c565b915061177482611cde565b602082019050919050565b600061178c600c83611a8c565b915061179782611d07565b602082019050919050565b6117ab81611ae5565b82525050565b6117c26117bd82611ae5565b611b9e565b82525050565b60006117d482846116a3565b60208201915081905092915050565b60006117ef82856116a3565b6020820191506117ff82846116a3565b6020820191508190509392505050565b600061181b82856116a3565b60208201915061182b82846117b1565b6020820191508190509392505050565b60006020820190506118506000830184611676565b92915050565b600060608201905061186b6000830186611676565b6118786020830185611694565b6118856040830184611694565b949350505050565b60006080820190506118a26000830187611685565b6118af60208301866117a2565b6118bc6040830185611685565b81810360608301526118ce81846116ba565b905095945050505050565b60006020820190506118ee6000830184611694565b92915050565b60006040820190506119096000830185611694565b6119166020830184611694565b9392505050565b6000602082019050818103600083015261193781846116ba565b905092915050565b60006020820190508181036000830152611958816116f3565b9050919050565b6000602082019050818103600083015261197881611716565b9050919050565b6000602082019050818103600083015261199881611739565b9050919050565b600060208201905081810360008301526119b88161175c565b9050919050565b600060208201905081810360008301526119d88161177f565b9050919050565b60006080820190506119f460008301876117a2565b611a0160208301866117a2565b611a0e60408301856117a2565b8181036060830152611a2081846116ba565b905095945050505050565b6000611a35611a46565b9050611a418282611b63565b919050565b6000604051905090565b600067ffffffffffffffff821115611a6b57611a6a611bd7565b5b611a7482611c06565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611aa882611ac5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611b1c578082015181840152602081019050611b01565b83811115611b2b576000848401525b50505050565b60006002820490506001821680611b4957607f821691505b60208210811415611b5d57611b5c611ba8565b5b50919050565b611b6c82611c06565b810181811067ffffffffffffffff82111715611b8b57611b8a611bd7565b5b80604052505050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f56657273696f6e20697320616c7265616479207075626c697368656400000000600082015250565b7f496e76616c6964204e6f64650000000000000000000000000000000000000000600082015250565b611d3981611a9d565b8114611d4457600080fd5b50565b611d5081611abb565b8114611d5b57600080fd5b50565b611d6781611ae5565b8114611d7257600080fd5b5056fea264697066735822122093a2e110354cc7075b3c647db977c823c1b2f388d716e4d284daf42d00d79e2664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11016,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "versionNodes",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(PackageVersion)11004_storage)"
      },
      {
        "astId": 11021,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "packages",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_struct(PackageInfo)11011_storage)"
      },
      {
        "astId": 11023,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "ownershipUpdater",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 11025,
        "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
        "label": "versionPublisher",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(PackageInfo)11011_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Registry.PackageInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PackageInfo)11011_storage"
      },
      "t_mapping(t_bytes32,t_struct(PackageVersion)11004_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Registry.PackageVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(PackageVersion)11004_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PackageInfo)11011_storage": {
        "encoding": "inplace",
        "label": "struct Registry.PackageInfo",
        "members": [
          {
            "astId": 11006,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11008,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "domainRegistryNode",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11010,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "domainRegistry",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PackageVersion)11004_storage": {
        "encoding": "inplace",
        "label": "struct Registry.PackageVersion",
        "members": [
          {
            "astId": 10997,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "leaf",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10999,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "latestSubVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11001,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 11003,
            "contract": "contracts/versioning/registry/PolywrapRegistry.sol:PolywrapRegistry",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
