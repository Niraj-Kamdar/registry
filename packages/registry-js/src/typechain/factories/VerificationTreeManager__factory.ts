/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerificationTreeManager,
  VerificationTreeManagerInterface,
} from "../VerificationTreeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "verificationRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verifiedVersionCount",
        type: "uint256",
      },
    ],
    name: "VerificationRootCalculated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "patchNodeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "packageLocationHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verifiedVersionIndex",
        type: "uint256",
      },
    ],
    name: "VersionVerified",
    type: "event",
  },
  {
    inputs: [],
    name: "calculateVerificationRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "patchNodeId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "packageLocationHash",
        type: "bytes32",
      },
    ],
    name: "onVersionVerified",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "updateRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_verificationRootRelayer",
        type: "address",
      },
    ],
    name: "updateVerificationRootRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_votingMachine",
        type: "address",
      },
    ],
    name: "updateVotingMachine",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationRootRelayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifiedVersionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingMachine",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001bb238038062001bb2833981810160405281019062000037919062000551565b6200004982826200005160201b60201c565b505062000689565b600060019054906101000a900460ff168062000078575060008054906101000a900460ff16155b620000ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b190620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011b620001c460201b60201c565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015620001bf5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680620001eb575060008054906101000a900460ff16155b6200022d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022490620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200027e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200028e620002c360201b60201c565b6200029e620003a260201b60201c565b8015620002c05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002ea575060008054906101000a900460ff16155b6200032c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032390620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200037d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200039f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003c9575060008054906101000a900460ff16155b6200040b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200040290620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200045c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006200046e6200053260201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156200052f5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000815190506200054b816200066f565b92915050565b600080604083850312156200056557600080fd5b600062000575858286016200053a565b925050602062000588858286016200053a565b9150509250929050565b6000620005a1602e83620005db565b9150620005ae8262000620565b604082019050919050565b60006020820190508181036000830152620005d48162000592565b9050919050565b600082825260208201905092915050565b6000620005f98262000600565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6200067a81620005ec565b81146200068657600080fd5b50565b61151980620006996000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c5780638da5cb5b116100665780638da5cb5b146101c6578063d4cf2426146101e4578063f2fde38b14610200578063f9e5eafd1461021c576100cf565b8063485cc95514610182578063715018a61461019e5780637b103999146101a8576100cf565b80630cfb0b4c146100d45780630e4c9807146100f25780631a5da6c81461010e5780632d33d2e31461012a57806330b321a3146101465780633edf7ca114610164575b600080fd5b6100dc61023a565b6040516100e99190611256565b60405180910390f35b61010c600480360381019061010791906110c1565b6103b8565b005b610128600480360381019061012391906110c1565b610478565b005b610144600480360381019061013f91906110c1565b610538565b005b61014e6105f8565b60405161015b91906112fa565b60405180910390f35b61016c6105fe565b604051610179919061123b565b60405180910390f35b61019c600480360381019061019791906110ea565b610624565b005b6101a6610789565b005b6101b06108c6565b6040516101bd919061123b565b60405180910390f35b6101ce6108ec565b6040516101db919061123b565b60405180910390f35b6101fe60048036038101906101f99190611126565b610916565b005b61021a600480360381019061021591906110c1565b610a7e565b005b610224610c2a565b604051610231919061123b565b60405180910390f35b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008060001b905060005b6065600001548111610376576000801b606560010160008381526020019081526020016000205414610363576000801b8214156103205760656001016000828152602001908152602001600020549150610362565b60656001016000828152602001908152602001600020548260405160200161034992919061120f565b6040516020818303038152906040528051906020012091505b5b808061036e9061136c565b9150506102cb565b817f1210df8b43a93ad809714edb0b1ea72f9dff7e13a9dbae46be35aa7028816ff1606a546040516103a891906112fa565b60405180910390a2819250505090565b6103c0610c50565b73ffffffffffffffffffffffffffffffffffffffff166103de6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906112da565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610480610c50565b73ffffffffffffffffffffffffffffffffffffffff1661049e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb906112da565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610540610c50565b73ffffffffffffffffffffffffffffffffffffffff1661055e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab906112da565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606a5481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff168061064a575060008054906101000a900460ff16155b610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906112ba565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106e1610c58565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107845760008060016101000a81548160ff0219169083151502179055505b505050565b610791610c50565b73ffffffffffffffffffffffffffffffffffffffff166107af6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6109a48282610d41565b817f44cf500ed65246b251b99ffc28936276be48ac9b2699cb7e44831623c721da0582606a546040516109d8929190611271565b60405180910390a2606a60008154809291906109f39061136c565b9190505550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e644e2966040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b505050505050565b610a86610c50565b73ffffffffffffffffffffffffffffffffffffffff16610aa46108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af1906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b619061129a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610c7e575060008054906101000a900460ff16155b610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb4906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d15610e3c565b610d1d610f15565b8015610d3e5760008060016101000a81548160ff0219169083151502179055505b50565b60008282604051602001610d5692919061120f565b60405160208183030381529060405280519060200120905060005b6000801b606560010160008381526020019081526020016000205414610e0357606560010160008281526020019081526020016000205482604051602001610dba92919061120f565b6040516020818303038152906040528051906020012091506000801b60656001016000838152602001908152602001600020819055508080610dfb9061136c565b915050610d71565b816065600101600083815260200190815260200160002081905550606560000154811115610e3657806065600001819055505b50505050565b600060019054906101000a900460ff1680610e62575060008054906101000a900460ff16155b610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e98906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ef1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f125760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f3b575060008054906101000a900460ff16155b610f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f71906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fca576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610fd4610c50565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156110945760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506110a6816114b5565b92915050565b6000813590506110bb816114cc565b92915050565b6000602082840312156110d357600080fd5b60006110e184828501611097565b91505092915050565b600080604083850312156110fd57600080fd5b600061110b85828601611097565b925050602061111c85828601611097565b9150509250929050565b6000806040838503121561113957600080fd5b6000611147858286016110ac565b9250506020611158858286016110ac565b9150509250929050565b61116b81611326565b82525050565b61117a81611338565b82525050565b61119161118c82611338565b6113b5565b82525050565b60006111a4602683611315565b91506111af826113ee565b604082019050919050565b60006111c7602e83611315565b91506111d28261143d565b604082019050919050565b60006111ea602083611315565b91506111f58261148c565b602082019050919050565b61120981611362565b82525050565b600061121b8285611180565b60208201915061122b8284611180565b6020820191508190509392505050565b60006020820190506112506000830184611162565b92915050565b600060208201905061126b6000830184611171565b92915050565b60006040820190506112866000830185611171565b6112936020830184611200565b9392505050565b600060208201905081810360008301526112b381611197565b9050919050565b600060208201905081810360008301526112d3816111ba565b9050919050565b600060208201905081810360008301526112f3816111dd565b9050919050565b600060208201905061130f6000830184611200565b92915050565b600082825260208201905092915050565b600061133182611342565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061137782611362565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113aa576113a96113bf565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6114be81611326565b81146114c957600080fd5b50565b6114d581611338565b81146114e057600080fd5b5056fea2646970667358221220d4094b4f3c9b114c8e51f0c1e86d856d132119a0d97fb5d66f532004b2afeb8264736f6c63430008040033";

export class VerificationTreeManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _registry: string,
    _votingMachine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerificationTreeManager> {
    return super.deploy(
      _registry,
      _votingMachine,
      overrides || {}
    ) as Promise<VerificationTreeManager>;
  }
  getDeployTransaction(
    _registry: string,
    _votingMachine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _registry,
      _votingMachine,
      overrides || {}
    );
  }
  attach(address: string): VerificationTreeManager {
    return super.attach(address) as VerificationTreeManager;
  }
  connect(signer: Signer): VerificationTreeManager__factory {
    return super.connect(signer) as VerificationTreeManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerificationTreeManagerInterface {
    return new utils.Interface(_abi) as VerificationTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerificationTreeManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VerificationTreeManager;
  }
}
