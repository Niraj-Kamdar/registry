{
  "address": "0x6409eC45617f3f4Ae5C985D6f6C2C04F896519f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageLocationHash",
          "type": "bytes32"
        }
      ],
      "name": "VersionDecided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "packageLocation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "VersionProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageLocationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "VersionVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "packageLocation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPatch",
          "type": "bool"
        }
      ],
      "name": "VersionVotingStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "authorizeVerifiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authorizedVerifierCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedVerifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        }
      ],
      "name": "getPrevAndNextMinorPackageLocations",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "prevMinorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "prevPackageLocation",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "nextMinorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "nextPackageLocation",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        }
      ],
      "name": "getPrevPatchPackageLocation",
      "outputs": [
        {
          "internalType": "string",
          "name": "prevPackageLocation",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        }
      ],
      "name": "getProposedVersionVotingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "verifierCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvingVerifierCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rejectingVerifierCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "majorVersionQueueContainers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "headVersionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tailVersionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "packageLocation",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "proposeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proposedVersions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "decided",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votingStarted",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "majorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "minorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "packageLocation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "unauthorizeVerifiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        }
      ],
      "name": "updateRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionVerifiedListener",
          "type": "address"
        }
      ],
      "name": "updateVersionVerifiedListener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "verifiedMajorVersions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "lowestMinorNodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "verifiedMinorVersions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "versionNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nextMinorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "prevMinorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "majorNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionVerifiedListener",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "patchNodeId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "prevMinorNodeId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextMinorNodeId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "internalType": "struct VotingMachine.Vote[]",
          "name": "votes",
          "type": "tuple[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90878e020ce3a3fb29964efd52b996b2dc669f89bb08adb402f9df71e554453b",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0x6409eC45617f3f4Ae5C985D6f6C2C04F896519f5",
    "transactionIndex": 0,
    "gasUsed": "3391484",
    "logsBloom": "0x
    "blockHash": "0x29353aeb632ce9adeabc62779e9ca275fd3af3dc9cbda3aea80d0a4ffd5bbebf",
    "transactionHash": "0x90878e020ce3a3fb29964efd52b996b2dc669f89bb08adb402f9df71e554453b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0x90878e020ce3a3fb29964efd52b996b2dc669f89bb08adb402f9df71e554453b",
        "address": "0x6409eC45617f3f4Ae5C985D6f6C2C04F896519f5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x29353aeb632ce9adeabc62779e9ca275fd3af3dc9cbda3aea80d0a4ffd5bbebf"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "3391484",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x24C17bf9Af7A0e372D8B3571dBa12C216Bc44E42"
  ],
  "solcInputHash": "46d00f656a071083dd336c7f8ad8ee59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageLocationHash\",\"type\":\"bytes32\"}],\"name\":\"VersionDecided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"packageLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"VersionProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageLocationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"VersionVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"packageLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPatch\",\"type\":\"bool\"}],\"name\":\"VersionVotingStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"authorizeVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizedVerifierCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedVerifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"}],\"name\":\"getPrevAndNextMinorPackageLocations\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"prevPackageLocation\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"nextMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"nextPackageLocation\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"}],\"name\":\"getPrevPatchPackageLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"prevPackageLocation\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"}],\"name\":\"getProposedVersionVotingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"verifierCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvingVerifierCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rejectingVerifierCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"majorVersionQueueContainers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"headVersionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tailVersionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageLocation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"proposeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposedVersions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"decided\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"votingStarted\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"majorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"minorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"packageLocation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"unauthorizeVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"}],\"name\":\"updateRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionVerifiedListener\",\"type\":\"address\"}],\"name\":\"updateVersionVerifiedListener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiedMajorVersions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lowestMinorNodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiedMinorVersions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"versionNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nextMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"majorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionVerifiedListener\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextMinorNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct VotingMachine.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/VotingMachine.sol\":\"VotingMachine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/VotingMachine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./version-events-listeners/IVersionVerifiedListener.sol\\\";\\n\\ncontract VotingMachine is OwnableUpgradeable {\\n  event VersionProposed(\\n    bytes32 indexed packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string packageLocation,\\n    address proposer\\n  );\\n\\n  event VersionVotingStarted(\\n    bytes32 indexed packageId,\\n    bytes32 indexed patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string packageLocation,\\n    address proposer,\\n    bool isPatch\\n  );\\n\\n  event VersionVote(\\n    address indexed verifier,\\n    bytes32 indexed patchNodeId,\\n    bytes32 packageLocationHash,\\n    bool approved\\n  );\\n\\n  event VersionDecided(\\n    bytes32 indexed patchNodeId,\\n    bool indexed verified,\\n    bytes32 packageLocationHash\\n  );\\n\\n  struct ProposedVersion {\\n    address[] approvingVerifiers;\\n    address[] rejectingVerifiers;\\n    mapping(address => bool) votedVerifiers;\\n    bool decided;\\n    bool verified;\\n    bool votingStarted;\\n    bytes32 packageId;\\n    bytes32 majorNodeId;\\n    bytes32 minorNodeId;\\n    bytes32 patchNodeId;\\n    string packageLocation;\\n    uint256 majorVersion;\\n    uint256 minorVersion;\\n    uint256 patchVersion;\\n    address proposer;\\n  }\\n\\n  struct QueuedVersion {\\n    bytes32 nextQueuedVersionId;\\n    bytes32 patchNodeId;\\n  }\\n\\n  struct MajorVersionQueueContainer {\\n    bytes32 headVersionId;\\n    bytes32 tailVersionId;\\n    mapping(bytes32 => QueuedVersion) queuedVersions;\\n  }\\n\\n  struct VerifiedMajorVersion {\\n    bytes32 lowestMinorNodeId;\\n  }\\n\\n  struct VerifiedMinorVersion {\\n    uint256 versionNumber;\\n    bytes32 nextMinorNodeId;\\n    bytes32 prevMinorNodeId;\\n    bytes32 majorNodeId;\\n    bytes32 patchNodeId;\\n  }\\n\\n  struct Vote {\\n    bytes32 patchNodeId;\\n    bytes32 prevMinorNodeId;\\n    bytes32 nextMinorNodeId;\\n    bool approved;\\n  }\\n\\n  address public registrar;\\n  address public versionVerifiedListener;\\n\\n  mapping(bytes32 => MajorVersionQueueContainer)\\n    public majorVersionQueueContainers;\\n  mapping(bytes32 => ProposedVersion) public proposedVersions;\\n  mapping(bytes32 => VerifiedMinorVersion) public verifiedMinorVersions;\\n  mapping(bytes32 => VerifiedMajorVersion) public verifiedMajorVersions;\\n\\n  mapping(address => bool) public authorizedVerifiers;\\n  uint256 public authorizedVerifierCount;\\n\\n  constructor(address _registrar) {\\n    initialize(_registrar);\\n  }\\n\\n  function initialize(address _registrar) public initializer {\\n    __Ownable_init();\\n\\n    registrar = _registrar;\\n  }\\n\\n  function updateRegistrar(address _registrar) public onlyOwner {\\n    registrar = _registrar;\\n  }\\n\\n  function updateVersionVerifiedListener(address _versionVerifiedListener)\\n    public\\n    onlyOwner\\n  {\\n    versionVerifiedListener = _versionVerifiedListener;\\n  }\\n\\n  function authorizeVerifiers(address[] memory addresses) public onlyOwner {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      if (!authorizedVerifiers[addresses[i]]) {\\n        authorizedVerifiers[addresses[i]] = true;\\n        authorizedVerifierCount++;\\n      }\\n    }\\n  }\\n\\n  function unauthorizeVerifiers(address[] memory addresses) public onlyOwner {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      if (authorizedVerifiers[addresses[i]]) {\\n        authorizedVerifiers[addresses[i]] = false;\\n        authorizedVerifierCount--;\\n      }\\n    }\\n  }\\n\\n  function proposeVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string calldata packageLocation,\\n    address proposer\\n  ) public {\\n    assert(msg.sender == registrar);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    ProposedVersion storage proposedVersion = proposedVersions[patchNodeId];\\n\\n    require(proposedVersion.patchNodeId == 0x0, \\\"Version is already proposed\\\");\\n\\n    proposedVersion.packageId = packageId;\\n\\n    proposedVersion.majorNodeId = majorNodeId;\\n    proposedVersion.minorNodeId = minorNodeId;\\n    proposedVersion.patchNodeId = patchNodeId;\\n\\n    proposedVersion.majorVersion = majorVersion;\\n    proposedVersion.minorVersion = minorVersion;\\n    proposedVersion.patchVersion = patchVersion;\\n\\n    proposedVersion.packageLocation = packageLocation;\\n    proposedVersion.proposer = proposer;\\n\\n    MajorVersionQueueContainer\\n      storage majorVersionContainer = majorVersionQueueContainers[majorNodeId];\\n\\n    QueuedVersion storage queuedVersion = majorVersionContainer.queuedVersions[\\n      patchNodeId\\n    ];\\n\\n    queuedVersion.patchNodeId = patchNodeId;\\n\\n    if (majorVersionContainer.tailVersionId != 0x0) {\\n      //The queue is not empty\\n      QueuedVersion storage tailVersion = majorVersionContainer.queuedVersions[\\n        majorVersionContainer.tailVersionId\\n      ];\\n\\n      tailVersion.nextQueuedVersionId = patchNodeId;\\n      majorVersionContainer.tailVersionId = patchNodeId;\\n    } else {\\n      //The queue is empty\\n      majorVersionContainer.tailVersionId = patchNodeId;\\n      majorVersionContainer.headVersionId = patchNodeId;\\n\\n      //Since there is only one version in the queue, we can start voting for it\\n      startVersionVoting(proposedVersion);\\n    }\\n\\n    emit VersionProposed(\\n      packageId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      packageLocation,\\n      proposer\\n    );\\n  }\\n\\n  function vote(Vote[] memory votes) public {\\n    require(\\n      authorizedVerifiers[msg.sender],\\n      \\\"You are not an authorized verifier\\\"\\n    );\\n\\n    for (uint256 i = 0; i < votes.length; i++) {\\n      Vote memory vote = votes[i];\\n\\n      ProposedVersion storage proposedVersion = proposedVersions[\\n        vote.patchNodeId\\n      ];\\n\\n      requireCanVoteOnVersion(proposedVersion);\\n\\n      requireValidMinorVersionPlacement(\\n        vote.prevMinorNodeId,\\n        vote.nextMinorNodeId,\\n        proposedVersion.minorVersion,\\n        proposedVersion.majorNodeId,\\n        proposedVersion.minorNodeId\\n      );\\n\\n      proposedVersion.votedVerifiers[msg.sender] = true;\\n\\n      if (vote.approved) {\\n        proposedVersion.approvingVerifiers.push(msg.sender);\\n      } else {\\n        proposedVersion.rejectingVerifiers.push(msg.sender);\\n      }\\n\\n      if (\\n        proposedVersion.approvingVerifiers.length > authorizedVerifierCount / 2\\n      ) {\\n        //The version is verified\\n        proposedVersion.decided = true;\\n        proposedVersion.verified = true;\\n\\n        onVersionDecided(\\n          vote.prevMinorNodeId,\\n          vote.nextMinorNodeId,\\n          proposedVersion.minorVersion,\\n          proposedVersion.majorNodeId,\\n          proposedVersion.minorNodeId,\\n          vote.patchNodeId,\\n          proposedVersion.verified,\\n          proposedVersion.packageLocation\\n        );\\n      } else {\\n        //The version is rejected\\n        proposedVersion.decided = true;\\n        proposedVersion.verified = false;\\n\\n        onVersionDecided(\\n          vote.prevMinorNodeId,\\n          vote.nextMinorNodeId,\\n          proposedVersion.minorVersion,\\n          proposedVersion.majorNodeId,\\n          proposedVersion.minorNodeId,\\n          vote.patchNodeId,\\n          proposedVersion.verified,\\n          proposedVersion.packageLocation\\n        );\\n      }\\n\\n      emit VersionVote(\\n        msg.sender,\\n        proposedVersion.patchNodeId,\\n        keccak256(abi.encodePacked(proposedVersion.packageLocation)),\\n        vote.approved\\n      );\\n    }\\n  }\\n\\n  function requireCanVoteOnVersion(ProposedVersion storage proposedVersion)\\n    private\\n    view\\n  {\\n    require(proposedVersion.votingStarted, \\\"Voting has not started\\\");\\n    require(!proposedVersion.decided, \\\"Voting for this version has ended\\\");\\n    require(!proposedVersion.votedVerifiers[msg.sender], \\\"You already voted\\\");\\n  }\\n\\n  function requireValidMinorVersionPlacement(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId\\n  ) private view {\\n    VerifiedMinorVersion storage currentVersion = verifiedMinorVersions[\\n      minorNodeId\\n    ];\\n\\n    if (currentVersion.patchNodeId != 0x0) {\\n      //Minor version has at least one patch version verified and there's no need to keep track of multiple patch versions\\n      return;\\n    }\\n\\n    VerifiedMinorVersion storage prevVersion = verifiedMinorVersions[\\n      prevMinorNodeId\\n    ];\\n    VerifiedMinorVersion storage nextVersion = verifiedMinorVersions[\\n      nextMinorNodeId\\n    ];\\n\\n    //Verify the current version is between prev and next version\\n    if (prevVersion.patchNodeId != 0x0) {\\n      require(\\n        prevVersion.versionNumber < minorVersionNumber,\\n        \\\"Previous version number is not less than the current one\\\"\\n      );\\n      require(\\n        prevVersion.nextMinorNodeId == nextMinorNodeId,\\n        \\\"Previous version does not point to the next version\\\"\\n      );\\n      require(\\n        prevVersion.majorNodeId == majorNodeId,\\n        \\\"Previous version does not belong to the same major version\\\"\\n      );\\n    }\\n\\n    if (nextVersion.patchNodeId != 0x0) {\\n      require(\\n        minorVersionNumber < nextVersion.versionNumber,\\n        \\\"Next version number is not greater than the current one\\\"\\n      );\\n      require(\\n        nextVersion.prevMinorNodeId == prevMinorNodeId,\\n        \\\"Next version does not point to the previous version\\\"\\n      );\\n      require(\\n        nextVersion.majorNodeId == majorNodeId,\\n        \\\"Next version does not belong to the same major version\\\"\\n      );\\n    }\\n  }\\n\\n  function startVersionVoting(ProposedVersion storage proposedVersion) private {\\n    proposedVersion.votingStarted = true;\\n\\n    VerifiedMinorVersion memory minorVersion = verifiedMinorVersions[\\n      proposedVersion.minorNodeId\\n    ];\\n\\n    emit VersionVotingStarted(\\n      proposedVersion.packageId,\\n      proposedVersion.patchNodeId,\\n      proposedVersion.majorVersion,\\n      proposedVersion.minorVersion,\\n      proposedVersion.patchVersion,\\n      proposedVersion.packageLocation,\\n      proposedVersion.proposer,\\n      minorVersion.patchNodeId != 0x0\\n    );\\n  }\\n\\n  function addToVersionTree(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId,\\n    bytes32 patchNodeId\\n  ) private {\\n    VerifiedMinorVersion storage currentVersion = verifiedMinorVersions[\\n      minorNodeId\\n    ];\\n\\n    currentVersion.patchNodeId = patchNodeId;\\n    currentVersion.versionNumber = minorVersionNumber;\\n    currentVersion.majorNodeId = majorNodeId;\\n\\n    VerifiedMinorVersion storage prevVersion = verifiedMinorVersions[\\n      prevMinorNodeId\\n    ];\\n    VerifiedMinorVersion storage nextVersion = verifiedMinorVersions[\\n      nextMinorNodeId\\n    ];\\n\\n    //Insert into the linked list between prev and next version\\n\\n    if (prevVersion.patchNodeId != 0x0) {\\n      currentVersion.prevMinorNodeId = prevMinorNodeId;\\n      prevVersion.nextMinorNodeId = minorNodeId;\\n    }\\n\\n    if (nextVersion.patchNodeId != 0x0) {\\n      currentVersion.nextMinorNodeId = nextMinorNodeId;\\n      nextVersion.prevMinorNodeId = minorNodeId;\\n    }\\n\\n    if (prevVersion.patchNodeId == 0x0 && nextVersion.patchNodeId == 0x0) {}\\n  }\\n\\n  function onVersionDecided(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId,\\n    bytes32 patchNodeId,\\n    bool verified,\\n    string memory packageLocation\\n  ) private {\\n    bytes32 packageLocationHash = keccak256(abi.encodePacked(packageLocation));\\n\\n    if (verified) {\\n      addToVersionTree(\\n        prevMinorNodeId,\\n        nextMinorNodeId,\\n        minorVersionNumber,\\n        majorNodeId,\\n        minorNodeId,\\n        patchNodeId\\n      );\\n\\n      if (versionVerifiedListener != address(0)) {\\n        IVersionVerifiedListener listener = IVersionVerifiedListener(\\n          versionVerifiedListener\\n        );\\n\\n        listener.onVersionVerified(patchNodeId, packageLocationHash);\\n      }\\n    }\\n\\n    dequeueNextVersion(majorNodeId);\\n\\n    emit VersionDecided(patchNodeId, verified, packageLocationHash);\\n  }\\n\\n  function dequeueNextVersion(bytes32 majorNodeId) private {\\n    MajorVersionQueueContainer\\n      storage majorVersionContainer = majorVersionQueueContainers[majorNodeId];\\n\\n    if (majorVersionContainer.headVersionId == 0x0) {\\n      //The queue is empty\\n      return;\\n    }\\n\\n    QueuedVersion storage headVersion = majorVersionContainer.queuedVersions[\\n      majorVersionContainer.headVersionId\\n    ];\\n\\n    ProposedVersion storage nextVotingVersion = proposedVersions[\\n      majorVersionContainer.headVersionId\\n    ];\\n\\n    if (headVersion.nextQueuedVersionId == 0x0) {\\n      majorVersionContainer.headVersionId = 0x0;\\n      majorVersionContainer.tailVersionId = 0x0;\\n    } else {\\n      majorVersionContainer.headVersionId = headVersion.nextQueuedVersionId;\\n    }\\n\\n    startVersionVoting(nextVotingVersion);\\n  }\\n\\n  function getPrevPatchPackageLocation(bytes32 patchNodeId)\\n    external\\n    view\\n    returns (string memory prevPackageLocation)\\n  {\\n    ProposedVersion storage targetVersion = proposedVersions[patchNodeId];\\n\\n    requireCanVoteOnVersion(targetVersion);\\n\\n    VerifiedMinorVersion memory minorVersion = verifiedMinorVersions[\\n      targetVersion.minorNodeId\\n    ];\\n\\n    assert(minorVersion.patchNodeId != 0x0);\\n\\n    string memory prevPackageLocation = proposedVersions[\\n      minorVersion.patchNodeId\\n    ].packageLocation;\\n\\n    return prevPackageLocation;\\n  }\\n\\n  function getPrevAndNextMinorPackageLocations(bytes32 patchNodeId)\\n    external\\n    view\\n    returns (\\n      bytes32 prevMinorNodeId,\\n      string memory prevPackageLocation,\\n      bytes32 nextMinorNodeId,\\n      string memory nextPackageLocation\\n    )\\n  {\\n    ProposedVersion storage targetVersion = proposedVersions[patchNodeId];\\n\\n    requireCanVoteOnVersion(targetVersion);\\n\\n    VerifiedMajorVersion memory currentMajorVersion = verifiedMajorVersions[\\n      targetVersion.majorNodeId\\n    ];\\n\\n    bytes32 currentMinorNodeId = currentMajorVersion.lowestMinorNodeId;\\n    bytes32 nextMinorNodeId = currentMinorNodeId;\\n    bytes32 prevMinorNodeId;\\n\\n    VerifiedMinorVersion memory nextVersion = verifiedMinorVersions[\\n      currentMinorNodeId\\n    ];\\n\\n    VerifiedMinorVersion memory prevVersion;\\n    while (nextVersion.versionNumber < targetVersion.minorVersion) {\\n      prevMinorNodeId = currentMinorNodeId;\\n      prevVersion = nextVersion;\\n      currentMinorNodeId = nextVersion.nextMinorNodeId;\\n      nextVersion = verifiedMinorVersions[currentMinorNodeId];\\n    }\\n\\n    string memory prevPackageLocation;\\n    if (prevVersion.patchNodeId != 0x0) {\\n      prevPackageLocation = proposedVersions[prevVersion.patchNodeId]\\n        .packageLocation;\\n    }\\n\\n    string memory nextPackageLocation;\\n    if (nextVersion.patchNodeId != 0x0) {\\n      nextPackageLocation = proposedVersions[nextVersion.patchNodeId]\\n        .packageLocation;\\n    }\\n\\n    return (\\n      prevMinorNodeId,\\n      prevPackageLocation,\\n      nextMinorNodeId,\\n      nextPackageLocation\\n    );\\n  }\\n\\n  function getProposedVersionVotingInfo(bytes32 patchNodeId) public view returns(uint256 verifierCount, uint256 approvingVerifierCount, uint256 rejectingVerifierCount) {\\n    ProposedVersion storage proposedVersion = proposedVersions[patchNodeId];\\n\\n    return (authorizedVerifierCount, proposedVersion.approvingVerifiers.length, proposedVersion.rejectingVerifiers.length);\\n  }\\n}\\n\",\"keccak256\":\"0x0c2c9ce184788728f61ed42cdc3c552202d03bf500e0345c566d42c83e0d316c\",\"license\":\"MIT\"},\"contracts/versioning/version-events-listeners/IVersionVerifiedListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVersionVerifiedListener {\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    external;\\n}\\n\",\"keccak256\":\"0x4fdc20e43a36b559ecc639809e80f758317521fd5e8a3bb2cfd8bc7db11ff845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200416938038062004169833981810160405281019062000037919062000542565b62000048816200004f60201b60201c565b5062000665565b600060019054906101000a900460ff168062000076575060008054906101000a900460ff16155b620000b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000af9062000595565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000109576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620001196200018060201b60201c565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156200017c5760008060016101000a81548160ff0219169083151502179055505b5050565b600060019054906101000a900460ff1680620001a7575060008054906101000a900460ff16155b620001e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e09062000595565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200023a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200024a6200027f60201b60201c565b6200025a6200035e60201b60201c565b80156200027c5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002a6575060008054906101000a900460ff16155b620002e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002df9062000595565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000339576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200035b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000385575060008054906101000a900460ff16155b620003c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003be9062000595565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000418576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620004386200042c6200045d60201b60201c565b6200046560201b60201c565b80156200045a5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200053c816200064b565b92915050565b6000602082840312156200055557600080fd5b600062000565848285016200052b565b91505092915050565b60006200057d602e83620005b7565b91506200058a82620005fc565b604082019050919050565b60006020820190508181036000830152620005b0816200056e565b9050919050565b600082825260208201905092915050565b6000620005d582620005dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6200065681620005c8565b81146200066257600080fd5b50565b613af480620006756000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639a891716116100b8578063cc65946e1161007c578063cc65946e1461033e578063d29cb6581461036e578063d5549901146103a9578063db45078b146103c7578063dffbde1b146103e3578063f2fde38b1461041757610137565b80639a8917161461028a578063a265c59d146102ba578063a2bca7fc146102ea578063c4d66de814610306578063c70a7b0c1461032257610137565b8063371139ed116100ff578063371139ed146101f7578063375164f31461022a578063592b700a14610246578063715018a6146102625780638da5cb5b1461026c57610137565b806302d249051461013c5780631f3b966d1461016e5780632520cb3a1461018a5780632b20e397146101a857806330268815146101c6575b600080fd5b6101566004803603810190610151919061294f565b610433565b604051610165939291906132d4565b60405180910390f35b610188600480360381019061018391906128cd565b61046f565b005b610192610650565b60405161019f9190612e63565b60405180910390f35b6101b0610676565b6040516101bd9190612e63565b60405180910390f35b6101e060048036038101906101db919061294f565b61069c565b6040516101ee929190612f9e565b60405180910390f35b610211600480360381019061020c919061294f565b6106c0565b6040516102219493929190612fc7565b60405180910390f35b610244600480360381019061023f91906128cd565b610980565b005b610260600480360381019061025b91906128a4565b610b62565b005b61026a610c22565b005b610274610caa565b6040516102819190612e63565b60405180910390f35b6102a4600480360381019061029f91906128a4565b610cd4565b6040516102b19190612e7e565b60405180910390f35b6102d460048036038101906102cf919061294f565b610cf4565b6040516102e19190612f5a565b60405180910390f35b61030460048036038101906102ff91906128a4565b610d12565b005b610320600480360381019061031b91906128a4565b610dd2565b005b61033c6004803603810190610337919061290e565b610ef5565b005b6103586004803603810190610353919061294f565b611407565b6040516103659190613084565b60405180910390f35b6103886004803603810190610383919061294f565b611571565b6040516103a09c9b9a99989796959493929190612e99565b60405180910390f35b6103b16116a0565b6040516103be9190613266565b60405180910390f35b6103e160048036038101906103dc9190612978565b6116a6565b005b6103fd60048036038101906103f8919061294f565b611992565b60405161040e959493929190613281565b60405180910390f35b610431600480360381019061042c91906128a4565b6119c8565b005b600080600080606860008681526020019081526020016000209050606c5481600001805490508260010180549050935093509350509193909250565b610477611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610495610caa565b73ffffffffffffffffffffffffffffffffffffffff16146104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e2906131a6565b60405180910390fd5b60005b815181101561064c57606b6000838381518110610534577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610639576001606b60008484815181106105c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550606c60008154809291906106339061357e565b91905055505b80806106449061357e565b9150506104ee565b5050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60676020528060005260406000206000915090508060000154908060010154905082565b600060606000606060006068600087815260200190815260200160002090506106e881611ac8565b6000606a60008360050154815260200190815260200160002060405180602001604052908160008201548152505090506000816000015190506000819050600080606960008581526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050610783612588565b5b86600a0154826000015110156107f85784925081905081602001519450606960008681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509150610784565b60606000801b8260800151146108ae576068600083608001518152602001908152602001600020600801805461082d9061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546108599061351b565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b505050505090505b60606000801b84608001511461096457606860008560800151815260200190815260200160002060080180546108e39061351b565b80601f016020809104026020016040519081016040528092919081815260200182805461090f9061351b565b801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b505050505090505b848287839c509c509c509c505050505050505050509193509193565b610988611ac0565b73ffffffffffffffffffffffffffffffffffffffff166109a6610caa565b73ffffffffffffffffffffffffffffffffffffffff16146109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f3906131a6565b60405180910390fd5b60005b8151811015610b5e57606b6000838381518110610a45577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b4b576000606b6000848481518110610ad9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550606c6000815480929190610b45906134f1565b91905055505b8080610b569061357e565b9150506109ff565b5050565b610b6a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610b88610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906131a6565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c2a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610c48610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c95906131a6565b60405180910390fd5b610ca86000611bfd565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606b6020528060005260406000206000915054906101000a900460ff1681565b606a6020528060005260406000206000915090508060000154905081565b610d1a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610d38610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d85906131a6565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610df8575060008054906101000a900460ff16155b610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e87576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e8f611cc3565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610ef15760008060016101000a81548160ff0219169083151502179055505b5050565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890613226565b60405180910390fd5b60005b8151811015611403576000828281518110610fc8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060686000836000015181526020019081526020016000209050610ff681611ac8565b6110178260200151836040015183600a015484600501548560060154611dac565b60018160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160600151156110e55780600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061114b565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6002606c5461115a919061342c565b8160000180549050111561126c5760018160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff0219169083151502179055506112678260200151836040015183600a01548460050154856006015487600001518760030160019054906101000a900460ff168860080180546111e49061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546112109061351b565b801561125d5780601f106112325761010080835404028352916020019161125d565b820191906000526020600020905b81548152906001019060200180831161124057829003601f168201915b5050505050611fd2565b61136c565b60018160030160006101000a81548160ff02191690831515021790555060008160030160016101000a81548160ff02191690831515021790555061136b8260200151836040015183600a01548460050154856006015487600001518760030160019054906101000a900460ff168860080180546112e89061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546113149061351b565b80156113615780601f1061133657610100808354040283529160200191611361565b820191906000526020600020905b81548152906001019060200180831161134457829003601f168201915b5050505050611fd2565b5b80600701543373ffffffffffffffffffffffffffffffffffffffff167f033b10720c643c1c13a1be3d8b38c4cea2e3c03c5e0d88fad5fc7de146b5bbc0836008016040516020016113bd9190612e4c565b6040516020818303038152906040528051906020012085606001516040516113e6929190612f75565b60405180910390a3505080806113fb9061357e565b915050610f84565b5050565b6060600060686000848152602001908152602001600020905061142981611ac8565b600060696000836006015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000801b816080015114156114bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000606860008360800151815260200190815260200160002060080180546114e69061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546115129061351b565b801561155f5780601f106115345761010080835404028352916020019161155f565b820191906000526020600020905b81548152906001019060200180831161154257829003601f168201915b50505050509050809350505050919050565b60686020528060005260406000206000915090508060030160009054906101000a900460ff16908060030160019054906101000a900460ff16908060030160029054906101000a900460ff16908060040154908060050154908060060154908060070154908060080180546115e59061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546116119061351b565b801561165e5780601f106116335761010080835404028352916020019161165e565b820191906000526020600020905b81548152906001019060200180831161164157829003601f168201915b50505050509080600901549080600a01549080600b01549080600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508c565b606c5481565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461172a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000878760405160200161173f929190612e09565b6040516020818303038152906040528051906020012090506000818760405160200161176c929190612e09565b60405160208183030381529060405280519060200120905060008187604051602001611799929190612e09565b60405160208183030381529060405280519060200120905060006068600083815260200190815260200160002090506000801b816007015414611811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611808906131e6565b60405180910390fd5b8a81600401819055508381600501819055508281600601819055508181600701819055508981600901819055508881600a01819055508781600b018190555086868260080191906118639291906125c3565b508481600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000606760008681526020019081526020016000209050600081600201600085815260200190815260200160002090508381600101819055506000801b8260010154146119235760008260020160008460010154815260200190815260200160002090508481600001819055508483600101819055505061193f565b83826001018190555083826000018190555061193e8361214d565b5b8c7f7b257b1260a7cf7f5f9e0282efbc0b2986935a1d709a4f26b1190234a1f1928a858e8e8e8e8e8e60405161197b979695949392919061301a565b60405180910390a250505050505050505050505050565b60696020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b6119d0611ac0565b73ffffffffffffffffffffffffffffffffffffffff166119ee610caa565b73ffffffffffffffffffffffffffffffffffffffff1614611a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3b906131a6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab906130a6565b60405180910390fd5b611abd81611bfd565b50565b600033905090565b8060030160029054906101000a900460ff16611b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b10906130e6565b60405180910390fd5b8060030160009054906101000a900460ff1615611b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b62906130c6565b60405180910390fd5b8060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf190613106565b60405180910390fd5b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680611ce9575060008054906101000a900460ff16155b611d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015611d78576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611d8061224e565b611d88612327565b8015611da95760008060016101000a81548160ff0219169083151502179055505b50565b60006069600083815260200190815260200160002090506000801b816004015414611dd75750611fcb565b600060696000888152602001908152602001600020905060006069600088815260200190815260200160002090506000801b826004015414611ee65785826000015410611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090613206565b60405180910390fd5b86826001015414611e9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9690613246565b60405180910390fd5b84826003015414611ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edc90613166565b60405180910390fd5b5b6000801b816004015414611fc75780600001548610611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f31906131c6565b60405180910390fd5b87816002015414611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790613146565b60405180910390fd5b84816003015414611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90613126565b60405180910390fd5b5b5050505b5050505050565b600081604051602001611fe59190612e35565b60405160208183030381529060405280519060200120905082156120fe57612011898989898989612410565b600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120fd576000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663d4cf242686846040518363ffffffff1660e01b81526004016120c9929190612f9e565b600060405180830381600087803b1580156120e357600080fd5b505af11580156120f7573d6000803e3d6000fd5b50505050505b5b612107866124da565b821515847fcd75dfcc9af924e61cb25759e949612024175eed33cae40a1ab6ba46f117986a8360405161213a9190612f5a565b60405180910390a3505050505050505050565b60018160030160026101000a81548160ff021916908315150217905550600060696000836006015481526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050816007015482600401547f79d351d82ed9466e01205fc081a7a79a16d555495835db52037e37f31f42deea846009015485600a015486600b01548760080188600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000801b896080015114156040516122429695949392919061330b565b60405180910390a35050565b600060019054906101000a900460ff1680612274575060008054906101000a900460ff16155b6122b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122aa90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015612303576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156123245760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061234d575060008054906101000a900460ff16155b61238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238390613186565b60405180910390fd5b60008060019054906101000a900460ff1615905080156123dc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123ec6123e7611ac0565b611bfd565b801561240d5760008060016101000a81548160ff0219169083151502179055505b50565b6000606960008481526020019081526020016000209050818160040181905550848160000181905550838160030181905550600060696000898152602001908152602001600020905060006069600089815260200190815260200160002090506000801b826004015414612491578883600201819055508482600101819055505b6000801b8160040154146124b2578783600101819055508481600201819055505b6000801b82600401541480156124ce57506000801b8160040154145b50505050505050505050565b60006067600083815260200190815260200160002090506000801b816000015414156125065750612585565b60008160020160008360000154815260200190815260200160002090506000606860008460000154815260200190815260200160002090506000801b8260000154141561256a576000801b83600001819055506000801b8360010181905550612578565b816000015483600001819055505b6125818161214d565b5050505b50565b6040518060a0016040528060008152602001600080191681526020016000801916815260200160008019168152602001600080191681525090565b8280546125cf9061351b565b90600052602060002090601f0160209004810192826125f15760008555612638565b82601f1061260a57803560ff1916838001178555612638565b82800160010185558215612638579182015b8281111561263757823582559160200191906001019061261c565b5b5090506126459190612649565b5090565b5b8082111561266257600081600090555060010161264a565b5090565b600061267961267484613398565b613373565b9050808382526020820190508285602086028201111561269857600080fd5b60005b858110156126c857816126ae888261273e565b84526020840193506020830192505060018101905061269b565b5050509392505050565b60006126e56126e0846133c4565b613373565b9050808382526020820190508285608086028201111561270457600080fd5b60005b85811015612734578161271a888261281b565b845260208401935060808301925050600181019050612707565b5050509392505050565b60008135905061274d81613a62565b92915050565b600082601f83011261276457600080fd5b8135612774848260208601612666565b91505092915050565b600082601f83011261278e57600080fd5b813561279e8482602086016126d2565b91505092915050565b6000813590506127b681613a79565b92915050565b6000813590506127cb81613a90565b92915050565b60008083601f8401126127e357600080fd5b8235905067ffffffffffffffff8111156127fc57600080fd5b60208301915083600182028301111561281457600080fd5b9250929050565b60006080828403121561282d57600080fd5b6128376080613373565b90506000612847848285016127bc565b600083015250602061285b848285016127bc565b602083015250604061286f848285016127bc565b6040830152506060612883848285016127a7565b60608301525092915050565b60008135905061289e81613aa7565b92915050565b6000602082840312156128b657600080fd5b60006128c48482850161273e565b91505092915050565b6000602082840312156128df57600080fd5b600082013567ffffffffffffffff8111156128f957600080fd5b61290584828501612753565b91505092915050565b60006020828403121561292057600080fd5b600082013567ffffffffffffffff81111561293a57600080fd5b6129468482850161277d565b91505092915050565b60006020828403121561296157600080fd5b600061296f848285016127bc565b91505092915050565b600080600080600080600060c0888a03121561299357600080fd5b60006129a18a828b016127bc565b97505060206129b28a828b0161288f565b96505060406129c38a828b0161288f565b95505060606129d48a828b0161288f565b945050608088013567ffffffffffffffff8111156129f157600080fd5b6129fd8a828b016127d1565b935093505060a0612a108a828b0161273e565b91505092959891949750929550565b612a288161345d565b82525050565b612a378161346f565b82525050565b612a468161347b565b82525050565b612a5d612a588261347b565b6135c7565b82525050565b6000612a6f8385613410565b9350612a7c8385846134af565b612a8583613697565b840190509392505050565b6000612a9b82613405565b612aa58185613410565b9350612ab58185602086016134be565b612abe81613697565b840191505092915050565b6000612ad482613405565b612ade8185613421565b9350612aee8185602086016134be565b80840191505092915050565b60008154612b078161351b565b612b118186613410565b94506001821660008114612b2c5760018114612b3e57612b71565b60ff1983168652602086019350612b71565b612b47856133f0565b60005b83811015612b6957815481890152600182019150602081019050612b4a565b808801955050505b50505092915050565b60008154612b878161351b565b612b918186613421565b94506001821660008114612bac5760018114612bbd57612bf0565b60ff19831686528186019350612bf0565b612bc6856133f0565b60005b83811015612be857815481890152600182019150602081019050612bc9565b838801955050505b50505092915050565b6000612c06602683613410565b9150612c11826136a8565b604082019050919050565b6000612c29602183613410565b9150612c34826136f7565b604082019050919050565b6000612c4c601683613410565b9150612c5782613746565b602082019050919050565b6000612c6f601183613410565b9150612c7a8261376f565b602082019050919050565b6000612c92603683613410565b9150612c9d82613798565b604082019050919050565b6000612cb5603383613410565b9150612cc0826137e7565b604082019050919050565b6000612cd8603a83613410565b9150612ce382613836565b604082019050919050565b6000612cfb602e83613410565b9150612d0682613885565b604082019050919050565b6000612d1e602083613410565b9150612d29826138d4565b602082019050919050565b6000612d41603783613410565b9150612d4c826138fd565b604082019050919050565b6000612d64601b83613410565b9150612d6f8261394c565b602082019050919050565b6000612d87603883613410565b9150612d9282613975565b604082019050919050565b6000612daa602283613410565b9150612db5826139c4565b604082019050919050565b6000612dcd603383613410565b9150612dd882613a13565b604082019050919050565b612dec816134a5565b82525050565b612e03612dfe826134a5565b6135d1565b82525050565b6000612e158285612a4c565b602082019150612e258284612df2565b6020820191508190509392505050565b6000612e418284612ac9565b915081905092915050565b6000612e588284612b7a565b915081905092915050565b6000602082019050612e786000830184612a1f565b92915050565b6000602082019050612e936000830184612a2e565b92915050565b600061018082019050612eaf600083018f612a2e565b612ebc602083018e612a2e565b612ec9604083018d612a2e565b612ed6606083018c612a3d565b612ee3608083018b612a3d565b612ef060a083018a612a3d565b612efd60c0830189612a3d565b81810360e0830152612f0f8188612a90565b9050612f1f610100830187612de3565b612f2d610120830186612de3565b612f3b610140830185612de3565b612f49610160830184612a1f565b9d9c50505050505050505050505050565b6000602082019050612f6f6000830184612a3d565b92915050565b6000604082019050612f8a6000830185612a3d565b612f976020830184612a2e565b9392505050565b6000604082019050612fb36000830185612a3d565b612fc06020830184612a3d565b9392505050565b6000608082019050612fdc6000830187612a3d565b8181036020830152612fee8186612a90565b9050612ffd6040830185612a3d565b818103606083015261300f8184612a90565b905095945050505050565b600060c08201905061302f600083018a612a3d565b61303c6020830189612de3565b6130496040830188612de3565b6130566060830187612de3565b8181036080830152613069818587612a63565b905061307860a0830184612a1f565b98975050505050505050565b6000602082019050818103600083015261309e8184612a90565b905092915050565b600060208201905081810360008301526130bf81612bf9565b9050919050565b600060208201905081810360008301526130df81612c1c565b9050919050565b600060208201905081810360008301526130ff81612c3f565b9050919050565b6000602082019050818103600083015261311f81612c62565b9050919050565b6000602082019050818103600083015261313f81612c85565b9050919050565b6000602082019050818103600083015261315f81612ca8565b9050919050565b6000602082019050818103600083015261317f81612ccb565b9050919050565b6000602082019050818103600083015261319f81612cee565b9050919050565b600060208201905081810360008301526131bf81612d11565b9050919050565b600060208201905081810360008301526131df81612d34565b9050919050565b600060208201905081810360008301526131ff81612d57565b9050919050565b6000602082019050818103600083015261321f81612d7a565b9050919050565b6000602082019050818103600083015261323f81612d9d565b9050919050565b6000602082019050818103600083015261325f81612dc0565b9050919050565b600060208201905061327b6000830184612de3565b92915050565b600060a0820190506132966000830188612de3565b6132a36020830187612a3d565b6132b06040830186612a3d565b6132bd6060830185612a3d565b6132ca6080830184612a3d565b9695505050505050565b60006060820190506132e96000830186612de3565b6132f66020830185612de3565b6133036040830184612de3565b949350505050565b600060c0820190506133206000830189612de3565b61332d6020830188612de3565b61333a6040830187612de3565b818103606083015261334c8186612afa565b905061335b6080830185612a1f565b61336860a0830184612a2e565b979650505050505050565b600061337d61338e565b9050613389828261354d565b919050565b6000604051905090565b600067ffffffffffffffff8211156133b3576133b2613668565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156133df576133de613668565b5b602082029050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613437826134a5565b9150613442836134a5565b9250826134525761345161360a565b5b828204905092915050565b600061346882613485565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156134dc5780820151818401526020810190506134c1565b838111156134eb576000848401525b50505050565b60006134fc826134a5565b915060008214156135105761350f6135db565b5b600182039050919050565b6000600282049050600182168061353357607f821691505b6020821081141561354757613546613639565b5b50919050565b61355682613697565b810181811067ffffffffffffffff8211171561357557613574613668565b5b80604052505050565b6000613589826134a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135bc576135bb6135db565b5b600182019050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f566f74696e6720666f7220746869732076657273696f6e2068617320656e646560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f566f74696e6720686173206e6f74207374617274656400000000000000000000600082015250565b7f596f7520616c726561647920766f746564000000000000000000000000000000600082015250565b7f4e6578742076657273696f6e20646f6573206e6f742062656c6f6e6720746f2060008201527f7468652073616d65206d616a6f722076657273696f6e00000000000000000000602082015250565b7f4e6578742076657273696f6e20646f6573206e6f7420706f696e7420746f207460008201527f68652070726576696f75732076657273696f6e00000000000000000000000000602082015250565b7f50726576696f75732076657273696f6e20646f6573206e6f742062656c6f6e6760008201527f20746f207468652073616d65206d616a6f722076657273696f6e000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6578742076657273696f6e206e756d626572206973206e6f7420677265617460008201527f6572207468616e207468652063757272656e74206f6e65000000000000000000602082015250565b7f56657273696f6e20697320616c72656164792070726f706f7365640000000000600082015250565b7f50726576696f75732076657273696f6e206e756d626572206973206e6f74206c60008201527f657373207468616e207468652063757272656e74206f6e650000000000000000602082015250565b7f596f7520617265206e6f7420616e20617574686f72697a65642076657269666960008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f50726576696f75732076657273696f6e20646f6573206e6f7420706f696e742060008201527f746f20746865206e6578742076657273696f6e00000000000000000000000000602082015250565b613a6b8161345d565b8114613a7657600080fd5b50565b613a828161346f565b8114613a8d57600080fd5b50565b613a998161347b565b8114613aa457600080fd5b50565b613ab0816134a5565b8114613abb57600080fd5b5056fea2646970667358221220ec2aa75d11fcc40d7455bd25bbc59ae26b1b2c2c9d5c022338752882c86efa8664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80639a891716116100b8578063cc65946e1161007c578063cc65946e1461033e578063d29cb6581461036e578063d5549901146103a9578063db45078b146103c7578063dffbde1b146103e3578063f2fde38b1461041757610137565b80639a8917161461028a578063a265c59d146102ba578063a2bca7fc146102ea578063c4d66de814610306578063c70a7b0c1461032257610137565b8063371139ed116100ff578063371139ed146101f7578063375164f31461022a578063592b700a14610246578063715018a6146102625780638da5cb5b1461026c57610137565b806302d249051461013c5780631f3b966d1461016e5780632520cb3a1461018a5780632b20e397146101a857806330268815146101c6575b600080fd5b6101566004803603810190610151919061294f565b610433565b604051610165939291906132d4565b60405180910390f35b610188600480360381019061018391906128cd565b61046f565b005b610192610650565b60405161019f9190612e63565b60405180910390f35b6101b0610676565b6040516101bd9190612e63565b60405180910390f35b6101e060048036038101906101db919061294f565b61069c565b6040516101ee929190612f9e565b60405180910390f35b610211600480360381019061020c919061294f565b6106c0565b6040516102219493929190612fc7565b60405180910390f35b610244600480360381019061023f91906128cd565b610980565b005b610260600480360381019061025b91906128a4565b610b62565b005b61026a610c22565b005b610274610caa565b6040516102819190612e63565b60405180910390f35b6102a4600480360381019061029f91906128a4565b610cd4565b6040516102b19190612e7e565b60405180910390f35b6102d460048036038101906102cf919061294f565b610cf4565b6040516102e19190612f5a565b60405180910390f35b61030460048036038101906102ff91906128a4565b610d12565b005b610320600480360381019061031b91906128a4565b610dd2565b005b61033c6004803603810190610337919061290e565b610ef5565b005b6103586004803603810190610353919061294f565b611407565b6040516103659190613084565b60405180910390f35b6103886004803603810190610383919061294f565b611571565b6040516103a09c9b9a99989796959493929190612e99565b60405180910390f35b6103b16116a0565b6040516103be9190613266565b60405180910390f35b6103e160048036038101906103dc9190612978565b6116a6565b005b6103fd60048036038101906103f8919061294f565b611992565b60405161040e959493929190613281565b60405180910390f35b610431600480360381019061042c91906128a4565b6119c8565b005b600080600080606860008681526020019081526020016000209050606c5481600001805490508260010180549050935093509350509193909250565b610477611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610495610caa565b73ffffffffffffffffffffffffffffffffffffffff16146104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e2906131a6565b60405180910390fd5b60005b815181101561064c57606b6000838381518110610534577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610639576001606b60008484815181106105c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550606c60008154809291906106339061357e565b91905055505b80806106449061357e565b9150506104ee565b5050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60676020528060005260406000206000915090508060000154908060010154905082565b600060606000606060006068600087815260200190815260200160002090506106e881611ac8565b6000606a60008360050154815260200190815260200160002060405180602001604052908160008201548152505090506000816000015190506000819050600080606960008581526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050610783612588565b5b86600a0154826000015110156107f85784925081905081602001519450606960008681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509150610784565b60606000801b8260800151146108ae576068600083608001518152602001908152602001600020600801805461082d9061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546108599061351b565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b505050505090505b60606000801b84608001511461096457606860008560800151815260200190815260200160002060080180546108e39061351b565b80601f016020809104026020016040519081016040528092919081815260200182805461090f9061351b565b801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b505050505090505b848287839c509c509c509c505050505050505050509193509193565b610988611ac0565b73ffffffffffffffffffffffffffffffffffffffff166109a6610caa565b73ffffffffffffffffffffffffffffffffffffffff16146109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f3906131a6565b60405180910390fd5b60005b8151811015610b5e57606b6000838381518110610a45577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b4b576000606b6000848481518110610ad9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550606c6000815480929190610b45906134f1565b91905055505b8080610b569061357e565b9150506109ff565b5050565b610b6a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610b88610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906131a6565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c2a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610c48610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c95906131a6565b60405180910390fd5b610ca86000611bfd565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606b6020528060005260406000206000915054906101000a900460ff1681565b606a6020528060005260406000206000915090508060000154905081565b610d1a611ac0565b73ffffffffffffffffffffffffffffffffffffffff16610d38610caa565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d85906131a6565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610df8575060008054906101000a900460ff16155b610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e87576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e8f611cc3565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610ef15760008060016101000a81548160ff0219169083151502179055505b5050565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890613226565b60405180910390fd5b60005b8151811015611403576000828281518110610fc8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060686000836000015181526020019081526020016000209050610ff681611ac8565b6110178260200151836040015183600a015484600501548560060154611dac565b60018160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160600151156110e55780600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061114b565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6002606c5461115a919061342c565b8160000180549050111561126c5760018160030160006101000a81548160ff02191690831515021790555060018160030160016101000a81548160ff0219169083151502179055506112678260200151836040015183600a01548460050154856006015487600001518760030160019054906101000a900460ff168860080180546111e49061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546112109061351b565b801561125d5780601f106112325761010080835404028352916020019161125d565b820191906000526020600020905b81548152906001019060200180831161124057829003601f168201915b5050505050611fd2565b61136c565b60018160030160006101000a81548160ff02191690831515021790555060008160030160016101000a81548160ff02191690831515021790555061136b8260200151836040015183600a01548460050154856006015487600001518760030160019054906101000a900460ff168860080180546112e89061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546113149061351b565b80156113615780601f1061133657610100808354040283529160200191611361565b820191906000526020600020905b81548152906001019060200180831161134457829003601f168201915b5050505050611fd2565b5b80600701543373ffffffffffffffffffffffffffffffffffffffff167f033b10720c643c1c13a1be3d8b38c4cea2e3c03c5e0d88fad5fc7de146b5bbc0836008016040516020016113bd9190612e4c565b6040516020818303038152906040528051906020012085606001516040516113e6929190612f75565b60405180910390a3505080806113fb9061357e565b915050610f84565b5050565b6060600060686000848152602001908152602001600020905061142981611ac8565b600060696000836006015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000801b816080015114156114bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000606860008360800151815260200190815260200160002060080180546114e69061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546115129061351b565b801561155f5780601f106115345761010080835404028352916020019161155f565b820191906000526020600020905b81548152906001019060200180831161154257829003601f168201915b50505050509050809350505050919050565b60686020528060005260406000206000915090508060030160009054906101000a900460ff16908060030160019054906101000a900460ff16908060030160029054906101000a900460ff16908060040154908060050154908060060154908060070154908060080180546115e59061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546116119061351b565b801561165e5780601f106116335761010080835404028352916020019161165e565b820191906000526020600020905b81548152906001019060200180831161164157829003601f168201915b50505050509080600901549080600a01549080600b01549080600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508c565b606c5481565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461172a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000878760405160200161173f929190612e09565b6040516020818303038152906040528051906020012090506000818760405160200161176c929190612e09565b60405160208183030381529060405280519060200120905060008187604051602001611799929190612e09565b60405160208183030381529060405280519060200120905060006068600083815260200190815260200160002090506000801b816007015414611811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611808906131e6565b60405180910390fd5b8a81600401819055508381600501819055508281600601819055508181600701819055508981600901819055508881600a01819055508781600b018190555086868260080191906118639291906125c3565b508481600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000606760008681526020019081526020016000209050600081600201600085815260200190815260200160002090508381600101819055506000801b8260010154146119235760008260020160008460010154815260200190815260200160002090508481600001819055508483600101819055505061193f565b83826001018190555083826000018190555061193e8361214d565b5b8c7f7b257b1260a7cf7f5f9e0282efbc0b2986935a1d709a4f26b1190234a1f1928a858e8e8e8e8e8e60405161197b979695949392919061301a565b60405180910390a250505050505050505050505050565b60696020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b6119d0611ac0565b73ffffffffffffffffffffffffffffffffffffffff166119ee610caa565b73ffffffffffffffffffffffffffffffffffffffff1614611a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3b906131a6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab906130a6565b60405180910390fd5b611abd81611bfd565b50565b600033905090565b8060030160029054906101000a900460ff16611b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b10906130e6565b60405180910390fd5b8060030160009054906101000a900460ff1615611b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b62906130c6565b60405180910390fd5b8060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf190613106565b60405180910390fd5b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680611ce9575060008054906101000a900460ff16155b611d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015611d78576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611d8061224e565b611d88612327565b8015611da95760008060016101000a81548160ff0219169083151502179055505b50565b60006069600083815260200190815260200160002090506000801b816004015414611dd75750611fcb565b600060696000888152602001908152602001600020905060006069600088815260200190815260200160002090506000801b826004015414611ee65785826000015410611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090613206565b60405180910390fd5b86826001015414611e9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9690613246565b60405180910390fd5b84826003015414611ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edc90613166565b60405180910390fd5b5b6000801b816004015414611fc75780600001548610611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f31906131c6565b60405180910390fd5b87816002015414611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790613146565b60405180910390fd5b84816003015414611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90613126565b60405180910390fd5b5b5050505b5050505050565b600081604051602001611fe59190612e35565b60405160208183030381529060405280519060200120905082156120fe57612011898989898989612410565b600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120fd576000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663d4cf242686846040518363ffffffff1660e01b81526004016120c9929190612f9e565b600060405180830381600087803b1580156120e357600080fd5b505af11580156120f7573d6000803e3d6000fd5b50505050505b5b612107866124da565b821515847fcd75dfcc9af924e61cb25759e949612024175eed33cae40a1ab6ba46f117986a8360405161213a9190612f5a565b60405180910390a3505050505050505050565b60018160030160026101000a81548160ff021916908315150217905550600060696000836006015481526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050816007015482600401547f79d351d82ed9466e01205fc081a7a79a16d555495835db52037e37f31f42deea846009015485600a015486600b01548760080188600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000801b896080015114156040516122429695949392919061330b565b60405180910390a35050565b600060019054906101000a900460ff1680612274575060008054906101000a900460ff16155b6122b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122aa90613186565b60405180910390fd5b60008060019054906101000a900460ff161590508015612303576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156123245760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061234d575060008054906101000a900460ff16155b61238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238390613186565b60405180910390fd5b60008060019054906101000a900460ff1615905080156123dc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123ec6123e7611ac0565b611bfd565b801561240d5760008060016101000a81548160ff0219169083151502179055505b50565b6000606960008481526020019081526020016000209050818160040181905550848160000181905550838160030181905550600060696000898152602001908152602001600020905060006069600089815260200190815260200160002090506000801b826004015414612491578883600201819055508482600101819055505b6000801b8160040154146124b2578783600101819055508481600201819055505b6000801b82600401541480156124ce57506000801b8160040154145b50505050505050505050565b60006067600083815260200190815260200160002090506000801b816000015414156125065750612585565b60008160020160008360000154815260200190815260200160002090506000606860008460000154815260200190815260200160002090506000801b8260000154141561256a576000801b83600001819055506000801b8360010181905550612578565b816000015483600001819055505b6125818161214d565b5050505b50565b6040518060a0016040528060008152602001600080191681526020016000801916815260200160008019168152602001600080191681525090565b8280546125cf9061351b565b90600052602060002090601f0160209004810192826125f15760008555612638565b82601f1061260a57803560ff1916838001178555612638565b82800160010185558215612638579182015b8281111561263757823582559160200191906001019061261c565b5b5090506126459190612649565b5090565b5b8082111561266257600081600090555060010161264a565b5090565b600061267961267484613398565b613373565b9050808382526020820190508285602086028201111561269857600080fd5b60005b858110156126c857816126ae888261273e565b84526020840193506020830192505060018101905061269b565b5050509392505050565b60006126e56126e0846133c4565b613373565b9050808382526020820190508285608086028201111561270457600080fd5b60005b85811015612734578161271a888261281b565b845260208401935060808301925050600181019050612707565b5050509392505050565b60008135905061274d81613a62565b92915050565b600082601f83011261276457600080fd5b8135612774848260208601612666565b91505092915050565b600082601f83011261278e57600080fd5b813561279e8482602086016126d2565b91505092915050565b6000813590506127b681613a79565b92915050565b6000813590506127cb81613a90565b92915050565b60008083601f8401126127e357600080fd5b8235905067ffffffffffffffff8111156127fc57600080fd5b60208301915083600182028301111561281457600080fd5b9250929050565b60006080828403121561282d57600080fd5b6128376080613373565b90506000612847848285016127bc565b600083015250602061285b848285016127bc565b602083015250604061286f848285016127bc565b6040830152506060612883848285016127a7565b60608301525092915050565b60008135905061289e81613aa7565b92915050565b6000602082840312156128b657600080fd5b60006128c48482850161273e565b91505092915050565b6000602082840312156128df57600080fd5b600082013567ffffffffffffffff8111156128f957600080fd5b61290584828501612753565b91505092915050565b60006020828403121561292057600080fd5b600082013567ffffffffffffffff81111561293a57600080fd5b6129468482850161277d565b91505092915050565b60006020828403121561296157600080fd5b600061296f848285016127bc565b91505092915050565b600080600080600080600060c0888a03121561299357600080fd5b60006129a18a828b016127bc565b97505060206129b28a828b0161288f565b96505060406129c38a828b0161288f565b95505060606129d48a828b0161288f565b945050608088013567ffffffffffffffff8111156129f157600080fd5b6129fd8a828b016127d1565b935093505060a0612a108a828b0161273e565b91505092959891949750929550565b612a288161345d565b82525050565b612a378161346f565b82525050565b612a468161347b565b82525050565b612a5d612a588261347b565b6135c7565b82525050565b6000612a6f8385613410565b9350612a7c8385846134af565b612a8583613697565b840190509392505050565b6000612a9b82613405565b612aa58185613410565b9350612ab58185602086016134be565b612abe81613697565b840191505092915050565b6000612ad482613405565b612ade8185613421565b9350612aee8185602086016134be565b80840191505092915050565b60008154612b078161351b565b612b118186613410565b94506001821660008114612b2c5760018114612b3e57612b71565b60ff1983168652602086019350612b71565b612b47856133f0565b60005b83811015612b6957815481890152600182019150602081019050612b4a565b808801955050505b50505092915050565b60008154612b878161351b565b612b918186613421565b94506001821660008114612bac5760018114612bbd57612bf0565b60ff19831686528186019350612bf0565b612bc6856133f0565b60005b83811015612be857815481890152600182019150602081019050612bc9565b838801955050505b50505092915050565b6000612c06602683613410565b9150612c11826136a8565b604082019050919050565b6000612c29602183613410565b9150612c34826136f7565b604082019050919050565b6000612c4c601683613410565b9150612c5782613746565b602082019050919050565b6000612c6f601183613410565b9150612c7a8261376f565b602082019050919050565b6000612c92603683613410565b9150612c9d82613798565b604082019050919050565b6000612cb5603383613410565b9150612cc0826137e7565b604082019050919050565b6000612cd8603a83613410565b9150612ce382613836565b604082019050919050565b6000612cfb602e83613410565b9150612d0682613885565b604082019050919050565b6000612d1e602083613410565b9150612d29826138d4565b602082019050919050565b6000612d41603783613410565b9150612d4c826138fd565b604082019050919050565b6000612d64601b83613410565b9150612d6f8261394c565b602082019050919050565b6000612d87603883613410565b9150612d9282613975565b604082019050919050565b6000612daa602283613410565b9150612db5826139c4565b604082019050919050565b6000612dcd603383613410565b9150612dd882613a13565b604082019050919050565b612dec816134a5565b82525050565b612e03612dfe826134a5565b6135d1565b82525050565b6000612e158285612a4c565b602082019150612e258284612df2565b6020820191508190509392505050565b6000612e418284612ac9565b915081905092915050565b6000612e588284612b7a565b915081905092915050565b6000602082019050612e786000830184612a1f565b92915050565b6000602082019050612e936000830184612a2e565b92915050565b600061018082019050612eaf600083018f612a2e565b612ebc602083018e612a2e565b612ec9604083018d612a2e565b612ed6606083018c612a3d565b612ee3608083018b612a3d565b612ef060a083018a612a3d565b612efd60c0830189612a3d565b81810360e0830152612f0f8188612a90565b9050612f1f610100830187612de3565b612f2d610120830186612de3565b612f3b610140830185612de3565b612f49610160830184612a1f565b9d9c50505050505050505050505050565b6000602082019050612f6f6000830184612a3d565b92915050565b6000604082019050612f8a6000830185612a3d565b612f976020830184612a2e565b9392505050565b6000604082019050612fb36000830185612a3d565b612fc06020830184612a3d565b9392505050565b6000608082019050612fdc6000830187612a3d565b8181036020830152612fee8186612a90565b9050612ffd6040830185612a3d565b818103606083015261300f8184612a90565b905095945050505050565b600060c08201905061302f600083018a612a3d565b61303c6020830189612de3565b6130496040830188612de3565b6130566060830187612de3565b8181036080830152613069818587612a63565b905061307860a0830184612a1f565b98975050505050505050565b6000602082019050818103600083015261309e8184612a90565b905092915050565b600060208201905081810360008301526130bf81612bf9565b9050919050565b600060208201905081810360008301526130df81612c1c565b9050919050565b600060208201905081810360008301526130ff81612c3f565b9050919050565b6000602082019050818103600083015261311f81612c62565b9050919050565b6000602082019050818103600083015261313f81612c85565b9050919050565b6000602082019050818103600083015261315f81612ca8565b9050919050565b6000602082019050818103600083015261317f81612ccb565b9050919050565b6000602082019050818103600083015261319f81612cee565b9050919050565b600060208201905081810360008301526131bf81612d11565b9050919050565b600060208201905081810360008301526131df81612d34565b9050919050565b600060208201905081810360008301526131ff81612d57565b9050919050565b6000602082019050818103600083015261321f81612d7a565b9050919050565b6000602082019050818103600083015261323f81612d9d565b9050919050565b6000602082019050818103600083015261325f81612dc0565b9050919050565b600060208201905061327b6000830184612de3565b92915050565b600060a0820190506132966000830188612de3565b6132a36020830187612a3d565b6132b06040830186612a3d565b6132bd6060830185612a3d565b6132ca6080830184612a3d565b9695505050505050565b60006060820190506132e96000830186612de3565b6132f66020830185612de3565b6133036040830184612de3565b949350505050565b600060c0820190506133206000830189612de3565b61332d6020830188612de3565b61333a6040830187612de3565b818103606083015261334c8186612afa565b905061335b6080830185612a1f565b61336860a0830184612a2e565b979650505050505050565b600061337d61338e565b9050613389828261354d565b919050565b6000604051905090565b600067ffffffffffffffff8211156133b3576133b2613668565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156133df576133de613668565b5b602082029050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613437826134a5565b9150613442836134a5565b9250826134525761345161360a565b5b828204905092915050565b600061346882613485565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156134dc5780820151818401526020810190506134c1565b838111156134eb576000848401525b50505050565b60006134fc826134a5565b915060008214156135105761350f6135db565b5b600182039050919050565b6000600282049050600182168061353357607f821691505b6020821081141561354757613546613639565b5b50919050565b61355682613697565b810181811067ffffffffffffffff8211171561357557613574613668565b5b80604052505050565b6000613589826134a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135bc576135bb6135db565b5b600182019050919050565b6000819050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f566f74696e6720666f7220746869732076657273696f6e2068617320656e646560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f566f74696e6720686173206e6f74207374617274656400000000000000000000600082015250565b7f596f7520616c726561647920766f746564000000000000000000000000000000600082015250565b7f4e6578742076657273696f6e20646f6573206e6f742062656c6f6e6720746f2060008201527f7468652073616d65206d616a6f722076657273696f6e00000000000000000000602082015250565b7f4e6578742076657273696f6e20646f6573206e6f7420706f696e7420746f207460008201527f68652070726576696f75732076657273696f6e00000000000000000000000000602082015250565b7f50726576696f75732076657273696f6e20646f6573206e6f742062656c6f6e6760008201527f20746f207468652073616d65206d616a6f722076657273696f6e000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6578742076657273696f6e206e756d626572206973206e6f7420677265617460008201527f6572207468616e207468652063757272656e74206f6e65000000000000000000602082015250565b7f56657273696f6e20697320616c72656164792070726f706f7365640000000000600082015250565b7f50726576696f75732076657273696f6e206e756d626572206973206e6f74206c60008201527f657373207468616e207468652063757272656e74206f6e650000000000000000602082015250565b7f596f7520617265206e6f7420616e20617574686f72697a65642076657269666960008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f50726576696f75732076657273696f6e20646f6573206e6f7420706f696e742060008201527f746f20746865206e6578742076657273696f6e00000000000000000000000000602082015250565b613a6b8161345d565b8114613a7657600080fd5b50565b613a828161346f565b8114613a8d57600080fd5b50565b613a998161347b565b8114613aa457600080fd5b50565b613ab0816134a5565b8114613abb57600080fd5b5056fea2646970667358221220ec2aa75d11fcc40d7455bd25bbc59ae26b1b2c2c9d5c022338752882c86efa8664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5319,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5322,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5402,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5312,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8564,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "registrar",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8566,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "versionVerifiedListener",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8571,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "majorVersionQueueContainers",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_struct(MajorVersionQueueContainer)8539_storage)"
      },
      {
        "astId": 8576,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "proposedVersions",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_struct(ProposedVersion)8524_storage)"
      },
      {
        "astId": 8581,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "verifiedMinorVersions",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_struct(VerifiedMinorVersion)8553_storage)"
      },
      {
        "astId": 8586,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "verifiedMajorVersions",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_bytes32,t_struct(VerifiedMajorVersion)8542_storage)"
      },
      {
        "astId": 8590,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "authorizedVerifiers",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8592,
        "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
        "label": "authorizedVerifierCount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(MajorVersionQueueContainer)8539_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotingMachine.MajorVersionQueueContainer)",
        "numberOfBytes": "32",
        "value": "t_struct(MajorVersionQueueContainer)8539_storage"
      },
      "t_mapping(t_bytes32,t_struct(ProposedVersion)8524_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotingMachine.ProposedVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposedVersion)8524_storage"
      },
      "t_mapping(t_bytes32,t_struct(QueuedVersion)8529_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotingMachine.QueuedVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(QueuedVersion)8529_storage"
      },
      "t_mapping(t_bytes32,t_struct(VerifiedMajorVersion)8542_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotingMachine.VerifiedMajorVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifiedMajorVersion)8542_storage"
      },
      "t_mapping(t_bytes32,t_struct(VerifiedMinorVersion)8553_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotingMachine.VerifiedMinorVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifiedMinorVersion)8553_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MajorVersionQueueContainer)8539_storage": {
        "encoding": "inplace",
        "label": "struct VotingMachine.MajorVersionQueueContainer",
        "members": [
          {
            "astId": 8531,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "headVersionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8533,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "tailVersionId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8538,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "queuedVersions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(QueuedVersion)8529_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposedVersion)8524_storage": {
        "encoding": "inplace",
        "label": "struct VotingMachine.ProposedVersion",
        "members": [
          {
            "astId": 8492,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "approvingVerifiers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8495,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "rejectingVerifiers",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8499,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "votedVerifiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8501,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "decided",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8503,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "verified",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8505,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "votingStarted",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8507,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "packageId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 8509,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "majorNodeId",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 8511,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "minorNodeId",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 8513,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "patchNodeId",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 8515,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "packageLocation",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 8517,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "majorVersion",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8519,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "minorVersion",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8521,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "patchVersion",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8523,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "proposer",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(QueuedVersion)8529_storage": {
        "encoding": "inplace",
        "label": "struct VotingMachine.QueuedVersion",
        "members": [
          {
            "astId": 8526,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "nextQueuedVersionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8528,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "patchNodeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VerifiedMajorVersion)8542_storage": {
        "encoding": "inplace",
        "label": "struct VotingMachine.VerifiedMajorVersion",
        "members": [
          {
            "astId": 8541,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "lowestMinorNodeId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VerifiedMinorVersion)8553_storage": {
        "encoding": "inplace",
        "label": "struct VotingMachine.VerifiedMinorVersion",
        "members": [
          {
            "astId": 8544,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "versionNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8546,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "nextMinorNodeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8548,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "prevMinorNodeId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 8550,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "majorNodeId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 8552,
            "contract": "contracts/versioning/VotingMachine.sol:VotingMachine",
            "label": "patchNodeId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}