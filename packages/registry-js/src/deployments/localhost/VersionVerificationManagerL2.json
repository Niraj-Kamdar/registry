{
  "address": "0x6A1c74dcD621159946b852a5261A7B29d104bbd0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "verifiedVersionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "major",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "VersionPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "sides",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "isValidProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "sides",
          "type": "bool[]"
        }
      ],
      "name": "publishVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "updateVerificationRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRootUpdater",
          "type": "address"
        }
      ],
      "name": "updateVerificationRootUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRootUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45f7eea6029621f83278c8c2f745bd2942de92236bf2e4a53f142368e5f19bff",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1677965",
    "logsBloom": "0x
    "blockHash": "0x82bc933ddc2fa6c4bfb315710c50780d0af7ce1e99b737b306aaabf6f2ed9ac2",
    "transactionHash": "0x45f7eea6029621f83278c8c2f745bd2942de92236bf2e4a53f142368e5f19bff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x45f7eea6029621f83278c8c2f745bd2942de92236bf2e4a53f142368e5f19bff",
        "address": "0x6A1c74dcD621159946b852a5261A7B29d104bbd0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x82bc933ddc2fa6c4bfb315710c50780d0af7ce1e99b737b306aaabf6f2ed9ac2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x45f7eea6029621f83278c8c2f745bd2942de92236bf2e4a53f142368e5f19bff",
        "address": "0x6A1c74dcD621159946b852a5261A7B29d104bbd0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x82bc933ddc2fa6c4bfb315710c50780d0af7ce1e99b737b306aaabf6f2ed9ac2"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "1677965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "0xF492Ab88C674cE33D5c6B9660A46B7e406469E6d"
  ],
  "solcInputHash": "4fcf1c928f6c8d097085f4f5b67cedea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"verifiedVersionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"VersionPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"sides\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"isValidProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"sides\",\"type\":\"bool[]\"}],\"name\":\"publishVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"updateVerificationRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRootUpdater\",\"type\":\"address\"}],\"name\":\"updateVerificationRootUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRootUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/VersionVerificationManager.sol\":\"VersionVerificationManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/VersionVerificationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\n\\ncontract VersionVerificationManager is OwnableUpgradeable {\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    bytes32 indexed verifiedVersionId,\\n    bytes32 indexed patchNodeId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  address public registry;\\n  address public verificationRootUpdater;\\n\\n  bytes32 public verificationRoot;\\n\\n  constructor(\\n    address owner,\\n    address _registry\\n  ) {\\n    initialize(_registry);\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVerificationRootUpdater(address _verificationRootUpdater)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootUpdater = _verificationRootUpdater;\\n  }\\n\\n  function updateVerificationRoot(bytes32 root) public {\\n    assert(msg.sender == verificationRootUpdater);\\n\\n    verificationRoot = root;\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location,\\n    bytes32[] memory proof,\\n    bool[] memory sides\\n  ) public packageOwner(packageId) {\\n    bytes32 verifiedVersionId = getVerifiedVersionId(patchNodeId, location);\\n\\n    require(\\n      _isValidProof(proof, sides, verifiedVersionId, verificationRoot),\\n      \\\"Invalid proof\\\"\\n    );\\n\\n    bytes32 actualPatchNodeId = Registry(registry).publishVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    require(\\n      patchNodeId == actualPatchNodeId,\\n      \\\"Supplied patchNodeId does not match the calculated patchNodeId\\\"\\n    );\\n\\n    emit VersionPublished(\\n      packageId,\\n      verifiedVersionId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n  }\\n\\n  function getVerifiedVersionId(bytes32 patchNodeId, string memory location)\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes32 verifiedVersionId = keccak256(\\n      abi.encodePacked(patchNodeId, keccak256(abi.encodePacked(location)))\\n    );\\n    return verifiedVersionId;\\n  }\\n\\n  function isValidProof(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 patchNodeId,\\n    string memory location\\n  ) public view returns (bool) {\\n    bytes32 verifiedVersionId = getVerifiedVersionId(patchNodeId, location);\\n    return _isValidProof(proof, sides, verifiedVersionId, verificationRoot);\\n  }\\n\\n  function _isValidProof(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 verifiedVersionId,\\n    bytes32 root\\n  ) private pure returns (bool) {\\n    bytes32 hash = verifiedVersionId;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (sides[i]) {\\n        hash = keccak256(abi.encodePacked(proofElement, hash));\\n      } else {\\n        hash = keccak256(abi.encodePacked(hash, proofElement));\\n      }\\n    }\\n\\n    return hash == root;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0x64aac19e48b6ae7eab317ea3b346101fb2de3648696f2511cd7555d0a3a0b726\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor(\\n    address owner\\n  ) {\\n    initialize();\\n    transferOwnership(owner);\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x464aadc7bbfc29cc52424181cdbf66cc1f613b0fe73cba13cc9320511333eea5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610153578063b61d211b14610171578063c4d66de81461018f578063ce749723146101ab578063dcbc69b5146101c7578063f2fde38b146101f7576100b4565b80630d032de8146100b95780631a5da6c8146100d757806338a34cf6146100f357806343ed751d1461010f578063715018a61461012b5780637b10399914610135575b600080fd5b6100c1610213565b6040516100ce919061158c565b60405180910390f35b6100f160048036038101906100ec919061113b565b610219565b005b61010d6004803603810190610108919061113b565b6102d9565b005b61012960048036038101906101249190611238565b610399565b005b610133610427565b005b61013d6104af565b60405161014a9190611556565b60405180910390f35b61015b6104d5565b6040516101689190611556565b60405180910390f35b6101796104ff565b6040516101869190611556565b60405180910390f35b6101a960048036038101906101a4919061113b565b610525565b005b6101c560048036038101906101c0919061128a565b610648565b005b6101e160048036038101906101dc919061118d565b610862565b6040516101ee9190611571565b60405180910390f35b610211600480360381019061020c919061113b565b61088a565b005b60675481565b610221610982565b73ffffffffffffffffffffffffffffffffffffffff1661023f6104d5565b73ffffffffffffffffffffffffffffffffffffffff1614610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c90611661565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102e1610982565b73ffffffffffffffffffffffffffffffffffffffff166102ff6104d5565b73ffffffffffffffffffffffffffffffffffffffff1614610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90611661565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041d577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8060678190555050565b61042f610982565b73ffffffffffffffffffffffffffffffffffffffff1661044d6104d5565b73ffffffffffffffffffffffffffffffffffffffff16146104a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049a90611661565b60405180910390fd5b6104ad600061098a565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff168061054b575060008054906101000a900460ff16155b61058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190611641565b60405180910390fd5b60008060019054906101000a900460ff1615905080156105da576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6105e2610a50565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106445760008060016101000a81548160ff0219169083151502179055505b5050565b873373ffffffffffffffffffffffffffffffffffffffff1661066982610b39565b73ffffffffffffffffffffffffffffffffffffffff16146106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690611621565b60405180910390fd5b60006106cb8986610bed565b90506106db848483606754610c4b565b61071a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610711906116a1565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dc1d99d8c8b8b8b8b6040518663ffffffff1660e01b815260040161077f9594939291906115a7565b602060405180830381600087803b15801561079957600080fd5b505af11580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190611261565b9050808a14610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080c90611681565b60405180910390fd5b89828c7f5875b5d75244d9184a17c71dedfa3481a6b268409027ba8fb88b3d8098dc206b8c8c8c8c60405161084d94939291906116c1565b60405180910390a45050505050505050505050565b60008061086f8484610bed565b905061087f868683606754610c4b565b915050949350505050565b610892610982565b73ffffffffffffffffffffffffffffffffffffffff166108b06104d5565b73ffffffffffffffffffffffffffffffffffffffff1614610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90611661565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90611601565b60405180910390fd5b61097f8161098a565b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610a76575060008054906101000a900460ff16155b610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90611641565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b05576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b0d610d67565b610b15610e40565b8015610b365760008060016101000a81548160ff0219169083151502179055505b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663427a94d4836040518263ffffffff1660e01b8152600401610b96919061158c565b60206040518083038186803b158015610bae57600080fd5b505afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190611164565b9050919050565b6000808383604051602001610c02919061153f565b60405160208183030381529060405280519060200120604051602001610c29929190611513565b6040516020818303038152906040528051906020012090508091505092915050565b60008083905060005b8651811015610d58576000878281518110610c98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868281518110610cdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015115610d18578083604051602001610cfb929190611513565b604051602081830303815290604052805190602001209250610d44565b8281604051602001610d2b929190611513565b6040516020818303038152906040528051906020012092505b508080610d50906118a7565b915050610c54565b50828114915050949350505050565b600060019054906101000a900460ff1680610d8d575060008054906101000a900460ff16155b610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390611641565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e1c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e3d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e66575060008054906101000a900460ff16155b610ea5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9c90611641565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ef5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610f05610f00610982565b61098a565b8015610f265760008060016101000a81548160ff0219169083151502179055505b50565b6000610f3c610f3784611732565b61170d565b90508083825260208201905082856020860282011115610f5b57600080fd5b60005b85811015610f8b5781610f7188826110bd565b845260208401935060208301925050600181019050610f5e565b5050509392505050565b6000610fa8610fa38461175e565b61170d565b90508083825260208201905082856020860282011115610fc757600080fd5b60005b85811015610ff75781610fdd88826110d2565b845260208401935060208301925050600181019050610fca565b5050509392505050565b600061101461100f8461178a565b61170d565b90508281526020810184848401111561102c57600080fd5b611037848285611834565b509392505050565b60008135905061104e81611af7565b92915050565b60008151905061106381611af7565b92915050565b600082601f83011261107a57600080fd5b813561108a848260208601610f29565b91505092915050565b600082601f8301126110a457600080fd5b81356110b4848260208601610f95565b91505092915050565b6000813590506110cc81611b0e565b92915050565b6000813590506110e181611b25565b92915050565b6000815190506110f681611b25565b92915050565b600082601f83011261110d57600080fd5b813561111d848260208601611001565b91505092915050565b60008135905061113581611b3c565b92915050565b60006020828403121561114d57600080fd5b600061115b8482850161103f565b91505092915050565b60006020828403121561117657600080fd5b600061118484828501611054565b91505092915050565b600080600080608085870312156111a357600080fd5b600085013567ffffffffffffffff8111156111bd57600080fd5b6111c987828801611093565b945050602085013567ffffffffffffffff8111156111e657600080fd5b6111f287828801611069565b9350506040611203878288016110d2565b925050606085013567ffffffffffffffff81111561122057600080fd5b61122c878288016110fc565b91505092959194509250565b60006020828403121561124a57600080fd5b6000611258848285016110d2565b91505092915050565b60006020828403121561127357600080fd5b6000611281848285016110e7565b91505092915050565b600080600080600080600080610100898b0312156112a757600080fd5b60006112b58b828c016110d2565b98505060206112c68b828c016110d2565b97505060406112d78b828c01611126565b96505060606112e88b828c01611126565b95505060806112f98b828c01611126565b94505060a089013567ffffffffffffffff81111561131657600080fd5b6113228b828c016110fc565b93505060c089013567ffffffffffffffff81111561133f57600080fd5b61134b8b828c01611093565b92505060e089013567ffffffffffffffff81111561136857600080fd5b6113748b828c01611069565b9150509295985092959890939650565b61138d816117e2565b82525050565b61139c816117f4565b82525050565b6113ab81611800565b82525050565b6113c26113bd82611800565b6118f0565b82525050565b60006113d3826117bb565b6113dd81856117c6565b93506113ed818560208601611843565b6113f681611958565b840191505092915050565b600061140c826117bb565b61141681856117d7565b9350611426818560208601611843565b80840191505092915050565b600061143f6026836117c6565b915061144a82611969565b604082019050919050565b60006114626034836117c6565b915061146d826119b8565b604082019050919050565b6000611485602e836117c6565b915061149082611a07565b604082019050919050565b60006114a86020836117c6565b91506114b382611a56565b602082019050919050565b60006114cb603e836117c6565b91506114d682611a7f565b604082019050919050565b60006114ee600d836117c6565b91506114f982611ace565b602082019050919050565b61150d8161182a565b82525050565b600061151f82856113b1565b60208201915061152f82846113b1565b6020820191508190509392505050565b600061154b8284611401565b915081905092915050565b600060208201905061156b6000830184611384565b92915050565b60006020820190506115866000830184611393565b92915050565b60006020820190506115a160008301846113a2565b92915050565b600060a0820190506115bc60008301886113a2565b6115c96020830187611504565b6115d66040830186611504565b6115e36060830185611504565b81810360808301526115f581846113c8565b90509695505050505050565b6000602082019050818103600083015261161a81611432565b9050919050565b6000602082019050818103600083015261163a81611455565b9050919050565b6000602082019050818103600083015261165a81611478565b9050919050565b6000602082019050818103600083015261167a8161149b565b9050919050565b6000602082019050818103600083015261169a816114be565b9050919050565b600060208201905081810360008301526116ba816114e1565b9050919050565b60006080820190506116d66000830187611504565b6116e36020830186611504565b6116f06040830185611504565b818103606083015261170281846113c8565b905095945050505050565b6000611717611728565b90506117238282611876565b919050565b6000604051905090565b600067ffffffffffffffff82111561174d5761174c611929565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561177957611778611929565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156117a5576117a4611929565b5b6117ae82611958565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006117ed8261180a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611861578082015181840152602081019050611846565b83811115611870576000848401525b50505050565b61187f82611958565b810181811067ffffffffffffffff8211171561189e5761189d611929565b5b80604052505050565b60006118b28261182a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118e5576118e46118fa565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f7420686176652061636365737320746f2074686520646f60008201527f6d61696e206f662074686973207061636b616765000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f537570706c6965642070617463684e6f6465496420646f6573206e6f74206d6160008201527f746368207468652063616c63756c617465642070617463684e6f646549640000602082015250565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b611b00816117e2565b8114611b0b57600080fd5b50565b611b17816117f4565b8114611b2257600080fd5b50565b611b2e81611800565b8114611b3957600080fd5b50565b611b458161182a565b8114611b5057600080fd5b5056fea264697066735822122060d934f2007a24755bf1a0ce35ecad085115a7b85794830b5741030d143df1c764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5319,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5322,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5402,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5312,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8177,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8179,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "verificationRootUpdater",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8181,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "verificationRoot",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}