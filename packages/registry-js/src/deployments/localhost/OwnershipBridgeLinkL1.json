{
  "address": "0xC72189CF685056DED9487704A80E9e2aEeC80227",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blockchainName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeChainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeLink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "packageOwnershipManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistrar",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistrarNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "receiveOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistrar",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistrarNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "relayOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayOwnershipGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        }
      ],
      "name": "updateBlockchainName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        }
      ],
      "name": "updateBridgeChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        }
      ],
      "name": "updatePackageOwnershipManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRelayOwnershipGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf809492d188d230347b19413a181ce1064dbfc622a6a03b3b176563a98cfc04",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0xC72189CF685056DED9487704A80E9e2aEeC80227",
    "transactionIndex": 0,
    "gasUsed": "1382917",
    "logsBloom": "0x
    "blockHash": "0x653d68dd0f3171ae5bd191bd17561bc87fbb1568829a7172a6a84087c02e4f88",
    "transactionHash": "0xdf809492d188d230347b19413a181ce1064dbfc622a6a03b3b176563a98cfc04",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0xdf809492d188d230347b19413a181ce1064dbfc622a6a03b3b176563a98cfc04",
        "address": "0xC72189CF685056DED9487704A80E9e2aEeC80227",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x653d68dd0f3171ae5bd191bd17561bc87fbb1568829a7172a6a84087c02e4f88"
      }
    ],
    "blockNumber": 10,
    "cumulativeGasUsed": "1382917",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xC95639fBB0dc0fA87Be357841416d7Ae5eEC7b57",
    "0x6c322d636861696e2d6e616d6500000000000000000000000000000000000000",
    "0x3200000000000000000000000000000000000000000000000000000000000000",
    1
  ],
  "solcInputHash": "46d00f656a071083dd336c7f8ad8ee59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockchainName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packageOwnershipManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistrar\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistrarNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistrar\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistrarNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"relayOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayOwnershipGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"}],\"name\":\"updateBlockchainName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"}],\"name\":\"updateBridgeChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeLink\",\"type\":\"address\"}],\"name\":\"updateBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"}],\"name\":\"updatePackageOwnershipManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateRelayOwnershipGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol\":\"OwnershipBridgeLinkMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/versioning/PackageOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\nimport \\\"./bridges/interfaces/IOwnershipBridgeLink.sol\\\";\\nimport \\\"./domain-registries/interfaces/IDomainRegistryLink.sol\\\";\\n\\ncontract PackageOwnershipManager is OwnableUpgradeable {\\n  address public registry;\\n\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  mapping(bytes32 => bool) public allowedLocalDomainRegistries;\\n  mapping(bytes32 => address) public incomingBridgeLinks;\\n  mapping(bytes32 => address) public outgoingBridgeLinks;\\n\\n  constructor(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) {\\n    initialize(_registry, _domainRegistries, _domainRegistryLinks);\\n  }\\n\\n  function initialize(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n  function updateRegistry(address _registry) public {\\n    registry = _registry;\\n  }\\n\\n  function updateLocalDomainRegistryPermission(\\n    bytes32 domainRegistry,\\n    bool allowed\\n  ) public onlyOwner {\\n    allowedLocalDomainRegistries[domainRegistry] = allowed;\\n  }\\n\\n  function updateIncomingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    incomingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function updateOutgoingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    outgoingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function connectDomainRegistryLink(\\n    bytes32 domainRegistry,\\n    address _domainRegistryLink\\n  ) public onlyOwner {\\n    domainRegistryLinks[domainRegistry] = _domainRegistryLink;\\n  }\\n\\n  function updateOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n  {\\n    require(\\n      allowedLocalDomainRegistries[domainRegistry],\\n      \\\"Domain registry is not allowed for local updates\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function relayOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode\\n  ) public {\\n    address bridgeLink = outgoingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Outgoing relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    IOwnershipBridgeLink(bridgeLink).relayOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address owner\\n  ) public {\\n    address bridgeLink = incomingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Incoming relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    assert(msg.sender == bridgeLink);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    require(\\n      domainRegistryLinkAddress != address(0),\\n      \\\"Domain registry is not supported\\\"\\n    );\\n\\n    return\\n      IDomainRegistryLink(domainRegistryLinkAddress).getPolywrapOwner(\\n        domainRegistryNode\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xfcb9f0d8f927b5b4c40b278f493f44de613f04c951e5dfbc471e60965906c9f8\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IOwnershipBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IOwnershipBridgeLink {\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea21d565c39c25979e93d9caf21aa4f976e8ead0946839e482b82f666e56f4\"},\"contracts/versioning/bridges/token-bridge/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITokenBridge {\\n  function requireToPassMessage(\\n    address _contract,\\n    bytes calldata _data,\\n    uint256 _gas\\n  ) external returns (bytes32);\\n\\n  function messageSender() external view returns (address);\\n\\n  function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f9503f07a46633b317c0a59e958d259f95e50bd1f3ebdc79bfbdcc7785ae53b\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/OwnershipBridgeLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../PackageOwnershipManager.sol\\\";\\nimport \\\"./ITokenBridge.sol\\\";\\nimport \\\"../interfaces/IOwnershipBridgeLink.sol\\\";\\n\\ncontract OwnershipBridgeLink is IOwnershipBridgeLink, OwnableUpgradeable {\\n  address public bridge;\\n  address public bridgeLink;\\n  address public packageOwnershipManager;\\n  bytes32 public blockchainName;\\n  bytes32 public bridgeChainId;\\n  uint256 public relayOwnershipGasLimit;\\n\\n  constructor(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  ) {\\n    initialize(\\n      _bridge,\\n      _packageOwnershipManager,\\n      _blockchainName,\\n      _bridgeChainId,\\n      _relayOwnershipGasLimit\\n    );\\n  }\\n\\n  function initialize(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    bridge = _bridge;\\n    packageOwnershipManager = _packageOwnershipManager;\\n    blockchainName = _blockchainName;\\n    bridgeChainId = _bridgeChainId;\\n    relayOwnershipGasLimit = _relayOwnershipGasLimit;\\n  }\\n\\n  function updateBridge(address _bridge) public onlyOwner {\\n    bridge = _bridge;\\n  }\\n\\n  function updateBridgeLink(address _bridgeLink) public onlyOwner {\\n    bridgeLink = _bridgeLink;\\n  }\\n\\n  function updatePackageOwnershipManager(address _packageOwnershipManager)\\n    public\\n    onlyOwner\\n  {\\n    packageOwnershipManager = _packageOwnershipManager;\\n  }\\n\\n  function updateBlockchainName(bytes32 _blockchainName) public onlyOwner {\\n    blockchainName = _blockchainName;\\n  }\\n\\n  function updateBridgeChainId(bytes32 _bridgeChainId) public onlyOwner {\\n    bridgeChainId = _bridgeChainId;\\n  }\\n\\n  function updateRelayOwnershipGasLimit(uint256 _relayOwnershipGasLimit)\\n    public\\n    onlyOwner\\n  {\\n    relayOwnershipGasLimit = _relayOwnershipGasLimit;\\n  }\\n\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == packageOwnershipManager);\\n\\n    bytes4 methodSelector = IOwnershipBridgeLink(address(0))\\n      .receiveOwnership\\n      .selector;\\n    bytes memory data = abi.encodeWithSelector(\\n      methodSelector,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n    ITokenBridge(bridge).requireToPassMessage(\\n      bridgeLink,\\n      data,\\n      relayOwnershipGasLimit\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == bridge);\\n\\n    ITokenBridge bridgeContract = ITokenBridge(bridge);\\n    assert(bridgeContract.messageSender() == bridgeLink);\\n    assert(bridgeContract.messageSourceChainId() == bridgeChainId);\\n\\n    PackageOwnershipManager(packageOwnershipManager).receiveOwnership(\\n      blockchainName,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc692e798f303cf242ebc5e4b2e3d19efcf79e9d131c2af17ea3f7c12408d9f10\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../../PackageOwnershipManager.sol\\\";\\nimport \\\"../ITokenBridge.sol\\\";\\nimport \\\"../OwnershipBridgeLink.sol\\\";\\n\\ncontract OwnershipBridgeLinkMock is OwnershipBridgeLink {\\n  constructor(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  )\\n    OwnershipBridgeLink(\\n      _bridge,\\n      _packageOwnershipManager,\\n      _blockchainName,\\n      _bridgeChainId,\\n      _relayOwnershipGasLimit\\n    )\\n  {}\\n\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == packageOwnershipManager);\\n\\n    OwnershipBridgeLink(bridgeLink).receiveOwnership(\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == bridgeLink);\\n\\n    PackageOwnershipManager(packageOwnershipManager).receiveOwnership(\\n      blockchainName,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x3a643939ddf2b9e5a4f538c1465e7a89c80c4383819ec09cb9c0781a75f0366f\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001cc638038062001cc68339818101604052810190620000379190620005dc565b84848484846200005185858585856200006160201b60201c565b505050505050505050506200079d565b600060019054906101000a900460ff168062000088575060008054906101000a900460ff16155b620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000685565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200011b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200012b620001ec60201b60201c565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015620001e45760008060016101000a81548160ff0219169083151502179055505b505050505050565b600060019054906101000a900460ff168062000213575060008054906101000a900460ff16155b62000255576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024c9062000685565b60405180910390fd5b60008060019054906101000a900460ff161590508015620002a6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620002b6620002eb60201b60201c565b620002c6620003ca60201b60201c565b8015620002e85760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000312575060008054906101000a900460ff16155b62000354576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034b9062000685565b60405180910390fd5b60008060019054906101000a900460ff161590508015620003a5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620003c75760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003f1575060008054906101000a900460ff16155b62000433576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200042a9062000685565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000484576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620004a462000498620004c960201b60201c565b620004d160201b60201c565b8015620004c65760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620005a8816200074f565b92915050565b600081519050620005bf8162000769565b92915050565b600081519050620005d68162000783565b92915050565b600080600080600060a08688031215620005f557600080fd5b6000620006058882890162000597565b9550506020620006188882890162000597565b94505060406200062b88828901620005ae565b93505060606200063e88828901620005ae565b92505060806200065188828901620005c5565b9150509295509295909350565b60006200066d602e83620006a7565b91506200067a8262000700565b604082019050919050565b60006020820190508181036000830152620006a0816200065e565b9050919050565b600082825260208201905092915050565b6000620006c582620006d6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6200075a81620006b8565b81146200076657600080fd5b50565b6200077481620006cc565b81146200078057600080fd5b50565b6200078e81620006f6565b81146200079a57600080fd5b50565b61151980620007ad6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063d788018111610071578063d788018114610281578063e78cea921461029d578063ec9f4e5c146102bb578063f2fde38b146102d7578063fbe972d8146102f357610116565b80638da5cb5b1461020b578063c97a51bd14610229578063cef79e2414610245578063cf9cdb251461026357610116565b80636eb38212116100e95780636eb382121461018d578063715018a6146101a957806372576767146101b357806373e7d117146101d157806375ec7627146101ef57610116565b80630d9f552e1461011b5780634c8d9af1146101375780635310b5611461015557806354576c2614610171575b600080fd5b6101356004803603810190610130919061107c565b61030f565b005b61013f6103cf565b60405161014c9190611253565b60405180910390f35b61016f600480360381019061016a9190611145565b6103f5565b005b61018b6004803603810190610186919061111c565b610513565b005b6101a760048036038101906101a2919061107c565b610599565b005b6101b1610659565b005b6101bb6106e1565b6040516101c8919061126e565b60405180910390f35b6101d96106e7565b6040516101e69190611365565b60405180910390f35b61020960048036038101906102049190611194565b6106ed565b005b610213610773565b6040516102209190611253565b60405180910390f35b610243600480360381019061023e919061111c565b61079d565b005b61024d610823565b60405161025a9190611253565b60405180910390f35b61026b610849565b604051610278919061126e565b60405180910390f35b61029b60048036038101906102969190611145565b61084f565b005b6102a5610969565b6040516102b29190611253565b60405180910390f35b6102d560048036038101906102d091906110a5565b61098f565b005b6102f160048036038101906102ec919061107c565b610b0c565b005b61030d6004803603810190610308919061107c565b610c04565b005b610317610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610335610773565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611345565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7da1cd66068548585856040518563ffffffff1660e01b81526004016104dc94939291906112c0565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b50505050505050565b61051b610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610539610773565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690611345565b60405180910390fd5b8060688190555050565b6105a1610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105bf610773565b73ffffffffffffffffffffffffffffffffffffffff1614610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611345565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610661610cc4565b73ffffffffffffffffffffffffffffffffffffffff1661067f610773565b73ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90611345565b60405180910390fd5b6106df6000610ccc565b565b60685481565b606a5481565b6106f5610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610713610773565b73ffffffffffffffffffffffffffffffffffffffff1614610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611345565b60405180910390fd5b80606a8190555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107a5610cc4565b73ffffffffffffffffffffffffffffffffffffffff166107c3610773565b73ffffffffffffffffffffffffffffffffffffffff1614610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090611345565b60405180910390fd5b8060698190555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635310b5618484846040518463ffffffff1660e01b815260040161093293929190611289565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b50505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806109b5575060008054906101000a900460ff16155b6109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610a44576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a4c610d92565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015610b045760008060016101000a81548160ff0219169083151502179055505b505050505050565b610b14610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610b32610773565b73ffffffffffffffffffffffffffffffffffffffff1614610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f90611345565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef90611305565b60405180910390fd5b610c0181610ccc565b50565b610c0c610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610c2a610773565b73ffffffffffffffffffffffffffffffffffffffff1614610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790611345565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610db8575060008054906101000a900460ff16155b610df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dee90611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e47576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e4f610e7b565b610e57610f54565b8015610e785760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610ea1575060008054906101000a900460ff16155b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f30576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f515760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f7a575060008054906101000a900460ff16155b610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015611009576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611019611014610cc4565b610ccc565b801561103a5760008060016101000a81548160ff0219169083151502179055505b50565b60008135905061104c8161149e565b92915050565b600081359050611061816114b5565b92915050565b600081359050611076816114cc565b92915050565b60006020828403121561108e57600080fd5b600061109c8482850161103d565b91505092915050565b600080600080600060a086880312156110bd57600080fd5b60006110cb8882890161103d565b95505060206110dc8882890161103d565b94505060406110ed88828901611052565b93505060606110fe88828901611052565b925050608061110f88828901611067565b9150509295509295909350565b60006020828403121561112e57600080fd5b600061113c84828501611052565b91505092915050565b60008060006060848603121561115a57600080fd5b600061116886828701611052565b935050602061117986828701611052565b925050604061118a8682870161103d565b9150509250925092565b6000602082840312156111a657600080fd5b60006111b484828501611067565b91505092915050565b6111c681611391565b82525050565b6111d5816113a3565b82525050565b60006111e8602683611380565b91506111f3826113d7565b604082019050919050565b600061120b602e83611380565b915061121682611426565b604082019050919050565b600061122e602083611380565b915061123982611475565b602082019050919050565b61124d816113cd565b82525050565b600060208201905061126860008301846111bd565b92915050565b600060208201905061128360008301846111cc565b92915050565b600060608201905061129e60008301866111cc565b6112ab60208301856111cc565b6112b860408301846111bd565b949350505050565b60006080820190506112d560008301876111cc565b6112e260208301866111cc565b6112ef60408301856111cc565b6112fc60608301846111bd565b95945050505050565b6000602082019050818103600083015261131e816111db565b9050919050565b6000602082019050818103600083015261133e816111fe565b9050919050565b6000602082019050818103600083015261135e81611221565b9050919050565b600060208201905061137a6000830184611244565b92915050565b600082825260208201905092915050565b600061139c826113ad565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6114a781611391565b81146114b257600080fd5b50565b6114be816113a3565b81146114c957600080fd5b50565b6114d5816113cd565b81146114e057600080fd5b5056fea2646970667358221220200126c268d7cc23ae8ff1716fda60f54f02370efcc66de6bfeb23f91d8d049564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063d788018111610071578063d788018114610281578063e78cea921461029d578063ec9f4e5c146102bb578063f2fde38b146102d7578063fbe972d8146102f357610116565b80638da5cb5b1461020b578063c97a51bd14610229578063cef79e2414610245578063cf9cdb251461026357610116565b80636eb38212116100e95780636eb382121461018d578063715018a6146101a957806372576767146101b357806373e7d117146101d157806375ec7627146101ef57610116565b80630d9f552e1461011b5780634c8d9af1146101375780635310b5611461015557806354576c2614610171575b600080fd5b6101356004803603810190610130919061107c565b61030f565b005b61013f6103cf565b60405161014c9190611253565b60405180910390f35b61016f600480360381019061016a9190611145565b6103f5565b005b61018b6004803603810190610186919061111c565b610513565b005b6101a760048036038101906101a2919061107c565b610599565b005b6101b1610659565b005b6101bb6106e1565b6040516101c8919061126e565b60405180910390f35b6101d96106e7565b6040516101e69190611365565b60405180910390f35b61020960048036038101906102049190611194565b6106ed565b005b610213610773565b6040516102209190611253565b60405180910390f35b610243600480360381019061023e919061111c565b61079d565b005b61024d610823565b60405161025a9190611253565b60405180910390f35b61026b610849565b604051610278919061126e565b60405180910390f35b61029b60048036038101906102969190611145565b61084f565b005b6102a5610969565b6040516102b29190611253565b60405180910390f35b6102d560048036038101906102d091906110a5565b61098f565b005b6102f160048036038101906102ec919061107c565b610b0c565b005b61030d6004803603810190610308919061107c565b610c04565b005b610317610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610335610773565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611345565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7da1cd66068548585856040518563ffffffff1660e01b81526004016104dc94939291906112c0565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b50505050505050565b61051b610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610539610773565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690611345565b60405180910390fd5b8060688190555050565b6105a1610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105bf610773565b73ffffffffffffffffffffffffffffffffffffffff1614610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611345565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610661610cc4565b73ffffffffffffffffffffffffffffffffffffffff1661067f610773565b73ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90611345565b60405180910390fd5b6106df6000610ccc565b565b60685481565b606a5481565b6106f5610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610713610773565b73ffffffffffffffffffffffffffffffffffffffff1614610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611345565b60405180910390fd5b80606a8190555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107a5610cc4565b73ffffffffffffffffffffffffffffffffffffffff166107c3610773565b73ffffffffffffffffffffffffffffffffffffffff1614610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090611345565b60405180910390fd5b8060698190555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635310b5618484846040518463ffffffff1660e01b815260040161093293929190611289565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b50505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806109b5575060008054906101000a900460ff16155b6109f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109eb90611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610a44576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a4c610d92565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015610b045760008060016101000a81548160ff0219169083151502179055505b505050505050565b610b14610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610b32610773565b73ffffffffffffffffffffffffffffffffffffffff1614610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f90611345565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef90611305565b60405180910390fd5b610c0181610ccc565b50565b610c0c610cc4565b73ffffffffffffffffffffffffffffffffffffffff16610c2a610773565b73ffffffffffffffffffffffffffffffffffffffff1614610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790611345565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610db8575060008054906101000a900460ff16155b610df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dee90611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e47576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e4f610e7b565b610e57610f54565b8015610e785760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610ea1575060008054906101000a900460ff16155b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f30576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f515760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f7a575060008054906101000a900460ff16155b610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090611325565b60405180910390fd5b60008060019054906101000a900460ff161590508015611009576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611019611014610cc4565b610ccc565b801561103a5760008060016101000a81548160ff0219169083151502179055505b50565b60008135905061104c8161149e565b92915050565b600081359050611061816114b5565b92915050565b600081359050611076816114cc565b92915050565b60006020828403121561108e57600080fd5b600061109c8482850161103d565b91505092915050565b600080600080600060a086880312156110bd57600080fd5b60006110cb8882890161103d565b95505060206110dc8882890161103d565b94505060406110ed88828901611052565b93505060606110fe88828901611052565b925050608061110f88828901611067565b9150509295509295909350565b60006020828403121561112e57600080fd5b600061113c84828501611052565b91505092915050565b60008060006060848603121561115a57600080fd5b600061116886828701611052565b935050602061117986828701611052565b925050604061118a8682870161103d565b9150509250925092565b6000602082840312156111a657600080fd5b60006111b484828501611067565b91505092915050565b6111c681611391565b82525050565b6111d5816113a3565b82525050565b60006111e8602683611380565b91506111f3826113d7565b604082019050919050565b600061120b602e83611380565b915061121682611426565b604082019050919050565b600061122e602083611380565b915061123982611475565b602082019050919050565b61124d816113cd565b82525050565b600060208201905061126860008301846111bd565b92915050565b600060208201905061128360008301846111cc565b92915050565b600060608201905061129e60008301866111cc565b6112ab60208301856111cc565b6112b860408301846111bd565b949350505050565b60006080820190506112d560008301876111cc565b6112e260208301866111cc565b6112ef60408301856111cc565b6112fc60608301846111bd565b95945050505050565b6000602082019050818103600083015261131e816111db565b9050919050565b6000602082019050818103600083015261133e816111fe565b9050919050565b6000602082019050818103600083015261135e81611221565b9050919050565b600060208201905061137a6000830184611244565b92915050565b600082825260208201905092915050565b600061139c826113ad565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6114a781611391565b81146114b257600080fd5b50565b6114be816113a3565b81146114c957600080fd5b50565b6114d5816113cd565b81146114e057600080fd5b5056fea2646970667358221220200126c268d7cc23ae8ff1716fda60f54f02370efcc66de6bfeb23f91d8d049564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5319,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5322,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5402,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5312,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9781,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridge",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 9783,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridgeLink",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9785,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "packageOwnershipManager",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 9787,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "blockchainName",
        "offset": 0,
        "slot": "104",
        "type": "t_bytes32"
      },
      {
        "astId": 9789,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridgeChainId",
        "offset": 0,
        "slot": "105",
        "type": "t_bytes32"
      },
      {
        "astId": 9791,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "relayOwnershipGasLimit",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}