{
  "address": "0x2B502ab6F783c2Ae96A75dc68cf82a77ce2637c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blockchainName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeChainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeLink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "packageOwnershipManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistrar",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistrarNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "receiveOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistrar",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistrarNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "relayOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayOwnershipGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_blockchainName",
          "type": "bytes32"
        }
      ],
      "name": "updateBlockchainName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bridgeChainId",
          "type": "bytes32"
        }
      ],
      "name": "updateBridgeChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_packageOwnershipManager",
          "type": "address"
        }
      ],
      "name": "updatePackageOwnershipManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_relayOwnershipGasLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRelayOwnershipGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf78aaa016d9a2df9c7f50b410244be113be299c6e4118b7983053cdf49ee582e",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0x2B502ab6F783c2Ae96A75dc68cf82a77ce2637c2",
    "transactionIndex": 0,
    "gasUsed": "1448455",
    "logsBloom": "0x
    "blockHash": "0x7b3e932663b8a8cf3366f5bc4f83bf5caf28d8b19f07917d844a59f35f615516",
    "transactionHash": "0xf78aaa016d9a2df9c7f50b410244be113be299c6e4118b7983053cdf49ee582e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23,
        "transactionHash": "0xf78aaa016d9a2df9c7f50b410244be113be299c6e4118b7983053cdf49ee582e",
        "address": "0x2B502ab6F783c2Ae96A75dc68cf82a77ce2637c2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7b3e932663b8a8cf3366f5bc4f83bf5caf28d8b19f07917d844a59f35f615516"
      }
    ],
    "blockNumber": 23,
    "cumulativeGasUsed": "1448455",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x7CFcab66e05eE8b752907200e3c14836210c437c",
    "0x6c312d636861696e2d6e616d6500000000000000000000000000000000000000",
    "0x3100000000000000000000000000000000000000000000000000000000000000",
    1
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockchainName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeChainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packageOwnershipManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistrar\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistrarNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistrar\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistrarNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"relayOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayOwnershipGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blockchainName\",\"type\":\"bytes32\"}],\"name\":\"updateBlockchainName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeChainId\",\"type\":\"bytes32\"}],\"name\":\"updateBridgeChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeLink\",\"type\":\"address\"}],\"name\":\"updateBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_packageOwnershipManager\",\"type\":\"address\"}],\"name\":\"updatePackageOwnershipManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relayOwnershipGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateRelayOwnershipGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol\":\"OwnershipBridgeLinkMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/PackageOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\nimport \\\"./bridges/interfaces/IOwnershipBridgeLink.sol\\\";\\nimport \\\"./domain-registries/interfaces/IDomainRegistryLink.sol\\\";\\n\\ncontract PackageOwnershipManager is OwnableUpgradeable {\\n  address public registry;\\n\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  mapping(bytes32 => bool) public allowedLocalDomainRegistries;\\n  mapping(bytes32 => address) public incomingBridgeLinks;\\n  mapping(bytes32 => address) public outgoingBridgeLinks;\\n\\n  constructor(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) {\\n    initialize(_registry, _domainRegistries, _domainRegistryLinks);\\n  }\\n\\n  function initialize(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n  function updateRegistry(address _registry) public {\\n    registry = _registry;\\n  }\\n\\n  function updateLocalDomainRegistryPermission(\\n    bytes32 domainRegistry,\\n    bool allowed\\n  ) public onlyOwner {\\n    allowedLocalDomainRegistries[domainRegistry] = allowed;\\n  }\\n\\n  function updateIncomingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    incomingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function updateOutgoingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    outgoingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function connectDomainRegistryLink(\\n    bytes32 domainRegistry,\\n    address _domainRegistryLink\\n  ) public onlyOwner {\\n    domainRegistryLinks[domainRegistry] = _domainRegistryLink;\\n  }\\n\\n  function updateOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n  {\\n    require(\\n      allowedLocalDomainRegistries[domainRegistry],\\n      \\\"Domain registry is not allowed for local updates\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function relayOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode\\n  ) public {\\n    address bridgeLink = outgoingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Outgoing relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    IOwnershipBridgeLink(bridgeLink).relayOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address owner\\n  ) public {\\n    address bridgeLink = incomingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Incoming relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    assert(msg.sender == bridgeLink);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    require(\\n      domainRegistryLinkAddress != address(0),\\n      \\\"Domain registry is not supported\\\"\\n    );\\n\\n    return\\n      IDomainRegistryLink(domainRegistryLinkAddress).getPolywrapOwner(\\n        domainRegistryNode\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xfcb9f0d8f927b5b4c40b278f493f44de613f04c951e5dfbc471e60965906c9f8\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IOwnershipBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IOwnershipBridgeLink {\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea21d565c39c25979e93d9caf21aa4f976e8ead0946839e482b82f666e56f4\"},\"contracts/versioning/bridges/token-bridge/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITokenBridge {\\n  function requireToPassMessage(\\n    address _contract,\\n    bytes calldata _data,\\n    uint256 _gas\\n  ) external returns (bytes32);\\n\\n  function messageSender() external view returns (address);\\n\\n  function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f9503f07a46633b317c0a59e958d259f95e50bd1f3ebdc79bfbdcc7785ae53b\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/OwnershipBridgeLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../PackageOwnershipManager.sol\\\";\\nimport \\\"./ITokenBridge.sol\\\";\\nimport \\\"../interfaces/IOwnershipBridgeLink.sol\\\";\\n\\ncontract OwnershipBridgeLink is IOwnershipBridgeLink, OwnableUpgradeable {\\n  address public bridge;\\n  address public bridgeLink;\\n  address public packageOwnershipManager;\\n  bytes32 public blockchainName;\\n  bytes32 public bridgeChainId;\\n  uint256 public relayOwnershipGasLimit;\\n\\n  constructor(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  ) {\\n    initialize(\\n      _bridge,\\n      _packageOwnershipManager,\\n      _blockchainName,\\n      _bridgeChainId,\\n      _relayOwnershipGasLimit\\n    );\\n  }\\n\\n  function initialize(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    bridge = _bridge;\\n    packageOwnershipManager = _packageOwnershipManager;\\n    blockchainName = _blockchainName;\\n    bridgeChainId = _bridgeChainId;\\n    relayOwnershipGasLimit = _relayOwnershipGasLimit;\\n  }\\n\\n  function updateBridge(address _bridge) public onlyOwner {\\n    bridge = _bridge;\\n  }\\n\\n  function updateBridgeLink(address _bridgeLink) public onlyOwner {\\n    bridgeLink = _bridgeLink;\\n  }\\n\\n  function updatePackageOwnershipManager(address _packageOwnershipManager)\\n    public\\n    onlyOwner\\n  {\\n    packageOwnershipManager = _packageOwnershipManager;\\n  }\\n\\n  function updateBlockchainName(bytes32 _blockchainName) public onlyOwner {\\n    blockchainName = _blockchainName;\\n  }\\n\\n  function updateBridgeChainId(bytes32 _bridgeChainId) public onlyOwner {\\n    bridgeChainId = _bridgeChainId;\\n  }\\n\\n  function updateRelayOwnershipGasLimit(uint256 _relayOwnershipGasLimit)\\n    public\\n    onlyOwner\\n  {\\n    relayOwnershipGasLimit = _relayOwnershipGasLimit;\\n  }\\n\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == packageOwnershipManager);\\n\\n    bytes4 methodSelector = IOwnershipBridgeLink(address(0))\\n      .receiveOwnership\\n      .selector;\\n    bytes memory data = abi.encodeWithSelector(\\n      methodSelector,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n    ITokenBridge(bridge).requireToPassMessage(\\n      bridgeLink,\\n      data,\\n      relayOwnershipGasLimit\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == bridge);\\n\\n    ITokenBridge bridgeContract = ITokenBridge(bridge);\\n    assert(bridgeContract.messageSender() == bridgeLink);\\n    assert(bridgeContract.messageSourceChainId() == bridgeChainId);\\n\\n    PackageOwnershipManager(packageOwnershipManager).receiveOwnership(\\n      blockchainName,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc692e798f303cf242ebc5e4b2e3d19efcf79e9d131c2af17ea3f7c12408d9f10\",\"license\":\"MIT\"},\"contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../../PackageOwnershipManager.sol\\\";\\nimport \\\"../ITokenBridge.sol\\\";\\nimport \\\"../OwnershipBridgeLink.sol\\\";\\n\\ncontract OwnershipBridgeLinkMock is OwnershipBridgeLink {\\n  constructor(\\n    address _bridge,\\n    address _packageOwnershipManager,\\n    bytes32 _blockchainName,\\n    bytes32 _bridgeChainId,\\n    uint256 _relayOwnershipGasLimit\\n  )\\n    OwnershipBridgeLink(\\n      _bridge,\\n      _packageOwnershipManager,\\n      _blockchainName,\\n      _bridgeChainId,\\n      _relayOwnershipGasLimit\\n    )\\n  {}\\n\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == packageOwnershipManager);\\n\\n    OwnershipBridgeLink(bridgeLink).receiveOwnership(\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) public virtual override {\\n    assert(msg.sender == bridgeLink);\\n\\n    PackageOwnershipManager(packageOwnershipManager).receiveOwnership(\\n      blockchainName,\\n      domainRegistrar,\\n      domainRegistrarNode,\\n      owner\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x3a643939ddf2b9e5a4f538c1465e7a89c80c4383819ec09cb9c0781a75f0366f\",\"license\":\"MIT\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dcd38038062001dcd8339818101604052810190620000379190620005a7565b84848484846200005185858585856200006160201b60201c565b5050505050505050505062000768565b600060019054906101000a900460ff168062000088575060008054906101000a900460ff16155b620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c19062000650565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200011b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200012b620001ec60201b60201c565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015620001e45760008060016101000a81548160ff0219169083151502179055505b505050505050565b600060019054906101000a900460ff168062000213575060008054906101000a900460ff16155b62000255576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024c9062000650565b60405180910390fd5b60008060019054906101000a900460ff161590508015620002a6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620002b6620002eb60201b60201c565b620002c6620003ca60201b60201c565b8015620002e85760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000312575060008054906101000a900460ff16155b62000354576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034b9062000650565b60405180910390fd5b60008060019054906101000a900460ff161590508015620003a5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620003c75760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003f1575060008054906101000a900460ff16155b62000433576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200042a9062000650565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000484576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000620004966200055a60201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620005575760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b60008151905062000573816200071a565b92915050565b6000815190506200058a8162000734565b92915050565b600081519050620005a1816200074e565b92915050565b600080600080600060a08688031215620005c057600080fd5b6000620005d08882890162000562565b9550506020620005e38882890162000562565b9450506040620005f68882890162000579565b9350506060620006098882890162000579565b92505060806200061c8882890162000590565b9150509295509295909350565b600062000638602e8362000672565b91506200064582620006cb565b604082019050919050565b600060208201905081810360008301526200066b8162000629565b9050919050565b600082825260208201905092915050565b60006200069082620006a1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b620007258162000683565b81146200073157600080fd5b50565b6200073f8162000697565b81146200074b57600080fd5b50565b6200075981620006c1565b81146200076557600080fd5b50565b61165580620007786000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063d788018111610071578063d788018114610281578063e78cea921461029d578063ec9f4e5c146102bb578063f2fde38b146102d7578063fbe972d8146102f357610116565b80638da5cb5b1461020b578063c97a51bd14610229578063cef79e2414610245578063cf9cdb251461026357610116565b80636eb38212116100e95780636eb382121461018d578063715018a6146101a957806372576767146101b357806373e7d117146101d157806375ec7627146101ef57610116565b80630d9f552e1461011b5780634c8d9af1146101375780635310b5611461015557806354576c2614610171575b600080fd5b610135600480360381019061013091906111b8565b61030f565b005b61013f6103cf565b60405161014c919061138f565b60405180910390f35b61016f600480360381019061016a9190611281565b6103f5565b005b61018b60048036038101906101869190611258565b610513565b005b6101a760048036038101906101a291906111b8565b610599565b005b6101b1610659565b005b6101bb610796565b6040516101c891906113aa565b60405180910390f35b6101d961079c565b6040516101e691906114a1565b60405180910390f35b610209600480360381019061020491906112d0565b6107a2565b005b610213610828565b604051610220919061138f565b60405180910390f35b610243600480360381019061023e9190611258565b610852565b005b61024d6108d8565b60405161025a919061138f565b60405180910390f35b61026b6108fe565b60405161027891906113aa565b60405180910390f35b61029b60048036038101906102969190611281565b610904565b005b6102a5610a1e565b6040516102b2919061138f565b60405180910390f35b6102d560048036038101906102d091906111e1565b610a44565b005b6102f160048036038101906102ec91906111b8565b610bc1565b005b61030d600480360381019061030891906111b8565b610d6d565b005b610317610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610335610828565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611481565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7da1cd66068548585856040518563ffffffff1660e01b81526004016104dc94939291906113fc565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b50505050505050565b61051b610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610539610828565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690611481565b60405180910390fd5b8060688190555050565b6105a1610e2d565b73ffffffffffffffffffffffffffffffffffffffff166105bf610828565b73ffffffffffffffffffffffffffffffffffffffff1614610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611481565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610661610e2d565b73ffffffffffffffffffffffffffffffffffffffff1661067f610828565b73ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90611481565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60685481565b606a5481565b6107aa610e2d565b73ffffffffffffffffffffffffffffffffffffffff166107c8610828565b73ffffffffffffffffffffffffffffffffffffffff161461081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590611481565b60405180910390fd5b80606a8190555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61085a610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610878610828565b73ffffffffffffffffffffffffffffffffffffffff16146108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590611481565b60405180910390fd5b8060698190555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610988577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635310b5618484846040518463ffffffff1660e01b81526004016109e7939291906113c5565b600060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b50505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610a6a575060008054906101000a900460ff16155b610aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa090611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610af9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b01610e35565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015610bb95760008060016101000a81548160ff0219169083151502179055505b505050505050565b610bc9610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610be7610828565b73ffffffffffffffffffffffffffffffffffffffff1614610c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3490611481565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490611441565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610d75610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610d93610828565b73ffffffffffffffffffffffffffffffffffffffff1614610de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090611481565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610e5b575060008054906101000a900460ff16155b610e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9190611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610eea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ef2610f1e565b610efa610ff7565b8015610f1b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f44575060008054906101000a900460ff16155b610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fd3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610ff45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061101d575060008054906101000a900460ff16155b61105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390611461565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110ac576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006110b6610e2d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156111765760008060016101000a81548160ff0219169083151502179055505b50565b600081359050611188816115da565b92915050565b60008135905061119d816115f1565b92915050565b6000813590506111b281611608565b92915050565b6000602082840312156111ca57600080fd5b60006111d884828501611179565b91505092915050565b600080600080600060a086880312156111f957600080fd5b600061120788828901611179565b955050602061121888828901611179565b94505060406112298882890161118e565b935050606061123a8882890161118e565b925050608061124b888289016111a3565b9150509295509295909350565b60006020828403121561126a57600080fd5b60006112788482850161118e565b91505092915050565b60008060006060848603121561129657600080fd5b60006112a48682870161118e565b93505060206112b58682870161118e565b92505060406112c686828701611179565b9150509250925092565b6000602082840312156112e257600080fd5b60006112f0848285016111a3565b91505092915050565b611302816114cd565b82525050565b611311816114df565b82525050565b60006113246026836114bc565b915061132f82611513565b604082019050919050565b6000611347602e836114bc565b915061135282611562565b604082019050919050565b600061136a6020836114bc565b9150611375826115b1565b602082019050919050565b61138981611509565b82525050565b60006020820190506113a460008301846112f9565b92915050565b60006020820190506113bf6000830184611308565b92915050565b60006060820190506113da6000830186611308565b6113e76020830185611308565b6113f460408301846112f9565b949350505050565b60006080820190506114116000830187611308565b61141e6020830186611308565b61142b6040830185611308565b61143860608301846112f9565b95945050505050565b6000602082019050818103600083015261145a81611317565b9050919050565b6000602082019050818103600083015261147a8161133a565b9050919050565b6000602082019050818103600083015261149a8161135d565b9050919050565b60006020820190506114b66000830184611380565b92915050565b600082825260208201905092915050565b60006114d8826114e9565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6115e3816114cd565b81146115ee57600080fd5b50565b6115fa816114df565b811461160557600080fd5b50565b61161181611509565b811461161c57600080fd5b5056fea2646970667358221220a0e97599d88ffed20d8268a017b07984c58c70dd7f8c125ebf5ee4c4e035133464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063d788018111610071578063d788018114610281578063e78cea921461029d578063ec9f4e5c146102bb578063f2fde38b146102d7578063fbe972d8146102f357610116565b80638da5cb5b1461020b578063c97a51bd14610229578063cef79e2414610245578063cf9cdb251461026357610116565b80636eb38212116100e95780636eb382121461018d578063715018a6146101a957806372576767146101b357806373e7d117146101d157806375ec7627146101ef57610116565b80630d9f552e1461011b5780634c8d9af1146101375780635310b5611461015557806354576c2614610171575b600080fd5b610135600480360381019061013091906111b8565b61030f565b005b61013f6103cf565b60405161014c919061138f565b60405180910390f35b61016f600480360381019061016a9190611281565b6103f5565b005b61018b60048036038101906101869190611258565b610513565b005b6101a760048036038101906101a291906111b8565b610599565b005b6101b1610659565b005b6101bb610796565b6040516101c891906113aa565b60405180910390f35b6101d961079c565b6040516101e691906114a1565b60405180910390f35b610209600480360381019061020491906112d0565b6107a2565b005b610213610828565b604051610220919061138f565b60405180910390f35b610243600480360381019061023e9190611258565b610852565b005b61024d6108d8565b60405161025a919061138f565b60405180910390f35b61026b6108fe565b60405161027891906113aa565b60405180910390f35b61029b60048036038101906102969190611281565b610904565b005b6102a5610a1e565b6040516102b2919061138f565b60405180910390f35b6102d560048036038101906102d091906111e1565b610a44565b005b6102f160048036038101906102ec91906111b8565b610bc1565b005b61030d600480360381019061030891906111b8565b610d6d565b005b610317610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610335610828565b73ffffffffffffffffffffffffffffffffffffffff161461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038290611481565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7da1cd66068548585856040518563ffffffff1660e01b81526004016104dc94939291906113fc565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b50505050505050565b61051b610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610539610828565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690611481565b60405180910390fd5b8060688190555050565b6105a1610e2d565b73ffffffffffffffffffffffffffffffffffffffff166105bf610828565b73ffffffffffffffffffffffffffffffffffffffff1614610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611481565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610661610e2d565b73ffffffffffffffffffffffffffffffffffffffff1661067f610828565b73ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90611481565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60685481565b606a5481565b6107aa610e2d565b73ffffffffffffffffffffffffffffffffffffffff166107c8610828565b73ffffffffffffffffffffffffffffffffffffffff161461081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590611481565b60405180910390fd5b80606a8190555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61085a610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610878610828565b73ffffffffffffffffffffffffffffffffffffffff16146108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590611481565b60405180910390fd5b8060698190555050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610988577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635310b5618484846040518463ffffffff1660e01b81526004016109e7939291906113c5565b600060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b50505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610a6a575060008054906101000a900460ff16155b610aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa090611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610af9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b01610e35565b85606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836068819055508260698190555081606a819055508015610bb95760008060016101000a81548160ff0219169083151502179055505b505050505050565b610bc9610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610be7610828565b73ffffffffffffffffffffffffffffffffffffffff1614610c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3490611481565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490611441565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610d75610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610d93610828565b73ffffffffffffffffffffffffffffffffffffffff1614610de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090611481565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610e5b575060008054906101000a900460ff16155b610e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9190611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610eea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ef2610f1e565b610efa610ff7565b8015610f1b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f44575060008054906101000a900460ff16155b610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90611461565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fd3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610ff45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061101d575060008054906101000a900460ff16155b61105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390611461565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110ac576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006110b6610e2d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156111765760008060016101000a81548160ff0219169083151502179055505b50565b600081359050611188816115da565b92915050565b60008135905061119d816115f1565b92915050565b6000813590506111b281611608565b92915050565b6000602082840312156111ca57600080fd5b60006111d884828501611179565b91505092915050565b600080600080600060a086880312156111f957600080fd5b600061120788828901611179565b955050602061121888828901611179565b94505060406112298882890161118e565b935050606061123a8882890161118e565b925050608061124b888289016111a3565b9150509295509295909350565b60006020828403121561126a57600080fd5b60006112788482850161118e565b91505092915050565b60008060006060848603121561129657600080fd5b60006112a48682870161118e565b93505060206112b58682870161118e565b92505060406112c686828701611179565b9150509250925092565b6000602082840312156112e257600080fd5b60006112f0848285016111a3565b91505092915050565b611302816114cd565b82525050565b611311816114df565b82525050565b60006113246026836114bc565b915061132f82611513565b604082019050919050565b6000611347602e836114bc565b915061135282611562565b604082019050919050565b600061136a6020836114bc565b9150611375826115b1565b602082019050919050565b61138981611509565b82525050565b60006020820190506113a460008301846112f9565b92915050565b60006020820190506113bf6000830184611308565b92915050565b60006060820190506113da6000830186611308565b6113e76020830185611308565b6113f460408301846112f9565b949350505050565b60006080820190506114116000830187611308565b61141e6020830186611308565b61142b6040830185611308565b61143860608301846112f9565b95945050505050565b6000602082019050818103600083015261145a81611317565b9050919050565b6000602082019050818103600083015261147a8161133a565b9050919050565b6000602082019050818103600083015261149a8161135d565b9050919050565b60006020820190506114b66000830184611380565b92915050565b600082825260208201905092915050565b60006114d8826114e9565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6115e3816114cd565b81146115ee57600080fd5b50565b6115fa816114df565b811461160557600080fd5b50565b61161181611509565b811461161c57600080fd5b5056fea2646970667358221220a0e97599d88ffed20d8268a017b07984c58c70dd7f8c125ebf5ee4c4e035133464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9956,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridge",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 9958,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridgeLink",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9960,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "packageOwnershipManager",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 9962,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "blockchainName",
        "offset": 0,
        "slot": "104",
        "type": "t_bytes32"
      },
      {
        "astId": 9964,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "bridgeChainId",
        "offset": 0,
        "slot": "105",
        "type": "t_bytes32"
      },
      {
        "astId": 9966,
        "contract": "contracts/versioning/bridges/token-bridge/mocks/OwnershipBridgeLinkMock.sol:OwnershipBridgeLinkMock",
        "label": "relayOwnershipGasLimit",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
