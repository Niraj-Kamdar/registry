{
  "address": "0x24C17bf9Af7A0e372D8B3571dBa12C216Bc44E42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "addManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "ownerOrManager",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "managers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "packageLocation",
          "type": "string"
        }
      ],
      "name": "proposeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "removeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingMachine",
          "type": "address"
        }
      ],
      "name": "updateVotingMachine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingMachine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbedc2c48a2c5530fd6e3b9f0e9c9fb50c51f396da9edaa85aa5000d553d11983",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0x24C17bf9Af7A0e372D8B3571dBa12C216Bc44E42",
    "transactionIndex": 0,
    "gasUsed": "1402905",
    "logsBloom": "0x
    "blockHash": "0x9cf4760654b8efa028674f1894099457ca600839ebae6f7392acfc87ebb18aa1",
    "transactionHash": "0xbedc2c48a2c5530fd6e3b9f0e9c9fb50c51f396da9edaa85aa5000d553d11983",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0xbedc2c48a2c5530fd6e3b9f0e9c9fb50c51f396da9edaa85aa5000d553d11983",
        "address": "0x24C17bf9Af7A0e372D8B3571dBa12C216Bc44E42",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9cf4760654b8efa028674f1894099457ca600839ebae6f7392acfc87ebb18aa1"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "1402905",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98D669278F61BCC6a5c6c36b2F47b749364beA07"
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"ownerOrManager\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageLocation\",\"type\":\"string\"}],\"name\":\"proposeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingMachine\",\"type\":\"address\"}],\"name\":\"updateVotingMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingMachine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/registrar/PolywrapRegistrar.sol\":\"PolywrapRegistrar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/VotingMachine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./version-events-listeners/IVersionVerifiedListener.sol\\\";\\n\\ncontract VotingMachine is OwnableUpgradeable {\\n  event VersionProposed(\\n    bytes32 indexed packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string packageLocation,\\n    address proposer\\n  );\\n\\n  event VersionVotingStarted(\\n    bytes32 indexed packageId,\\n    bytes32 indexed patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string packageLocation,\\n    address proposer,\\n    bool isPatch\\n  );\\n\\n  event VersionVote(\\n    address indexed verifier,\\n    bytes32 indexed patchNodeId,\\n    bytes32 packageLocationHash,\\n    bool approved\\n  );\\n\\n  event VersionDecided(\\n    bytes32 indexed patchNodeId,\\n    bool indexed verified,\\n    bytes32 packageLocationHash\\n  );\\n\\n  struct ProposedVersion {\\n    address[] approvingVerifiers;\\n    address[] rejectingVerifiers;\\n    mapping(address => bool) votedVerifiers;\\n    bool decided;\\n    bool verified;\\n    bool votingStarted;\\n    bytes32 packageId;\\n    bytes32 majorNodeId;\\n    bytes32 minorNodeId;\\n    bytes32 patchNodeId;\\n    string packageLocation;\\n    uint256 majorVersion;\\n    uint256 minorVersion;\\n    uint256 patchVersion;\\n    address proposer;\\n  }\\n\\n  struct QueuedVersion {\\n    bytes32 nextQueuedVersionId;\\n    bytes32 patchNodeId;\\n  }\\n\\n  struct MajorVersionQueueContainer {\\n    bytes32 headVersionId;\\n    bytes32 tailVersionId;\\n    mapping(bytes32 => QueuedVersion) queuedVersions;\\n  }\\n\\n  struct VerifiedMajorVersion {\\n    bytes32 lowestMinorNodeId;\\n  }\\n\\n  struct VerifiedMinorVersion {\\n    uint256 versionNumber;\\n    bytes32 nextMinorNodeId;\\n    bytes32 prevMinorNodeId;\\n    bytes32 majorNodeId;\\n    bytes32 patchNodeId;\\n  }\\n\\n  struct Vote {\\n    bytes32 patchNodeId;\\n    bytes32 prevMinorNodeId;\\n    bytes32 nextMinorNodeId;\\n    bool approved;\\n  }\\n\\n  address public registrar;\\n  address public versionVerifiedListener;\\n\\n  mapping(bytes32 => MajorVersionQueueContainer)\\n    public majorVersionQueueContainers;\\n  mapping(bytes32 => ProposedVersion) public proposedVersions;\\n  mapping(bytes32 => VerifiedMinorVersion) public verifiedMinorVersions;\\n  mapping(bytes32 => VerifiedMajorVersion) public verifiedMajorVersions;\\n\\n  mapping(address => bool) public authorizedVerifiers;\\n  uint256 public authorizedVerifierCount;\\n\\n  constructor(address _registrar) {\\n    initialize(_registrar);\\n  }\\n\\n  function initialize(address _registrar) public initializer {\\n    __Ownable_init();\\n\\n    registrar = _registrar;\\n  }\\n\\n  function updateRegistrar(address _registrar) public onlyOwner {\\n    registrar = _registrar;\\n  }\\n\\n  function updateVersionVerifiedListener(address _versionVerifiedListener)\\n    public\\n    onlyOwner\\n  {\\n    versionVerifiedListener = _versionVerifiedListener;\\n  }\\n\\n  function authorizeVerifiers(address[] memory addresses) public onlyOwner {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      if (!authorizedVerifiers[addresses[i]]) {\\n        authorizedVerifiers[addresses[i]] = true;\\n        authorizedVerifierCount++;\\n      }\\n    }\\n  }\\n\\n  function unauthorizeVerifiers(address[] memory addresses) public onlyOwner {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      if (authorizedVerifiers[addresses[i]]) {\\n        authorizedVerifiers[addresses[i]] = false;\\n        authorizedVerifierCount--;\\n      }\\n    }\\n  }\\n\\n  function proposeVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string calldata packageLocation,\\n    address proposer\\n  ) public {\\n    assert(msg.sender == registrar);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    ProposedVersion storage proposedVersion = proposedVersions[patchNodeId];\\n\\n    require(proposedVersion.patchNodeId == 0x0, \\\"Version is already proposed\\\");\\n\\n    proposedVersion.packageId = packageId;\\n\\n    proposedVersion.majorNodeId = majorNodeId;\\n    proposedVersion.minorNodeId = minorNodeId;\\n    proposedVersion.patchNodeId = patchNodeId;\\n\\n    proposedVersion.majorVersion = majorVersion;\\n    proposedVersion.minorVersion = minorVersion;\\n    proposedVersion.patchVersion = patchVersion;\\n\\n    proposedVersion.packageLocation = packageLocation;\\n    proposedVersion.proposer = proposer;\\n\\n    MajorVersionQueueContainer\\n      storage majorVersionContainer = majorVersionQueueContainers[majorNodeId];\\n\\n    QueuedVersion storage queuedVersion = majorVersionContainer.queuedVersions[\\n      patchNodeId\\n    ];\\n\\n    queuedVersion.patchNodeId = patchNodeId;\\n\\n    if (majorVersionContainer.tailVersionId != 0x0) {\\n      //The queue is not empty\\n      QueuedVersion storage tailVersion = majorVersionContainer.queuedVersions[\\n        majorVersionContainer.tailVersionId\\n      ];\\n\\n      tailVersion.nextQueuedVersionId = patchNodeId;\\n      majorVersionContainer.tailVersionId = patchNodeId;\\n    } else {\\n      //The queue is empty\\n      majorVersionContainer.tailVersionId = patchNodeId;\\n      majorVersionContainer.headVersionId = patchNodeId;\\n\\n      //Since there is only one version in the queue, we can start voting for it\\n      startVersionVoting(proposedVersion);\\n    }\\n\\n    emit VersionProposed(\\n      packageId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      packageLocation,\\n      proposer\\n    );\\n  }\\n\\n  function vote(Vote[] memory votes) public {\\n    require(\\n      authorizedVerifiers[msg.sender],\\n      \\\"You are not an authorized verifier\\\"\\n    );\\n\\n    for (uint256 i = 0; i < votes.length; i++) {\\n      Vote memory vote = votes[i];\\n\\n      ProposedVersion storage proposedVersion = proposedVersions[\\n        vote.patchNodeId\\n      ];\\n\\n      requireCanVoteOnVersion(proposedVersion);\\n\\n      requireValidMinorVersionPlacement(\\n        vote.prevMinorNodeId,\\n        vote.nextMinorNodeId,\\n        proposedVersion.minorVersion,\\n        proposedVersion.majorNodeId,\\n        proposedVersion.minorNodeId\\n      );\\n\\n      proposedVersion.votedVerifiers[msg.sender] = true;\\n\\n      if (vote.approved) {\\n        proposedVersion.approvingVerifiers.push(msg.sender);\\n      } else {\\n        proposedVersion.rejectingVerifiers.push(msg.sender);\\n      }\\n\\n      if (\\n        proposedVersion.approvingVerifiers.length > authorizedVerifierCount / 2\\n      ) {\\n        //The version is verified\\n        proposedVersion.decided = true;\\n        proposedVersion.verified = true;\\n\\n        onVersionDecided(\\n          vote.prevMinorNodeId,\\n          vote.nextMinorNodeId,\\n          proposedVersion.minorVersion,\\n          proposedVersion.majorNodeId,\\n          proposedVersion.minorNodeId,\\n          vote.patchNodeId,\\n          proposedVersion.verified,\\n          proposedVersion.packageLocation\\n        );\\n      } else {\\n        //The version is rejected\\n        proposedVersion.decided = true;\\n        proposedVersion.verified = false;\\n\\n        onVersionDecided(\\n          vote.prevMinorNodeId,\\n          vote.nextMinorNodeId,\\n          proposedVersion.minorVersion,\\n          proposedVersion.majorNodeId,\\n          proposedVersion.minorNodeId,\\n          vote.patchNodeId,\\n          proposedVersion.verified,\\n          proposedVersion.packageLocation\\n        );\\n      }\\n\\n      emit VersionVote(\\n        msg.sender,\\n        proposedVersion.patchNodeId,\\n        keccak256(abi.encodePacked(proposedVersion.packageLocation)),\\n        vote.approved\\n      );\\n    }\\n  }\\n\\n  function requireCanVoteOnVersion(ProposedVersion storage proposedVersion)\\n    private\\n    view\\n  {\\n    require(proposedVersion.votingStarted, \\\"Voting has not started\\\");\\n    require(!proposedVersion.decided, \\\"Voting for this version has ended\\\");\\n    require(!proposedVersion.votedVerifiers[msg.sender], \\\"You already voted\\\");\\n  }\\n\\n  function requireValidMinorVersionPlacement(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId\\n  ) private view {\\n    VerifiedMinorVersion storage currentVersion = verifiedMinorVersions[\\n      minorNodeId\\n    ];\\n\\n    if (currentVersion.patchNodeId != 0x0) {\\n      //Minor version has at least one patch version verified and there's no need to keep track of multiple patch versions\\n      return;\\n    }\\n\\n    VerifiedMinorVersion storage prevVersion = verifiedMinorVersions[\\n      prevMinorNodeId\\n    ];\\n    VerifiedMinorVersion storage nextVersion = verifiedMinorVersions[\\n      nextMinorNodeId\\n    ];\\n\\n    //Verify the current version is between prev and next version\\n    if (prevVersion.patchNodeId != 0x0) {\\n      require(\\n        prevVersion.versionNumber < minorVersionNumber,\\n        \\\"Previous version number is not less than the current one\\\"\\n      );\\n      require(\\n        prevVersion.nextMinorNodeId == nextMinorNodeId,\\n        \\\"Previous version does not point to the next version\\\"\\n      );\\n      require(\\n        prevVersion.majorNodeId == majorNodeId,\\n        \\\"Previous version does not belong to the same major version\\\"\\n      );\\n    }\\n\\n    if (nextVersion.patchNodeId != 0x0) {\\n      require(\\n        minorVersionNumber < nextVersion.versionNumber,\\n        \\\"Next version number is not greater than the current one\\\"\\n      );\\n      require(\\n        nextVersion.prevMinorNodeId == prevMinorNodeId,\\n        \\\"Next version does not point to the previous version\\\"\\n      );\\n      require(\\n        nextVersion.majorNodeId == majorNodeId,\\n        \\\"Next version does not belong to the same major version\\\"\\n      );\\n    }\\n  }\\n\\n  function startVersionVoting(ProposedVersion storage proposedVersion) private {\\n    proposedVersion.votingStarted = true;\\n\\n    VerifiedMinorVersion memory minorVersion = verifiedMinorVersions[\\n      proposedVersion.minorNodeId\\n    ];\\n\\n    emit VersionVotingStarted(\\n      proposedVersion.packageId,\\n      proposedVersion.patchNodeId,\\n      proposedVersion.majorVersion,\\n      proposedVersion.minorVersion,\\n      proposedVersion.patchVersion,\\n      proposedVersion.packageLocation,\\n      proposedVersion.proposer,\\n      minorVersion.patchNodeId != 0x0\\n    );\\n  }\\n\\n  function addToVersionTree(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId,\\n    bytes32 patchNodeId\\n  ) private {\\n    VerifiedMinorVersion storage currentVersion = verifiedMinorVersions[\\n      minorNodeId\\n    ];\\n\\n    currentVersion.patchNodeId = patchNodeId;\\n    currentVersion.versionNumber = minorVersionNumber;\\n    currentVersion.majorNodeId = majorNodeId;\\n\\n    VerifiedMinorVersion storage prevVersion = verifiedMinorVersions[\\n      prevMinorNodeId\\n    ];\\n    VerifiedMinorVersion storage nextVersion = verifiedMinorVersions[\\n      nextMinorNodeId\\n    ];\\n\\n    //Insert into the linked list between prev and next version\\n\\n    if (prevVersion.patchNodeId != 0x0) {\\n      currentVersion.prevMinorNodeId = prevMinorNodeId;\\n      prevVersion.nextMinorNodeId = minorNodeId;\\n    }\\n\\n    if (nextVersion.patchNodeId != 0x0) {\\n      currentVersion.nextMinorNodeId = nextMinorNodeId;\\n      nextVersion.prevMinorNodeId = minorNodeId;\\n    }\\n\\n    if (prevVersion.patchNodeId == 0x0 && nextVersion.patchNodeId == 0x0) {}\\n  }\\n\\n  function onVersionDecided(\\n    bytes32 prevMinorNodeId,\\n    bytes32 nextMinorNodeId,\\n    uint256 minorVersionNumber,\\n    bytes32 majorNodeId,\\n    bytes32 minorNodeId,\\n    bytes32 patchNodeId,\\n    bool verified,\\n    string memory packageLocation\\n  ) private {\\n    bytes32 packageLocationHash = keccak256(abi.encodePacked(packageLocation));\\n\\n    if (verified) {\\n      addToVersionTree(\\n        prevMinorNodeId,\\n        nextMinorNodeId,\\n        minorVersionNumber,\\n        majorNodeId,\\n        minorNodeId,\\n        patchNodeId\\n      );\\n\\n      if (versionVerifiedListener != address(0)) {\\n        IVersionVerifiedListener listener = IVersionVerifiedListener(\\n          versionVerifiedListener\\n        );\\n\\n        listener.onVersionVerified(patchNodeId, packageLocationHash);\\n      }\\n    }\\n\\n    dequeueNextVersion(majorNodeId);\\n\\n    emit VersionDecided(patchNodeId, verified, packageLocationHash);\\n  }\\n\\n  function dequeueNextVersion(bytes32 majorNodeId) private {\\n    MajorVersionQueueContainer\\n      storage majorVersionContainer = majorVersionQueueContainers[majorNodeId];\\n\\n    if (majorVersionContainer.headVersionId == 0x0) {\\n      //The queue is empty\\n      return;\\n    }\\n\\n    QueuedVersion storage headVersion = majorVersionContainer.queuedVersions[\\n      majorVersionContainer.headVersionId\\n    ];\\n\\n    ProposedVersion storage nextVotingVersion = proposedVersions[\\n      majorVersionContainer.headVersionId\\n    ];\\n\\n    if (headVersion.nextQueuedVersionId == 0x0) {\\n      majorVersionContainer.headVersionId = 0x0;\\n      majorVersionContainer.tailVersionId = 0x0;\\n    } else {\\n      majorVersionContainer.headVersionId = headVersion.nextQueuedVersionId;\\n    }\\n\\n    startVersionVoting(nextVotingVersion);\\n  }\\n\\n  function getPrevPatchPackageLocation(bytes32 patchNodeId)\\n    external\\n    view\\n    returns (string memory prevPackageLocation)\\n  {\\n    ProposedVersion storage targetVersion = proposedVersions[patchNodeId];\\n\\n    requireCanVoteOnVersion(targetVersion);\\n\\n    VerifiedMinorVersion memory minorVersion = verifiedMinorVersions[\\n      targetVersion.minorNodeId\\n    ];\\n\\n    assert(minorVersion.patchNodeId != 0x0);\\n\\n    string memory prevPackageLocation = proposedVersions[\\n      minorVersion.patchNodeId\\n    ].packageLocation;\\n\\n    return prevPackageLocation;\\n  }\\n\\n  function getPrevAndNextMinorPackageLocations(bytes32 patchNodeId)\\n    external\\n    view\\n    returns (\\n      bytes32 prevMinorNodeId,\\n      string memory prevPackageLocation,\\n      bytes32 nextMinorNodeId,\\n      string memory nextPackageLocation\\n    )\\n  {\\n    ProposedVersion storage targetVersion = proposedVersions[patchNodeId];\\n\\n    requireCanVoteOnVersion(targetVersion);\\n\\n    VerifiedMajorVersion memory currentMajorVersion = verifiedMajorVersions[\\n      targetVersion.majorNodeId\\n    ];\\n\\n    bytes32 currentMinorNodeId = currentMajorVersion.lowestMinorNodeId;\\n    bytes32 nextMinorNodeId = currentMinorNodeId;\\n    bytes32 prevMinorNodeId;\\n\\n    VerifiedMinorVersion memory nextVersion = verifiedMinorVersions[\\n      currentMinorNodeId\\n    ];\\n\\n    VerifiedMinorVersion memory prevVersion;\\n    while (nextVersion.versionNumber < targetVersion.minorVersion) {\\n      prevMinorNodeId = currentMinorNodeId;\\n      prevVersion = nextVersion;\\n      currentMinorNodeId = nextVersion.nextMinorNodeId;\\n      nextVersion = verifiedMinorVersions[currentMinorNodeId];\\n    }\\n\\n    string memory prevPackageLocation;\\n    if (prevVersion.patchNodeId != 0x0) {\\n      prevPackageLocation = proposedVersions[prevVersion.patchNodeId]\\n        .packageLocation;\\n    }\\n\\n    string memory nextPackageLocation;\\n    if (nextVersion.patchNodeId != 0x0) {\\n      nextPackageLocation = proposedVersions[nextVersion.patchNodeId]\\n        .packageLocation;\\n    }\\n\\n    return (\\n      prevMinorNodeId,\\n      prevPackageLocation,\\n      nextMinorNodeId,\\n      nextPackageLocation\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xdfde3381e1cad2b3b545610fe78cecd7dca7ddeb063961c48410d1660e0368fd\",\"license\":\"MIT\"},\"contracts/versioning/registrar/PolywrapRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Registrar.sol\\\";\\n\\ncontract PolywrapRegistrar is Registrar {\\n  constructor(address _registry) Registrar(_registry) {}\\n}\\n\",\"keccak256\":\"0x787ab1bb07f67900e8d1370f15c86c1bf3151c7912afb3761283bc1cb3ffb74d\",\"license\":\"MIT\"},\"contracts/versioning/registrar/Registrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../registry/VersionResolver.sol\\\";\\nimport \\\"../registry/Registry.sol\\\";\\nimport \\\"../VotingMachine.sol\\\";\\n\\nabstract contract Registrar is OwnableUpgradeable {\\n  event ManagerAdded(bytes32 indexed packageId, address indexed manager);\\n  event ManagerRemoved(bytes32 indexed packageId, address indexed manager);\\n\\n  address public registry;\\n  address public votingMachine;\\n\\n  mapping(bytes32 => bool) public managers;\\n\\n  constructor(address _registry) {\\n    initialize(_registry);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVotingMachine(address _votingMachine) public onlyOwner {\\n    votingMachine = _votingMachine;\\n  }\\n\\n  function addManager(bytes32 packageId, address manager)\\n    public\\n    packageOwner(packageId)\\n  {\\n    bytes32 key = keccak256(abi.encodePacked(packageId, manager));\\n\\n    managers[key] = true;\\n\\n    emit ManagerAdded(packageId, manager);\\n  }\\n\\n  function removeManager(bytes32 packageId, address manager)\\n    public\\n    packageOwner(packageId)\\n  {\\n    bytes32 key = keccak256(abi.encodePacked(packageId, manager));\\n\\n    managers[key] = false;\\n\\n    emit ManagerRemoved(packageId, manager);\\n  }\\n\\n  function proposeVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string calldata packageLocation\\n  ) public {\\n    VotingMachine votingMachineContract = VotingMachine(votingMachine);\\n\\n    votingMachineContract.proposeVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      packageLocation,\\n      msg.sender\\n    );\\n  }\\n\\n  function isAuthorized(bytes32 packageId, address ownerOrManager)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    bytes32 key = keccak256(abi.encodePacked(packageId, ownerOrManager));\\n\\n    if (managers[key]) {\\n      return true;\\n    }\\n\\n    return getPackageOwner(packageId) == ownerOrManager;\\n  }\\n\\n  modifier authorized(bytes32 packageId) {\\n    require(\\n      isAuthorized(packageId, msg.sender),\\n      \\\"You do not have access to this package\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0x51b7b5b7e9151244cc2cca15af0c2f587328839e67d136ae98aa4684a9de65f3\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"},\"contracts/versioning/registry/VersionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Registry.sol\\\";\\n\\nabstract contract VersionResolver is Registry {\\n  function resolveToLeaf(bytes32 versionNodeId) public view returns (bytes32) {\\n    PackageVersion storage versionNode = versionNodes[versionNodeId];\\n    require(versionNode.created, \\\"Invalid Node\\\");\\n\\n    if (versionNode.leaf) {\\n      return versionNodeId;\\n    }\\n\\n    bytes32 latestNodeId = keccak256(\\n      abi.encodePacked(versionNodeId, versionNode.latestSubVersion)\\n    );\\n\\n    return resolveToLeaf(latestNodeId);\\n  }\\n\\n  function getPackageLocation(bytes32 versionNodeId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    bytes32 concreteVersionId = resolveToLeaf(versionNodeId);\\n    return versionNodes[concreteVersionId].location;\\n  }\\n}\\n\",\"keccak256\":\"0x6a4e5e49e84673d05c0b021ff6f57e1c5f1c88ed5e5d0a686d301cc406b89fc4\",\"license\":\"MIT\"},\"contracts/versioning/version-events-listeners/IVersionVerifiedListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVersionVerifiedListener {\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    external;\\n}\\n\",\"keccak256\":\"0x4fdc20e43a36b559ecc639809e80f758317521fd5e8a3bb2cfd8bc7db11ff845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001cfa38038062001cfa83398181016040528101906200003791906200050f565b8062000049816200005160201b60201c565b505062000632565b600060019054906101000a900460ff168062000078575060008054906101000a900460ff16155b620000ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b19062000562565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011b6200018260201b60201c565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156200017e5760008060016101000a81548160ff0219169083151502179055505b5050565b600060019054906101000a900460ff1680620001a9575060008054906101000a900460ff16155b620001eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e29062000562565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200023c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200024c6200028160201b60201c565b6200025c6200036060201b60201c565b80156200027e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002a8575060008054906101000a900460ff16155b620002ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e19062000562565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200033b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200035d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000387575060008054906101000a900460ff16155b620003c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c09062000562565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200041a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006200042c620004f060201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620004ed5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b600081519050620005098162000618565b92915050565b6000602082840312156200052257600080fd5b60006200053284828501620004f8565b91505092915050565b60006200054a602e8362000584565b91506200055782620005c9565b604082019050919050565b600060208201905081810360008301526200057d816200053b565b9050919050565b600082825260208201905092915050565b6000620005a282620005a9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b620006238162000595565b81146200062f57600080fd5b50565b6116b880620006426000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637b1039991161008c578063b0b052c211610066578063b0b052c2146101ec578063b21aa96c14610208578063c4d66de814610224578063f2fde38b14610240576100cf565b80637b103999146101805780638da5cb5b1461019e578063956db465146101bc576100cf565b80631a5da6c8146100d45780632d33d2e3146100f05780633edf7ca11461010c57806354676f2c1461012a578063684efdfd1461015a578063715018a614610176575b600080fd5b6100ee60048036038101906100e99190611096565b61025c565b005b61010a60048036038101906101059190611096565b61031c565b005b6101146103dc565b604051610121919061132e565b60405180910390f35b610144600480360381019061013f91906110e8565b610402565b6040516101519190611349565b60405180910390f35b610174600480360381019061016f919061114d565b610422565b005b61017e6104c9565b005b610188610606565b604051610195919061132e565b60405180910390f35b6101a661062c565b6040516101b3919061132e565b60405180910390f35b6101d660048036038101906101d19190611111565b610656565b6040516101e39190611349565b60405180910390f35b61020660048036038101906102019190611111565b6106f5565b005b610222600480360381019061021d9190611111565b61080f565b005b61023e60048036038101906102399190611096565b610929565b005b61025a60048036038101906102559190611096565b610a4c565b005b610264610bf8565b73ffffffffffffffffffffffffffffffffffffffff1661028261062c565b73ffffffffffffffffffffffffffffffffffffffff16146102d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cf90611449565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610324610bf8565b73ffffffffffffffffffffffffffffffffffffffff1661034261062c565b73ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90611449565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60676020528060005260406000206000915054906101000a900460ff1681565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663db45078b888888888888336040518863ffffffff1660e01b815260040161048e979695949392919061137f565b600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b5050505050505050505050565b6104d1610bf8565b73ffffffffffffffffffffffffffffffffffffffff166104ef61062c565b73ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080838360405160200161066c929190611302565b6040516020818303038152906040528051906020012090506067600082815260200190815260200160002060009054906101000a900460ff16156106b45760019150506106ef565b8273ffffffffffffffffffffffffffffffffffffffff166106d485610c00565b73ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b813373ffffffffffffffffffffffffffffffffffffffff1661071682610c00565b73ffffffffffffffffffffffffffffffffffffffff161461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611409565b60405180910390fd5b60008383604051602001610781929190611302565b60405160208183030381529060405280519060200120905060016067600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847fe46710533b73e7bc8e141ac9ce789902221e6df8529e50ffafa7084c7461dd9f60405160405180910390a350505050565b813373ffffffffffffffffffffffffffffffffffffffff1661083082610c00565b73ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90611409565b60405180910390fd5b6000838360405160200161089b929190611302565b60405160208183030381529060405280519060200120905060006067600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f09f3834f8c364f78dd28fd9b79eefacfae7a3d41e6f9008d88babfd22bd1f24960405160405180910390a350505050565b600060019054906101000a900460ff168061094f575060008054906101000a900460ff16155b61098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590611429565b60405180910390fd5b60008060019054906101000a900460ff1615905080156109de576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6109e6610cb4565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610a485760008060016101000a81548160ff0219169083151502179055505b5050565b610a54610bf8565b73ffffffffffffffffffffffffffffffffffffffff16610a7261062c565b73ffffffffffffffffffffffffffffffffffffffff1614610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf90611449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f906113e9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663427a94d4836040518263ffffffff1660e01b8152600401610c5d9190611364565b60206040518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906110bf565b9050919050565b600060019054906101000a900460ff1680610cda575060008054906101000a900460ff16155b610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1090611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d71610d9d565b610d79610e76565b8015610d9a5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610dc3575060008054906101000a900460ff16155b610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df990611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e52576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e735760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e9c575060008054906101000a900460ff16155b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed290611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f2b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610f35610bf8565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610ff55760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506110078161163d565b92915050565b60008151905061101c8161163d565b92915050565b60008135905061103181611654565b92915050565b60008083601f84011261104957600080fd5b8235905067ffffffffffffffff81111561106257600080fd5b60208301915083600182028301111561107a57600080fd5b9250929050565b6000813590506110908161166b565b92915050565b6000602082840312156110a857600080fd5b60006110b684828501610ff8565b91505092915050565b6000602082840312156110d157600080fd5b60006110df8482850161100d565b91505092915050565b6000602082840312156110fa57600080fd5b600061110884828501611022565b91505092915050565b6000806040838503121561112457600080fd5b600061113285828601611022565b925050602061114385828601610ff8565b9150509250929050565b60008060008060008060a0878903121561116657600080fd5b600061117489828a01611022565b965050602061118589828a01611081565b955050604061119689828a01611081565b94505060606111a789828a01611081565b935050608087013567ffffffffffffffff8111156111c457600080fd5b6111d089828a01611037565b92509250509295509295509295565b6111e88161147a565b82525050565b6111ff6111fa8261147a565b6114db565b82525050565b61120e8161148c565b82525050565b61121d81611498565b82525050565b61123461122f82611498565b6114ed565b82525050565b60006112468385611469565b93506112538385846114cc565b61125c83611509565b840190509392505050565b6000611274602683611469565b915061127f82611527565b604082019050919050565b6000611297603483611469565b91506112a282611576565b604082019050919050565b60006112ba602e83611469565b91506112c5826115c5565b604082019050919050565b60006112dd602083611469565b91506112e882611614565b602082019050919050565b6112fc816114c2565b82525050565b600061130e8285611223565b60208201915061131e82846111ee565b6014820191508190509392505050565b600060208201905061134360008301846111df565b92915050565b600060208201905061135e6000830184611205565b92915050565b60006020820190506113796000830184611214565b92915050565b600060c082019050611394600083018a611214565b6113a160208301896112f3565b6113ae60408301886112f3565b6113bb60608301876112f3565b81810360808301526113ce81858761123a565b90506113dd60a08301846111df565b98975050505050505050565b6000602082019050818103600083015261140281611267565b9050919050565b600060208201905081810360008301526114228161128a565b9050919050565b60006020820190508181036000830152611442816112ad565b9050919050565b60006020820190508181036000830152611462816112d0565b9050919050565b600082825260208201905092915050565b6000611485826114a2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60006114e6826114f7565b9050919050565b6000819050919050565b60006115028261151a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f7420686176652061636365737320746f2074686520646f60008201527f6d61696e206f662074686973207061636b616765000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6116468161147a565b811461165157600080fd5b50565b61165d81611498565b811461166857600080fd5b50565b611674816114c2565b811461167f57600080fd5b5056fea264697066735822122066675d19da3c17d0a9cb82fdb97cb49dd63c972b59a606f2bb5b2e5b4ad0a1d964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637b1039991161008c578063b0b052c211610066578063b0b052c2146101ec578063b21aa96c14610208578063c4d66de814610224578063f2fde38b14610240576100cf565b80637b103999146101805780638da5cb5b1461019e578063956db465146101bc576100cf565b80631a5da6c8146100d45780632d33d2e3146100f05780633edf7ca11461010c57806354676f2c1461012a578063684efdfd1461015a578063715018a614610176575b600080fd5b6100ee60048036038101906100e99190611096565b61025c565b005b61010a60048036038101906101059190611096565b61031c565b005b6101146103dc565b604051610121919061132e565b60405180910390f35b610144600480360381019061013f91906110e8565b610402565b6040516101519190611349565b60405180910390f35b610174600480360381019061016f919061114d565b610422565b005b61017e6104c9565b005b610188610606565b604051610195919061132e565b60405180910390f35b6101a661062c565b6040516101b3919061132e565b60405180910390f35b6101d660048036038101906101d19190611111565b610656565b6040516101e39190611349565b60405180910390f35b61020660048036038101906102019190611111565b6106f5565b005b610222600480360381019061021d9190611111565b61080f565b005b61023e60048036038101906102399190611096565b610929565b005b61025a60048036038101906102559190611096565b610a4c565b005b610264610bf8565b73ffffffffffffffffffffffffffffffffffffffff1661028261062c565b73ffffffffffffffffffffffffffffffffffffffff16146102d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cf90611449565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610324610bf8565b73ffffffffffffffffffffffffffffffffffffffff1661034261062c565b73ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90611449565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60676020528060005260406000206000915054906101000a900460ff1681565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663db45078b888888888888336040518863ffffffff1660e01b815260040161048e979695949392919061137f565b600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b5050505050505050505050565b6104d1610bf8565b73ffffffffffffffffffffffffffffffffffffffff166104ef61062c565b73ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080838360405160200161066c929190611302565b6040516020818303038152906040528051906020012090506067600082815260200190815260200160002060009054906101000a900460ff16156106b45760019150506106ef565b8273ffffffffffffffffffffffffffffffffffffffff166106d485610c00565b73ffffffffffffffffffffffffffffffffffffffff16149150505b92915050565b813373ffffffffffffffffffffffffffffffffffffffff1661071682610c00565b73ffffffffffffffffffffffffffffffffffffffff161461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611409565b60405180910390fd5b60008383604051602001610781929190611302565b60405160208183030381529060405280519060200120905060016067600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847fe46710533b73e7bc8e141ac9ce789902221e6df8529e50ffafa7084c7461dd9f60405160405180910390a350505050565b813373ffffffffffffffffffffffffffffffffffffffff1661083082610c00565b73ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90611409565b60405180910390fd5b6000838360405160200161089b929190611302565b60405160208183030381529060405280519060200120905060006067600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff16847f09f3834f8c364f78dd28fd9b79eefacfae7a3d41e6f9008d88babfd22bd1f24960405160405180910390a350505050565b600060019054906101000a900460ff168061094f575060008054906101000a900460ff16155b61098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590611429565b60405180910390fd5b60008060019054906101000a900460ff1615905080156109de576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6109e6610cb4565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610a485760008060016101000a81548160ff0219169083151502179055505b5050565b610a54610bf8565b73ffffffffffffffffffffffffffffffffffffffff16610a7261062c565b73ffffffffffffffffffffffffffffffffffffffff1614610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf90611449565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f906113e9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663427a94d4836040518263ffffffff1660e01b8152600401610c5d9190611364565b60206040518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906110bf565b9050919050565b600060019054906101000a900460ff1680610cda575060008054906101000a900460ff16155b610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1090611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d71610d9d565b610d79610e76565b8015610d9a5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610dc3575060008054906101000a900460ff16155b610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df990611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e52576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e735760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e9c575060008054906101000a900460ff16155b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed290611429565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f2b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610f35610bf8565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610ff55760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506110078161163d565b92915050565b60008151905061101c8161163d565b92915050565b60008135905061103181611654565b92915050565b60008083601f84011261104957600080fd5b8235905067ffffffffffffffff81111561106257600080fd5b60208301915083600182028301111561107a57600080fd5b9250929050565b6000813590506110908161166b565b92915050565b6000602082840312156110a857600080fd5b60006110b684828501610ff8565b91505092915050565b6000602082840312156110d157600080fd5b60006110df8482850161100d565b91505092915050565b6000602082840312156110fa57600080fd5b600061110884828501611022565b91505092915050565b6000806040838503121561112457600080fd5b600061113285828601611022565b925050602061114385828601610ff8565b9150509250929050565b60008060008060008060a0878903121561116657600080fd5b600061117489828a01611022565b965050602061118589828a01611081565b955050604061119689828a01611081565b94505060606111a789828a01611081565b935050608087013567ffffffffffffffff8111156111c457600080fd5b6111d089828a01611037565b92509250509295509295509295565b6111e88161147a565b82525050565b6111ff6111fa8261147a565b6114db565b82525050565b61120e8161148c565b82525050565b61121d81611498565b82525050565b61123461122f82611498565b6114ed565b82525050565b60006112468385611469565b93506112538385846114cc565b61125c83611509565b840190509392505050565b6000611274602683611469565b915061127f82611527565b604082019050919050565b6000611297603483611469565b91506112a282611576565b604082019050919050565b60006112ba602e83611469565b91506112c5826115c5565b604082019050919050565b60006112dd602083611469565b91506112e882611614565b602082019050919050565b6112fc816114c2565b82525050565b600061130e8285611223565b60208201915061131e82846111ee565b6014820191508190509392505050565b600060208201905061134360008301846111df565b92915050565b600060208201905061135e6000830184611205565b92915050565b60006020820190506113796000830184611214565b92915050565b600060c082019050611394600083018a611214565b6113a160208301896112f3565b6113ae60408301886112f3565b6113bb60608301876112f3565b81810360808301526113ce81858761123a565b90506113dd60a08301846111df565b98975050505050505050565b6000602082019050818103600083015261140281611267565b9050919050565b600060208201905081810360008301526114228161128a565b9050919050565b60006020820190508181036000830152611442816112ad565b9050919050565b60006020820190508181036000830152611462816112d0565b9050919050565b600082825260208201905092915050565b6000611485826114a2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60006114e6826114f7565b9050919050565b6000819050919050565b60006115028261151a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f7420686176652061636365737320746f2074686520646f60008201527f6d61696e206f662074686973207061636b616765000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6116468161147a565b811461165157600080fd5b50565b61165d81611498565b811461166857600080fd5b50565b611674816114c2565b811461167f57600080fd5b5056fea264697066735822122066675d19da3c17d0a9cb82fdb97cb49dd63c972b59a606f2bb5b2e5b4ad0a1d964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10730,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 10732,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "votingMachine",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 10736,
        "contract": "contracts/versioning/registrar/PolywrapRegistrar.sol:PolywrapRegistrar",
        "label": "managers",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}