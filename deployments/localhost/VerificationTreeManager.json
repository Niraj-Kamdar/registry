{
  "address": "0xE675C14714f532852115e83F58A48BfD2Eb964c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingMachine",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "verificationRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verifiedVersionCount",
          "type": "uint256"
        }
      ],
      "name": "VerificationRootCalculated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packageLocationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verifiedVersionIndex",
          "type": "uint256"
        }
      ],
      "name": "VersionVerified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "calculateVerificationRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingMachine",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "packageLocationHash",
          "type": "bytes32"
        }
      ],
      "name": "onVersionVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRootRelayer",
          "type": "address"
        }
      ],
      "name": "updateVerificationRootRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingMachine",
          "type": "address"
        }
      ],
      "name": "updateVotingMachine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRootRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifiedVersionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingMachine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0af8b75e3f2fbfc3013331c8f26f001d95e7a25695430578fc0eebd95e20edf1",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0xE675C14714f532852115e83F58A48BfD2Eb964c5",
    "transactionIndex": 0,
    "gasUsed": "1335574",
    "logsBloom": "0x00000000000000000000000000001000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020001000000000000000800000800000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000000000000001000",
    "blockHash": "0x60d1a864408961be7c150e2c8a301bcd694c8fb7c84fa458a387507c7a06e5b1",
    "transactionHash": "0x0af8b75e3f2fbfc3013331c8f26f001d95e7a25695430578fc0eebd95e20edf1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24,
        "transactionHash": "0x0af8b75e3f2fbfc3013331c8f26f001d95e7a25695430578fc0eebd95e20edf1",
        "address": "0xE675C14714f532852115e83F58A48BfD2Eb964c5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x60d1a864408961be7c150e2c8a301bcd694c8fb7c84fa458a387507c7a06e5b1"
      }
    ],
    "blockNumber": 24,
    "cumulativeGasUsed": "1335574",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98D669278F61BCC6a5c6c36b2F47b749364beA07",
    "0x6409eC45617f3f4Ae5C985D6f6C2C04F896519f5"
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingMachine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"verificationRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verifiedVersionCount\",\"type\":\"uint256\"}],\"name\":\"VerificationRootCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packageLocationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verifiedVersionIndex\",\"type\":\"uint256\"}],\"name\":\"VersionVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateVerificationRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingMachine\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"packageLocationHash\",\"type\":\"bytes32\"}],\"name\":\"onVersionVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRootRelayer\",\"type\":\"address\"}],\"name\":\"updateVerificationRootRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingMachine\",\"type\":\"address\"}],\"name\":\"updateVotingMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRootRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedVersionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingMachine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/VerificationTreeManager.sol\":\"VerificationTreeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/VerificationRootRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./bridges/interfaces/IVerificationRootBridgeLink.sol\\\";\\nimport \\\"./VerificationTreeManager.sol\\\";\\nimport \\\"./VersionVerificationManager.sol\\\";\\n\\ncontract VerificationRootRelayer is OwnableUpgradeable {\\n  address public versionVerificationManager;\\n  address public bridgeLink;\\n  address public verificationTreeManager;\\n  uint256 public blocksPerRootRelay;\\n\\n  uint256 public lastRootRelayBlock;\\n\\n  constructor(address _versionVerificationManager, uint256 _blocksPerRootRelay)\\n  {\\n    initialize(_versionVerificationManager, _blocksPerRootRelay);\\n  }\\n\\n  function initialize(\\n    address _versionVerificationManager,\\n    uint256 _blocksPerRootRelay\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    versionVerificationManager = _versionVerificationManager;\\n    blocksPerRootRelay = _blocksPerRootRelay;\\n  }\\n\\n  function updateBridgeLink(address _bridgeLink) public onlyOwner {\\n    bridgeLink = _bridgeLink;\\n  }\\n\\n  function updateVersionVerificationManager(address _versionVerificationManager)\\n    public\\n    onlyOwner\\n  {\\n    versionVerificationManager = _versionVerificationManager;\\n  }\\n\\n  function updateVerificationTreeManager(address _verificationTreeManager)\\n    public\\n    onlyOwner\\n  {\\n    verificationTreeManager = _verificationTreeManager;\\n  }\\n\\n  function updateBlocksPerRootRelay(uint256 _blocksPerRootRelay)\\n    public\\n    onlyOwner\\n  {\\n    blocksPerRootRelay = _blocksPerRootRelay;\\n  }\\n\\n  function onVersionVerified() public {\\n    assert(msg.sender == verificationTreeManager);\\n\\n    bytes32 verificationRoot = VerificationTreeManager(verificationTreeManager)\\n      .calculateVerificationRoot();\\n\\n    updateVerificationRoot(verificationRoot);\\n\\n    if (block.number < lastRootRelayBlock + blocksPerRootRelay) {\\n      return;\\n    }\\n\\n    relayVerificationRoot();\\n  }\\n\\n  function relayVerificationRoot() public {\\n    assert(versionVerificationManager != address(0));\\n\\n    if (bridgeLink == address(0)) {\\n      return;\\n    }\\n\\n    bytes32 verificationRoot = VersionVerificationManager(\\n      versionVerificationManager\\n    ).verificationRoot();\\n\\n    IVerificationRootBridgeLink(bridgeLink).relayVerificationRoot(\\n      verificationRoot\\n    );\\n  }\\n\\n  function updateVerificationRoot(bytes32 verificationRoot) private {\\n    if (versionVerificationManager != address(0)) {\\n      VersionVerificationManager(versionVerificationManager)\\n        .updateVerificationRoot(verificationRoot);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf27c5630e1c47527315d352862f9440cca8ac9dc47e2a13a8ed4c06a4b44d28\",\"license\":\"MIT\"},\"contracts/versioning/VerificationTreeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./version-events-listeners/IVersionVerifiedListener.sol\\\";\\nimport \\\"./VerificationRootRelayer.sol\\\";\\n\\ncontract VerificationTreeManager is\\n  IVersionVerifiedListener,\\n  OwnableUpgradeable\\n{\\n  event VerificationRootCalculated(\\n    bytes32 indexed verificationRoot,\\n    uint256 verifiedVersionCount\\n  );\\n\\n  event VersionVerified(\\n    bytes32 indexed patchNodeId,\\n    bytes32 packageLocationHash,\\n    uint256 verifiedVersionIndex\\n  );\\n\\n  struct DynamicMerkleTree {\\n    //Track unpaired leaves and the highest level(root is at the top) to calculate the merkle root on the fly\\n    uint256 highestTreeLevel;\\n    mapping(uint256 => bytes32) unpairedTreeLeaves;\\n  }\\n\\n  DynamicMerkleTree private verificationTree;\\n\\n  address public registry;\\n  address public votingMachine;\\n  address public verificationRootRelayer;\\n\\n  uint256 public verifiedVersionCount;\\n\\n  constructor(address _registry, address _votingMachine) {\\n    initialize(_registry, _votingMachine);\\n  }\\n\\n  function initialize(address _registry, address _votingMachine)\\n    public\\n    initializer\\n  {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n    votingMachine = _votingMachine;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVotingMachine(address _votingMachine) public onlyOwner {\\n    votingMachine = _votingMachine;\\n  }\\n\\n  function updateVerificationRootRelayer(address _verificationRootRelayer)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootRelayer = _verificationRootRelayer;\\n  }\\n\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    public\\n    override\\n  {\\n    assert(msg.sender == votingMachine);\\n\\n    addVersionToTree(patchNodeId, packageLocationHash);\\n\\n    emit VersionVerified(\\n      patchNodeId,\\n      packageLocationHash,\\n      verifiedVersionCount\\n    );\\n\\n    VerificationRootRelayer(verificationRootRelayer).onVersionVerified();\\n\\n    verifiedVersionCount++;\\n  }\\n\\n  function addVersionToTree(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    private\\n  {\\n    bytes32 leaf = keccak256(\\n      abi.encodePacked(patchNodeId, packageLocationHash)\\n    );\\n\\n    //Go through the unpaired tree leaves and pair them with the new leaf\\n    uint256 currentTreeLevel = 0;\\n    while (verificationTree.unpairedTreeLeaves[currentTreeLevel] != 0x0) {\\n      leaf = keccak256(\\n        abi.encodePacked(\\n          verificationTree.unpairedTreeLeaves[currentTreeLevel],\\n          leaf\\n        )\\n      );\\n\\n      verificationTree.unpairedTreeLeaves[currentTreeLevel] = 0x0;\\n      currentTreeLevel++;\\n    }\\n\\n    //Store the unpaired leaf to be paired later\\n    verificationTree.unpairedTreeLeaves[currentTreeLevel] = leaf;\\n\\n    //Track the highest level\\n    if (currentTreeLevel > verificationTree.highestTreeLevel) {\\n      verificationTree.highestTreeLevel = currentTreeLevel;\\n    }\\n  }\\n\\n  function calculateVerificationRoot() public returns (bytes32) {\\n    assert(msg.sender == verificationRootRelayer);\\n\\n    bytes32 leaf = 0x0;\\n\\n    //Go through the unpaired tree leaves and pair them with the \\\"0x0\\\" leaf\\n    //If there is no unpaired leaf, just propagate the current one upwards\\n    uint256 currentTreeLevel = 0;\\n    while (currentTreeLevel <= verificationTree.highestTreeLevel) {\\n      if (verificationTree.unpairedTreeLeaves[currentTreeLevel] != 0x0) {\\n        if (leaf == 0x0) {\\n          leaf = verificationTree.unpairedTreeLeaves[currentTreeLevel];\\n        } else {\\n          leaf = keccak256(\\n            abi.encodePacked(\\n              verificationTree.unpairedTreeLeaves[currentTreeLevel],\\n              leaf\\n            )\\n          );\\n        }\\n      }\\n\\n      currentTreeLevel++;\\n    }\\n\\n    emit VerificationRootCalculated(leaf, verifiedVersionCount);\\n\\n    return leaf;\\n  }\\n}\\n\",\"keccak256\":\"0x443e94cecdea4a5e3f458e46fac5b1570208fc1670789b8a954a3406e8dbe38f\",\"license\":\"MIT\"},\"contracts/versioning/VersionVerificationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\n\\ncontract VersionVerificationManager is OwnableUpgradeable {\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    bytes32 indexed verifiedVersionId,\\n    bytes32 indexed patchNodeId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  address public registry;\\n  address public verificationRootUpdater;\\n\\n  bytes32 public verificationRoot;\\n\\n  constructor(address _registry) {\\n    initialize(_registry);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVerificationRootUpdater(address _verificationRootUpdater)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootUpdater = _verificationRootUpdater;\\n  }\\n\\n  function updateVerificationRoot(bytes32 root) public {\\n    assert(msg.sender == verificationRootUpdater);\\n\\n    verificationRoot = root;\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location,\\n    bytes32[] memory proof,\\n    bool[] memory sides\\n  ) public packageOwner(packageId) {\\n    bytes32 verifiedVersionId = keccak256(\\n      abi.encodePacked(patchNodeId, keccak256(abi.encodePacked(location)))\\n    );\\n\\n    require(\\n      proveVerifiedVersion(proof, sides, verifiedVersionId, verificationRoot),\\n      \\\"Invalid proof\\\"\\n    );\\n\\n    bytes32 actualPatchNodeId = Registry(registry).publishVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    require(\\n      patchNodeId == actualPatchNodeId,\\n      \\\"Supplied patchNodeId does not match the calculated patchNodeId\\\"\\n    );\\n\\n    emit VersionPublished(\\n      packageId,\\n      verifiedVersionId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n  }\\n\\n  function proveVerifiedVersion(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 verifiedVersionId,\\n    bytes32 root\\n  ) private pure returns (bool) {\\n    bytes32 hash = verifiedVersionId;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (sides[i]) {\\n        hash = keccak256(abi.encodePacked(proofElement, hash));\\n      } else {\\n        hash = keccak256(abi.encodePacked(hash, proofElement));\\n      }\\n    }\\n\\n    return hash == root;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0xd375a1f1367f233e4a2789587abbb1137c03b243d26027111d35e40890aac72d\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IVerificationRootBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IVerificationRootBridgeLink {\\n  function relayVerificationRoot(bytes32 verificationRoot) external;\\n\\n  function receiveVerificationRoot(bytes32 verificationRoot) external;\\n}\\n\",\"keccak256\":\"0x2391cff3ce550e4b444a84af3c277edf1f8845f2fe99a32d4cfe2b2566c4280d\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"},\"contracts/versioning/version-events-listeners/IVersionVerifiedListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVersionVerifiedListener {\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    external;\\n}\\n\",\"keccak256\":\"0x4fdc20e43a36b559ecc639809e80f758317521fd5e8a3bb2cfd8bc7db11ff845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001bb238038062001bb2833981810160405281019062000037919062000551565b6200004982826200005160201b60201c565b505062000689565b600060019054906101000a900460ff168062000078575060008054906101000a900460ff16155b620000ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b190620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011b620001c460201b60201c565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015620001bf5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680620001eb575060008054906101000a900460ff16155b6200022d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022490620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200027e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200028e620002c360201b60201c565b6200029e620003a260201b60201c565b8015620002c05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002ea575060008054906101000a900460ff16155b6200032c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032390620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200037d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200039f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003c9575060008054906101000a900460ff16155b6200040b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200040290620005b9565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200045c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006200046e6200053260201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156200052f5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000815190506200054b816200066f565b92915050565b600080604083850312156200056557600080fd5b600062000575858286016200053a565b925050602062000588858286016200053a565b9150509250929050565b6000620005a1602e83620005db565b9150620005ae8262000620565b604082019050919050565b60006020820190508181036000830152620005d48162000592565b9050919050565b600082825260208201905092915050565b6000620005f98262000600565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6200067a81620005ec565b81146200068657600080fd5b50565b61151980620006996000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c5780638da5cb5b116100665780638da5cb5b146101c6578063d4cf2426146101e4578063f2fde38b14610200578063f9e5eafd1461021c576100cf565b8063485cc95514610182578063715018a61461019e5780637b103999146101a8576100cf565b80630cfb0b4c146100d45780630e4c9807146100f25780631a5da6c81461010e5780632d33d2e31461012a57806330b321a3146101465780633edf7ca114610164575b600080fd5b6100dc61023a565b6040516100e99190611256565b60405180910390f35b61010c600480360381019061010791906110c1565b6103b8565b005b610128600480360381019061012391906110c1565b610478565b005b610144600480360381019061013f91906110c1565b610538565b005b61014e6105f8565b60405161015b91906112fa565b60405180910390f35b61016c6105fe565b604051610179919061123b565b60405180910390f35b61019c600480360381019061019791906110ea565b610624565b005b6101a6610789565b005b6101b06108c6565b6040516101bd919061123b565b60405180910390f35b6101ce6108ec565b6040516101db919061123b565b60405180910390f35b6101fe60048036038101906101f99190611126565b610916565b005b61021a600480360381019061021591906110c1565b610a7e565b005b610224610c2a565b604051610231919061123b565b60405180910390f35b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008060001b905060005b6065600001548111610376576000801b606560010160008381526020019081526020016000205414610363576000801b8214156103205760656001016000828152602001908152602001600020549150610362565b60656001016000828152602001908152602001600020548260405160200161034992919061120f565b6040516020818303038152906040528051906020012091505b5b808061036e9061136c565b9150506102cb565b817f1210df8b43a93ad809714edb0b1ea72f9dff7e13a9dbae46be35aa7028816ff1606a546040516103a891906112fa565b60405180910390a2819250505090565b6103c0610c50565b73ffffffffffffffffffffffffffffffffffffffff166103de6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906112da565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610480610c50565b73ffffffffffffffffffffffffffffffffffffffff1661049e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb906112da565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610540610c50565b73ffffffffffffffffffffffffffffffffffffffff1661055e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab906112da565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606a5481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff168061064a575060008054906101000a900460ff16155b610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906112ba565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106e1610c58565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107845760008060016101000a81548160ff0219169083151502179055505b505050565b610791610c50565b73ffffffffffffffffffffffffffffffffffffffff166107af6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6109a48282610d41565b817f44cf500ed65246b251b99ffc28936276be48ac9b2699cb7e44831623c721da0582606a546040516109d8929190611271565b60405180910390a2606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e644e2966040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b50505050606a6000815480929190610a759061136c565b91905055505050565b610a86610c50565b73ffffffffffffffffffffffffffffffffffffffff16610aa46108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af1906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b619061129a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610c7e575060008054906101000a900460ff16155b610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb4906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d15610e3c565b610d1d610f15565b8015610d3e5760008060016101000a81548160ff0219169083151502179055505b50565b60008282604051602001610d5692919061120f565b60405160208183030381529060405280519060200120905060005b6000801b606560010160008381526020019081526020016000205414610e0357606560010160008281526020019081526020016000205482604051602001610dba92919061120f565b6040516020818303038152906040528051906020012091506000801b60656001016000838152602001908152602001600020819055508080610dfb9061136c565b915050610d71565b816065600101600083815260200190815260200160002081905550606560000154811115610e3657806065600001819055505b50505050565b600060019054906101000a900460ff1680610e62575060008054906101000a900460ff16155b610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e98906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ef1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f125760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f3b575060008054906101000a900460ff16155b610f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f71906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fca576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610fd4610c50565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156110945760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506110a6816114b5565b92915050565b6000813590506110bb816114cc565b92915050565b6000602082840312156110d357600080fd5b60006110e184828501611097565b91505092915050565b600080604083850312156110fd57600080fd5b600061110b85828601611097565b925050602061111c85828601611097565b9150509250929050565b6000806040838503121561113957600080fd5b6000611147858286016110ac565b9250506020611158858286016110ac565b9150509250929050565b61116b81611326565b82525050565b61117a81611338565b82525050565b61119161118c82611338565b6113b5565b82525050565b60006111a4602683611315565b91506111af826113ee565b604082019050919050565b60006111c7602e83611315565b91506111d28261143d565b604082019050919050565b60006111ea602083611315565b91506111f58261148c565b602082019050919050565b61120981611362565b82525050565b600061121b8285611180565b60208201915061122b8284611180565b6020820191508190509392505050565b60006020820190506112506000830184611162565b92915050565b600060208201905061126b6000830184611171565b92915050565b60006040820190506112866000830185611171565b6112936020830184611200565b9392505050565b600060208201905081810360008301526112b381611197565b9050919050565b600060208201905081810360008301526112d3816111ba565b9050919050565b600060208201905081810360008301526112f3816111dd565b9050919050565b600060208201905061130f6000830184611200565b92915050565b600082825260208201905092915050565b600061133182611342565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061137782611362565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113aa576113a96113bf565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6114be81611326565b81146114c957600080fd5b50565b6114d581611338565b81146114e057600080fd5b5056fea26469706673582212206ad92e22e0c78d814fb0143b043bdae7991b78b78d43188a69c965dabd5dfedc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c5780638da5cb5b116100665780638da5cb5b146101c6578063d4cf2426146101e4578063f2fde38b14610200578063f9e5eafd1461021c576100cf565b8063485cc95514610182578063715018a61461019e5780637b103999146101a8576100cf565b80630cfb0b4c146100d45780630e4c9807146100f25780631a5da6c81461010e5780632d33d2e31461012a57806330b321a3146101465780633edf7ca114610164575b600080fd5b6100dc61023a565b6040516100e99190611256565b60405180910390f35b61010c600480360381019061010791906110c1565b6103b8565b005b610128600480360381019061012391906110c1565b610478565b005b610144600480360381019061013f91906110c1565b610538565b005b61014e6105f8565b60405161015b91906112fa565b60405180910390f35b61016c6105fe565b604051610179919061123b565b60405180910390f35b61019c600480360381019061019791906110ea565b610624565b005b6101a6610789565b005b6101b06108c6565b6040516101bd919061123b565b60405180910390f35b6101ce6108ec565b6040516101db919061123b565b60405180910390f35b6101fe60048036038101906101f99190611126565b610916565b005b61021a600480360381019061021591906110c1565b610a7e565b005b610224610c2a565b604051610231919061123b565b60405180910390f35b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008060001b905060005b6065600001548111610376576000801b606560010160008381526020019081526020016000205414610363576000801b8214156103205760656001016000828152602001908152602001600020549150610362565b60656001016000828152602001908152602001600020548260405160200161034992919061120f565b6040516020818303038152906040528051906020012091505b5b808061036e9061136c565b9150506102cb565b817f1210df8b43a93ad809714edb0b1ea72f9dff7e13a9dbae46be35aa7028816ff1606a546040516103a891906112fa565b60405180910390a2819250505090565b6103c0610c50565b73ffffffffffffffffffffffffffffffffffffffff166103de6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b906112da565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610480610c50565b73ffffffffffffffffffffffffffffffffffffffff1661049e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb906112da565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610540610c50565b73ffffffffffffffffffffffffffffffffffffffff1661055e6108ec565b73ffffffffffffffffffffffffffffffffffffffff16146105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab906112da565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606a5481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff168061064a575060008054906101000a900460ff16155b610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906112ba565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6106e1610c58565b82606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156107845760008060016101000a81548160ff0219169083151502179055505b505050565b610791610c50565b73ffffffffffffffffffffffffffffffffffffffff166107af6108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6109a48282610d41565b817f44cf500ed65246b251b99ffc28936276be48ac9b2699cb7e44831623c721da0582606a546040516109d8929190611271565b60405180910390a2606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e644e2966040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b50505050606a6000815480929190610a759061136c565b91905055505050565b610a86610c50565b73ffffffffffffffffffffffffffffffffffffffff16610aa46108ec565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af1906112da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b619061129a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060019054906101000a900460ff1680610c7e575060008054906101000a900460ff16155b610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb4906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d15610e3c565b610d1d610f15565b8015610d3e5760008060016101000a81548160ff0219169083151502179055505b50565b60008282604051602001610d5692919061120f565b60405160208183030381529060405280519060200120905060005b6000801b606560010160008381526020019081526020016000205414610e0357606560010160008281526020019081526020016000205482604051602001610dba92919061120f565b6040516020818303038152906040528051906020012091506000801b60656001016000838152602001908152602001600020819055508080610dfb9061136c565b915050610d71565b816065600101600083815260200190815260200160002081905550606560000154811115610e3657806065600001819055505b50505050565b600060019054906101000a900460ff1680610e62575060008054906101000a900460ff16155b610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e98906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ef1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610f125760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610f3b575060008054906101000a900460ff16155b610f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f71906112ba565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fca576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610fd4610c50565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156110945760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506110a6816114b5565b92915050565b6000813590506110bb816114cc565b92915050565b6000602082840312156110d357600080fd5b60006110e184828501611097565b91505092915050565b600080604083850312156110fd57600080fd5b600061110b85828601611097565b925050602061111c85828601611097565b9150509250929050565b6000806040838503121561113957600080fd5b6000611147858286016110ac565b9250506020611158858286016110ac565b9150509250929050565b61116b81611326565b82525050565b61117a81611338565b82525050565b61119161118c82611338565b6113b5565b82525050565b60006111a4602683611315565b91506111af826113ee565b604082019050919050565b60006111c7602e83611315565b91506111d28261143d565b604082019050919050565b60006111ea602083611315565b91506111f58261148c565b602082019050919050565b61120981611362565b82525050565b600061121b8285611180565b60208201915061122b8284611180565b6020820191508190509392505050565b60006020820190506112506000830184611162565b92915050565b600060208201905061126b6000830184611171565b92915050565b60006040820190506112866000830185611171565b6112936020830184611200565b9392505050565b600060208201905081810360008301526112b381611197565b9050919050565b600060208201905081810360008301526112d3816111ba565b9050919050565b600060208201905081810360008301526112f3816111dd565b9050919050565b600060208201905061130f6000830184611200565b92915050565b600082825260208201905092915050565b600061133182611342565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061137782611362565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113aa576113a96113bf565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6114be81611326565b81146114c957600080fd5b50565b6114d581611338565b81146114e057600080fd5b5056fea26469706673582212206ad92e22e0c78d814fb0143b043bdae7991b78b78d43188a69c965dabd5dfedc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8099,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "verificationTree",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(DynamicMerkleTree)8096_storage"
      },
      {
        "astId": 8101,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "registry",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 8103,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "votingMachine",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 8105,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "verificationRootRelayer",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 8107,
        "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
        "label": "verifiedVersionCount",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(DynamicMerkleTree)8096_storage": {
        "encoding": "inplace",
        "label": "struct VerificationTreeManager.DynamicMerkleTree",
        "members": [
          {
            "astId": 8091,
            "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
            "label": "highestTreeLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8095,
            "contract": "contracts/versioning/VerificationTreeManager.sol:VerificationTreeManager",
            "label": "unpairedTreeLeaves",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}