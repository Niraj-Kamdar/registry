{
  "address": "0xb2cDD6A87B147e32c8e279e989101e373Ae90782",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionVerificationManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksPerRootRelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blocksPerRootRelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeLink",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionVerificationManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksPerRootRelay",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRootRelayBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onVersionVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayVerificationRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksPerRootRelay",
          "type": "uint256"
        }
      ],
      "name": "updateBlocksPerRootRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationTreeManager",
          "type": "address"
        }
      ],
      "name": "updateVerificationTreeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_versionVerificationManager",
          "type": "address"
        }
      ],
      "name": "updateVersionVerificationManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationTreeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionVerificationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a98e1662f1c4b782828da60a676ba410b6b5d58395bc87cec9030d5939da892",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0xb2cDD6A87B147e32c8e279e989101e373Ae90782",
    "transactionIndex": 0,
    "gasUsed": "1382075",
    "logsBloom": "0x
    "blockHash": "0xa186c67682478ac4bbb93b512dc9c400f464c26744ed8b3f9e1fc9d8e1bd2b51",
    "transactionHash": "0x1a98e1662f1c4b782828da60a676ba410b6b5d58395bc87cec9030d5939da892",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x1a98e1662f1c4b782828da60a676ba410b6b5d58395bc87cec9030d5939da892",
        "address": "0xb2cDD6A87B147e32c8e279e989101e373Ae90782",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa186c67682478ac4bbb93b512dc9c400f464c26744ed8b3f9e1fc9d8e1bd2b51"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "1382075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd058304E14c155A5E81Ab57515879BE17A650C0c",
    5
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionVerificationManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerRootRelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blocksPerRootRelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionVerificationManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerRootRelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRootRelayBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onVersionVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayVerificationRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerRootRelay\",\"type\":\"uint256\"}],\"name\":\"updateBlocksPerRootRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeLink\",\"type\":\"address\"}],\"name\":\"updateBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationTreeManager\",\"type\":\"address\"}],\"name\":\"updateVerificationTreeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versionVerificationManager\",\"type\":\"address\"}],\"name\":\"updateVersionVerificationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationTreeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionVerificationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/VerificationRootRelayer.sol\":\"VerificationRootRelayer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/VerificationRootRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./bridges/interfaces/IVerificationRootBridgeLink.sol\\\";\\nimport \\\"./VerificationTreeManager.sol\\\";\\nimport \\\"./VersionVerificationManager.sol\\\";\\n\\ncontract VerificationRootRelayer is OwnableUpgradeable {\\n  address public versionVerificationManager;\\n  address public bridgeLink;\\n  address public verificationTreeManager;\\n  uint256 public blocksPerRootRelay;\\n\\n  uint256 public lastRootRelayBlock;\\n\\n  constructor(address _versionVerificationManager, uint256 _blocksPerRootRelay)\\n  {\\n    initialize(_versionVerificationManager, _blocksPerRootRelay);\\n  }\\n\\n  function initialize(\\n    address _versionVerificationManager,\\n    uint256 _blocksPerRootRelay\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    versionVerificationManager = _versionVerificationManager;\\n    blocksPerRootRelay = _blocksPerRootRelay;\\n  }\\n\\n  function updateBridgeLink(address _bridgeLink) public onlyOwner {\\n    bridgeLink = _bridgeLink;\\n  }\\n\\n  function updateVersionVerificationManager(address _versionVerificationManager)\\n    public\\n    onlyOwner\\n  {\\n    versionVerificationManager = _versionVerificationManager;\\n  }\\n\\n  function updateVerificationTreeManager(address _verificationTreeManager)\\n    public\\n    onlyOwner\\n  {\\n    verificationTreeManager = _verificationTreeManager;\\n  }\\n\\n  function updateBlocksPerRootRelay(uint256 _blocksPerRootRelay)\\n    public\\n    onlyOwner\\n  {\\n    blocksPerRootRelay = _blocksPerRootRelay;\\n  }\\n\\n  function onVersionVerified() public {\\n    assert(msg.sender == verificationTreeManager);\\n\\n    bytes32 verificationRoot = VerificationTreeManager(verificationTreeManager)\\n      .calculateVerificationRoot();\\n\\n    updateVerificationRoot(verificationRoot);\\n\\n    if (block.number < lastRootRelayBlock + blocksPerRootRelay) {\\n      return;\\n    }\\n\\n    relayVerificationRoot();\\n  }\\n\\n  function relayVerificationRoot() public {\\n    assert(versionVerificationManager != address(0));\\n\\n    if (bridgeLink == address(0)) {\\n      return;\\n    }\\n\\n    bytes32 verificationRoot = VersionVerificationManager(\\n      versionVerificationManager\\n    ).verificationRoot();\\n\\n    IVerificationRootBridgeLink(bridgeLink).relayVerificationRoot(\\n      verificationRoot\\n    );\\n  }\\n\\n  function updateVerificationRoot(bytes32 verificationRoot) private {\\n    if (versionVerificationManager != address(0)) {\\n      VersionVerificationManager(versionVerificationManager)\\n        .updateVerificationRoot(verificationRoot);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf27c5630e1c47527315d352862f9440cca8ac9dc47e2a13a8ed4c06a4b44d28\",\"license\":\"MIT\"},\"contracts/versioning/VerificationTreeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./version-events-listeners/IVersionVerifiedListener.sol\\\";\\nimport \\\"./VerificationRootRelayer.sol\\\";\\n\\ncontract VerificationTreeManager is\\n  IVersionVerifiedListener,\\n  OwnableUpgradeable\\n{\\n  event VerificationRootCalculated(\\n    bytes32 indexed verificationRoot,\\n    uint256 verifiedVersionCount\\n  );\\n\\n  event VersionVerified(\\n    bytes32 indexed patchNodeId,\\n    bytes32 packageLocationHash,\\n    uint256 verifiedVersionIndex\\n  );\\n\\n  struct DynamicMerkleTree {\\n    //Track unpaired leaves and the highest level(root is at the top) to calculate the merkle root on the fly\\n    uint256 highestTreeLevel;\\n    mapping(uint256 => bytes32) unpairedTreeLeaves;\\n  }\\n\\n  DynamicMerkleTree private verificationTree;\\n\\n  address public registry;\\n  address public votingMachine;\\n  address public verificationRootRelayer;\\n\\n  uint256 public verifiedVersionCount;\\n\\n  constructor(address _registry, address _votingMachine) {\\n    initialize(_registry, _votingMachine);\\n  }\\n\\n  function initialize(address _registry, address _votingMachine)\\n    public\\n    initializer\\n  {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n    votingMachine = _votingMachine;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVotingMachine(address _votingMachine) public onlyOwner {\\n    votingMachine = _votingMachine;\\n  }\\n\\n  function updateVerificationRootRelayer(address _verificationRootRelayer)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootRelayer = _verificationRootRelayer;\\n  }\\n\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    public\\n    override\\n  {\\n    assert(msg.sender == votingMachine);\\n\\n    addVersionToTree(patchNodeId, packageLocationHash);\\n\\n    emit VersionVerified(\\n      patchNodeId,\\n      packageLocationHash,\\n      verifiedVersionCount\\n    );\\n\\n    VerificationRootRelayer(verificationRootRelayer).onVersionVerified();\\n\\n    verifiedVersionCount++;\\n  }\\n\\n  function addVersionToTree(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    private\\n  {\\n    bytes32 leaf = keccak256(\\n      abi.encodePacked(patchNodeId, packageLocationHash)\\n    );\\n\\n    //Go through the unpaired tree leaves and pair them with the new leaf\\n    uint256 currentTreeLevel = 0;\\n    while (verificationTree.unpairedTreeLeaves[currentTreeLevel] != 0x0) {\\n      leaf = keccak256(\\n        abi.encodePacked(\\n          verificationTree.unpairedTreeLeaves[currentTreeLevel],\\n          leaf\\n        )\\n      );\\n\\n      verificationTree.unpairedTreeLeaves[currentTreeLevel] = 0x0;\\n      currentTreeLevel++;\\n    }\\n\\n    //Store the unpaired leaf to be paired later\\n    verificationTree.unpairedTreeLeaves[currentTreeLevel] = leaf;\\n\\n    //Track the highest level\\n    if (currentTreeLevel > verificationTree.highestTreeLevel) {\\n      verificationTree.highestTreeLevel = currentTreeLevel;\\n    }\\n  }\\n\\n  function calculateVerificationRoot() public returns (bytes32) {\\n    assert(msg.sender == verificationRootRelayer);\\n\\n    bytes32 leaf = 0x0;\\n\\n    //Go through the unpaired tree leaves and pair them with the \\\"0x0\\\" leaf\\n    //If there is no unpaired leaf, just propagate the current one upwards\\n    uint256 currentTreeLevel = 0;\\n    while (currentTreeLevel <= verificationTree.highestTreeLevel) {\\n      if (verificationTree.unpairedTreeLeaves[currentTreeLevel] != 0x0) {\\n        if (leaf == 0x0) {\\n          leaf = verificationTree.unpairedTreeLeaves[currentTreeLevel];\\n        } else {\\n          leaf = keccak256(\\n            abi.encodePacked(\\n              verificationTree.unpairedTreeLeaves[currentTreeLevel],\\n              leaf\\n            )\\n          );\\n        }\\n      }\\n\\n      currentTreeLevel++;\\n    }\\n\\n    emit VerificationRootCalculated(leaf, verifiedVersionCount);\\n\\n    return leaf;\\n  }\\n}\\n\",\"keccak256\":\"0x443e94cecdea4a5e3f458e46fac5b1570208fc1670789b8a954a3406e8dbe38f\",\"license\":\"MIT\"},\"contracts/versioning/VersionVerificationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\n\\ncontract VersionVerificationManager is OwnableUpgradeable {\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    bytes32 indexed verifiedVersionId,\\n    bytes32 indexed patchNodeId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  address public registry;\\n  address public verificationRootUpdater;\\n\\n  bytes32 public verificationRoot;\\n\\n  constructor(address _registry) {\\n    initialize(_registry);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVerificationRootUpdater(address _verificationRootUpdater)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootUpdater = _verificationRootUpdater;\\n  }\\n\\n  function updateVerificationRoot(bytes32 root) public {\\n    assert(msg.sender == verificationRootUpdater);\\n\\n    verificationRoot = root;\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location,\\n    bytes32[] memory proof,\\n    bool[] memory sides\\n  ) public packageOwner(packageId) {\\n    bytes32 verifiedVersionId = keccak256(\\n      abi.encodePacked(patchNodeId, keccak256(abi.encodePacked(location)))\\n    );\\n\\n    require(\\n      proveVerifiedVersion(proof, sides, verifiedVersionId, verificationRoot),\\n      \\\"Invalid proof\\\"\\n    );\\n\\n    bytes32 actualPatchNodeId = Registry(registry).publishVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    require(\\n      patchNodeId == actualPatchNodeId,\\n      \\\"Supplied patchNodeId does not match the calculated patchNodeId\\\"\\n    );\\n\\n    emit VersionPublished(\\n      packageId,\\n      verifiedVersionId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n  }\\n\\n  function proveVerifiedVersion(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 verifiedVersionId,\\n    bytes32 root\\n  ) private pure returns (bool) {\\n    bytes32 hash = verifiedVersionId;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (sides[i]) {\\n        hash = keccak256(abi.encodePacked(proofElement, hash));\\n      } else {\\n        hash = keccak256(abi.encodePacked(hash, proofElement));\\n      }\\n    }\\n\\n    return hash == root;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0xd375a1f1367f233e4a2789587abbb1137c03b243d26027111d35e40890aac72d\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IVerificationRootBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IVerificationRootBridgeLink {\\n  function relayVerificationRoot(bytes32 verificationRoot) external;\\n\\n  function receiveVerificationRoot(bytes32 verificationRoot) external;\\n}\\n\",\"keccak256\":\"0x2391cff3ce550e4b444a84af3c277edf1f8845f2fe99a32d4cfe2b2566c4280d\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"},\"contracts/versioning/version-events-listeners/IVersionVerifiedListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVersionVerifiedListener {\\n  function onVersionVerified(bytes32 patchNodeId, bytes32 packageLocationHash)\\n    external;\\n}\\n\",\"keccak256\":\"0x4fdc20e43a36b559ecc639809e80f758317521fd5e8a3bb2cfd8bc7db11ff845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c9138038062001c9183398181016040528101906200003791906200052e565b6200004982826200005160201b60201c565b50506200068a565b600060019054906101000a900460ff168062000078575060008054906101000a900460ff16155b620000ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b19062000596565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011b6200018a60201b60201c565b82606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816068819055508015620001855760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680620001b1575060008054906101000a900460ff16155b620001f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ea9062000596565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000244576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620002546200028960201b60201c565b620002646200036860201b60201c565b8015620002865760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002b0575060008054906101000a900460ff16155b620002f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e99062000596565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000343576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620003655760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806200038f575060008054906101000a900460ff16155b620003d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c89062000596565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000422576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600062000434620004f860201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620004f55760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b600081519050620005118162000656565b92915050565b600081519050620005288162000670565b92915050565b600080604083850312156200054257600080fd5b6000620005528582860162000500565b9250506020620005658582860162000517565b9150509250929050565b60006200057e602e83620005b8565b91506200058b8262000607565b604082019050919050565b60006020820190508181036000830152620005b1816200056f565b9050919050565b600082825260208201905092915050565b6000620005d682620005dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6200066181620005c9565b81146200066d57600080fd5b50565b6200067b81620005fd565b81146200068757600080fd5b50565b6115f7806200069a6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637cc4184411610097578063cd6dc68711610066578063cd6dc68714610214578063d75ced3c14610230578063e644e2961461024e578063f2fde38b14610258576100f5565b80637cc418441461019e5780637fec3567146101bc5780638da5cb5b146101da578063b4d5ae90146101f8576100f5565b80634c8d9af1116100d35780634c8d9af11461013c5780635b5516fa1461015a5780636113c1bd14610178578063715018a614610194576100f5565b80630d9f552e146100fa57806312000329146101165780631b08341814610120575b600080fd5b610114600480360381019061010f91906111db565b610274565b005b61011e610334565b005b61013a60048036038101906101359190611269565b61054b565b005b6101446105d1565b6040516101519190611328565b60405180910390f35b6101626105f7565b60405161016f91906113be565b60405180910390f35b610192600480360381019061018d91906111db565b6105fd565b005b61019c6106bd565b005b6101a66107fa565b6040516101b39190611328565b60405180910390f35b6101c4610820565b6040516101d191906113be565b60405180910390f35b6101e2610826565b6040516101ef9190611328565b60405180910390f35b610212600480360381019061020d91906111db565b610850565b005b61022e60048036038101906102299190611204565b610910565b005b610238610a3b565b6040516102459190611328565b60405180910390f35b610256610a61565b005b610272600480360381019061026d91906111db565b610bbd565b005b61027c610d69565b73ffffffffffffffffffffffffffffffffffffffff1661029a610826565b73ffffffffffffffffffffffffffffffffffffffff16146102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e79061139e565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561041657610549565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d032de86040518163ffffffff1660e01b815260040160206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190611240565b9050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd6473f826040518263ffffffff1660e01b81526004016105159190611343565b600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b50505050505b565b610553610d69565b73ffffffffffffffffffffffffffffffffffffffff16610571610826565b73ffffffffffffffffffffffffffffffffffffffff16146105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be9061139e565b60405180910390fd5b8060688190555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b610605610d69565b73ffffffffffffffffffffffffffffffffffffffff16610623610826565b73ffffffffffffffffffffffffffffffffffffffff1614610679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106709061139e565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106c5610d69565b73ffffffffffffffffffffffffffffffffffffffff166106e3610826565b73ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107309061139e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60685481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610858610d69565b73ffffffffffffffffffffffffffffffffffffffff16610876610826565b73ffffffffffffffffffffffffffffffffffffffff16146108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c39061139e565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610936575060008054906101000a900460ff16155b610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c9061137e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156109c5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6109cd610d71565b82606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816068819055508015610a365760008060016101000a81548160ff0219169083151502179055505b505050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae5577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cfb0b4c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b899190611240565b9050610b9481610e5a565b606854606954610ba491906113ea565b431015610bb15750610bbb565b610bb9610334565b505b565b610bc5610d69565b73ffffffffffffffffffffffffffffffffffffffff16610be3610826565b73ffffffffffffffffffffffffffffffffffffffff1614610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c309061139e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca09061135e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610d97575060008054906101000a900460ff16155b610dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcd9061137e565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e26576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e2e610f41565b610e3661101a565b8015610e575760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff16606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f3e57606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343ed751d826040518263ffffffff1660e01b8152600401610f0b9190611343565b600060405180830381600087803b158015610f2557600080fd5b505af1158015610f39573d6000803e3d6000fd5b505050505b50565b600060019054906101000a900460ff1680610f67575060008054906101000a900460ff16155b610fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9d9061137e565b60405180910390fd5b60008060019054906101000a900460ff161590508015610ff6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156110175760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611040575060008054906101000a900460ff16155b61107f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110769061137e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110cf576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006110d9610d69565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156111995760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506111ab8161157c565b92915050565b6000815190506111c081611593565b92915050565b6000813590506111d5816115aa565b92915050565b6000602082840312156111ed57600080fd5b60006111fb8482850161119c565b91505092915050565b6000806040838503121561121757600080fd5b60006112258582860161119c565b9250506020611236858286016111c6565b9150509250929050565b60006020828403121561125257600080fd5b6000611260848285016111b1565b91505092915050565b60006020828403121561127b57600080fd5b6000611289848285016111c6565b91505092915050565b61129b81611440565b82525050565b6112aa81611452565b82525050565b60006112bd6026836113d9565b91506112c8826114b5565b604082019050919050565b60006112e0602e836113d9565b91506112eb82611504565b604082019050919050565b60006113036020836113d9565b915061130e82611553565b602082019050919050565b6113228161147c565b82525050565b600060208201905061133d6000830184611292565b92915050565b600060208201905061135860008301846112a1565b92915050565b60006020820190508181036000830152611377816112b0565b9050919050565b60006020820190508181036000830152611397816112d3565b9050919050565b600060208201905081810360008301526113b7816112f6565b9050919050565b60006020820190506113d36000830184611319565b92915050565b600082825260208201905092915050565b60006113f58261147c565b91506114008361147c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561143557611434611486565b5b828201905092915050565b600061144b8261145c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61158581611440565b811461159057600080fd5b50565b61159c81611452565b81146115a757600080fd5b50565b6115b38161147c565b81146115be57600080fd5b5056fea2646970667358221220f23f207da09cefb4140ccbbc8e44d1d416a545abae8da3825747ebc4dabfb3fa64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7882,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "versionVerificationManager",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 7884,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "bridgeLink",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 7886,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "verificationTreeManager",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 7888,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "blocksPerRootRelay",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 7890,
        "contract": "contracts/versioning/VerificationRootRelayer.sol:VerificationRootRelayer",
        "label": "lastRootRelayBlock",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}