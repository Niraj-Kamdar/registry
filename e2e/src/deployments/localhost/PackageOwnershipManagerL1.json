{
  "address": "0xC95639fBB0dc0fA87Be357841416d7Ae5eEC7b57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_domainRegistries",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_domainRegistryLinks",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "allowedLocalDomainRegistries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_domainRegistryLink",
          "type": "address"
        }
      ],
      "name": "connectDomainRegistryLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domainRegistryLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "getPolywrapOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "incomingBridgeLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_domainRegistries",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_domainRegistryLinks",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "outgoingBridgeLinks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "receiveOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "relayOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateIncomingBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateLocalDomainRegistryPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "blockchainName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridgeLink",
          "type": "address"
        }
      ],
      "name": "updateOutgoingBridgeLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainRegistry",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainRegistryNode",
          "type": "bytes32"
        }
      ],
      "name": "updateOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xada8fc9fc6e4c4d0569ef12b0b5d82ebd49747fb6971a05d63aa174606ea1f97",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0xC95639fBB0dc0fA87Be357841416d7Ae5eEC7b57",
    "transactionIndex": 0,
    "gasUsed": "2056824",
    "logsBloom": "0x
    "blockHash": "0xb2416d67d0c92ac477fe0056c3680590cd7c5675ce3dc0f4baae937fbd715f28",
    "transactionHash": "0xada8fc9fc6e4c4d0569ef12b0b5d82ebd49747fb6971a05d63aa174606ea1f97",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xada8fc9fc6e4c4d0569ef12b0b5d82ebd49747fb6971a05d63aa174606ea1f97",
        "address": "0xC95639fBB0dc0fA87Be357841416d7Ae5eEC7b57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb2416d67d0c92ac477fe0056c3680590cd7c5675ce3dc0f4baae937fbd715f28"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "2056824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42Cc87749B4031c53181692c537622e5c3b7d061",
    [
      "0x656e730000000000000000000000000000000000000000000000000000000000"
    ],
    [
      "0x8d54644bC13d08Fd9CAbe6DD84f7034d44c7B1B5"
    ]
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_domainRegistries\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_domainRegistryLinks\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedLocalDomainRegistries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_domainRegistryLink\",\"type\":\"address\"}],\"name\":\"connectDomainRegistryLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domainRegistryLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"getPolywrapOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incomingBridgeLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_domainRegistries\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_domainRegistryLinks\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"outgoingBridgeLinks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"relayOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridgeLink\",\"type\":\"address\"}],\"name\":\"updateIncomingBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateLocalDomainRegistryPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockchainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridgeLink\",\"type\":\"address\"}],\"name\":\"updateOutgoingBridgeLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainRegistry\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainRegistryNode\",\"type\":\"bytes32\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/PackageOwnershipManager.sol\":\"PackageOwnershipManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/PackageOwnershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\nimport \\\"./bridges/interfaces/IOwnershipBridgeLink.sol\\\";\\nimport \\\"./domain-registries/interfaces/IDomainRegistryLink.sol\\\";\\n\\ncontract PackageOwnershipManager is OwnableUpgradeable {\\n  address public registry;\\n\\n  mapping(bytes32 => address) public domainRegistryLinks;\\n\\n  mapping(bytes32 => bool) public allowedLocalDomainRegistries;\\n  mapping(bytes32 => address) public incomingBridgeLinks;\\n  mapping(bytes32 => address) public outgoingBridgeLinks;\\n\\n  constructor(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) {\\n    initialize(_registry, _domainRegistries, _domainRegistryLinks);\\n  }\\n\\n  function initialize(\\n    address _registry,\\n    bytes32[] memory _domainRegistries,\\n    address[] memory _domainRegistryLinks\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n\\n    require(\\n      _domainRegistries.length == _domainRegistryLinks.length,\\n      \\\"Registry arrays must have the same length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _domainRegistries.length; i++) {\\n      domainRegistryLinks[_domainRegistries[i]] = _domainRegistryLinks[i];\\n    }\\n  }\\n\\n  function updateRegistry(address _registry) public {\\n    registry = _registry;\\n  }\\n\\n  function updateLocalDomainRegistryPermission(\\n    bytes32 domainRegistry,\\n    bool allowed\\n  ) public onlyOwner {\\n    allowedLocalDomainRegistries[domainRegistry] = allowed;\\n  }\\n\\n  function updateIncomingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    incomingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function updateOutgoingBridgeLink(\\n    bytes32 domainRegistry,\\n    bytes32 blockchainName,\\n    address bridgeLink\\n  ) public onlyOwner {\\n    bytes32 key = keccak256(abi.encodePacked(domainRegistry, blockchainName));\\n\\n    outgoingBridgeLinks[key] = bridgeLink;\\n  }\\n\\n  function connectDomainRegistryLink(\\n    bytes32 domainRegistry,\\n    address _domainRegistryLink\\n  ) public onlyOwner {\\n    domainRegistryLinks[domainRegistry] = _domainRegistryLink;\\n  }\\n\\n  function updateOwnership(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n  {\\n    require(\\n      allowedLocalDomainRegistries[domainRegistry],\\n      \\\"Domain registry is not allowed for local updates\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function relayOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode\\n  ) public {\\n    address bridgeLink = outgoingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Outgoing relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    address owner = getPolywrapOwner(domainRegistry, domainRegistryNode);\\n\\n    IOwnershipBridgeLink(bridgeLink).relayOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function receiveOwnership(\\n    bytes32 blockchainName,\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address owner\\n  ) public {\\n    address bridgeLink = incomingBridgeLinks[\\n      keccak256(abi.encodePacked(domainRegistry, blockchainName))\\n    ];\\n\\n    require(\\n      bridgeLink != address(0),\\n      \\\"Incoming relay not supported for domain registry and blockchain\\\"\\n    );\\n\\n    assert(msg.sender == bridgeLink);\\n\\n    Registry(registry).updateOwnership(\\n      domainRegistry,\\n      domainRegistryNode,\\n      owner\\n    );\\n  }\\n\\n  function getPolywrapOwner(bytes32 domainRegistry, bytes32 domainRegistryNode)\\n    public\\n    view\\n    returns (address)\\n  {\\n    address domainRegistryLinkAddress = domainRegistryLinks[domainRegistry];\\n\\n    require(\\n      domainRegistryLinkAddress != address(0),\\n      \\\"Domain registry is not supported\\\"\\n    );\\n\\n    return\\n      IDomainRegistryLink(domainRegistryLinkAddress).getPolywrapOwner(\\n        domainRegistryNode\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xfcb9f0d8f927b5b4c40b278f493f44de613f04c951e5dfbc471e60965906c9f8\",\"license\":\"MIT\"},\"contracts/versioning/bridges/interfaces/IOwnershipBridgeLink.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\ninterface IOwnershipBridgeLink {\\n  function relayOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n\\n  function receiveOwnership(\\n    bytes32 domainRegistrar,\\n    bytes32 domainRegistrarNode,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x17ea21d565c39c25979e93d9caf21aa4f976e8ead0946839e482b82f666e56f4\"},\"contracts/versioning/domain-registries/interfaces/IDomainRegistryLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDomainRegistryLink {\\n  function getPolywrapOwner(bytes32 domainRegistryNode)\\n    external\\n    view\\n    returns (address);\\n}\\n\",\"keccak256\":\"0xdb719aab732e5021911a9398937b53076d7e408af3074cf7ee4a5f10a3f4af7b\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d5738038062002d578339818101604052810190620000379190620007ad565b6200004a8383836200005360201b60201c565b50505062000b6c565b600060019054906101000a900460ff16806200007a575060008054906101000a900460ff16155b620000bc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b39062000883565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200010d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200011d620002c560201b60201c565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114620001a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019c90620008a5565b60405180910390fd5b60005b83518110156200029c57828181518110620001ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516066600086848151811062000232577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806200029390620009dd565b915050620001a8565b508015620002bf5760008060016101000a81548160ff0219169083151502179055505b50505050565b600060019054906101000a900460ff1680620002ec575060008054906101000a900460ff16155b6200032e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003259062000883565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200037f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200038f620003c460201b60201c565b6200039f620004a360201b60201c565b8015620003c15760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620003eb575060008054906101000a900460ff16155b6200042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004249062000883565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200047e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015620004a05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620004ca575060008054906101000a900460ff16155b6200050c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005039062000883565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200055d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006200056f6200063360201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620006305760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000620006526200064c84620008f0565b620008c7565b905080838252602082019050828560208602820111156200067257600080fd5b60005b85811015620006a657816200068b888262000725565b84526020840193506020830192505060018101905062000675565b5050509392505050565b6000620006c7620006c1846200091f565b620008c7565b90508083825260208201905082856020860282011115620006e757600080fd5b60005b858110156200071b578162000700888262000796565b845260208401935060208301925050600181019050620006ea565b5050509392505050565b600081519050620007368162000b38565b92915050565b600082601f8301126200074e57600080fd5b8151620007608482602086016200063b565b91505092915050565b600082601f8301126200077b57600080fd5b81516200078d848260208601620006b0565b91505092915050565b600081519050620007a78162000b52565b92915050565b600080600060608486031215620007c357600080fd5b6000620007d38682870162000725565b935050602084015167ffffffffffffffff811115620007f157600080fd5b620007ff8682870162000769565b925050604084015167ffffffffffffffff8111156200081d57600080fd5b6200082b868287016200073c565b9150509250925092565b600062000844602e836200094e565b9150620008518262000a9a565b604082019050919050565b60006200086b6029836200094e565b9150620008788262000ae9565b604082019050919050565b600060208201905081810360008301526200089e8162000835565b9050919050565b60006020820190508181036000830152620008c0816200085c565b9050919050565b6000620008d3620008e6565b9050620008e18282620009a7565b919050565b6000604051905090565b600067ffffffffffffffff8211156200090e576200090d62000a5a565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200093d576200093c62000a5a565b5b602082029050602081019050919050565b600082825260208201905092915050565b60006200096c826200097d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620009b28262000a89565b810181811067ffffffffffffffff82111715620009d457620009d362000a5a565b5b80604052505050565b6000620009ea826200099d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000a205762000a1f62000a2b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b62000b43816200095f565b811462000b4f57600080fd5b50565b62000b5d8162000973565b811462000b6957600080fd5b50565b6121db8062000b7c6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c7c3d18011610071578063c7c3d180146102dd578063d41b4e72146102f9578063e7da1cd614610315578063f2fde38b14610331578063fe50a1111461034d57610116565b80638da5cb5b14610243578063a485572d14610261578063a5d7a24e14610291578063c6fa176e146102ad57610116565b806356033774116100e9578063560337741461019f5780635f47a231146101cf578063715018a6146101eb578063739f0476146101f55780637b1039991461022557610116565b80631a5da6c81461011b5780631cbfb765146101375780634b5c178714610167578063511147bd14610183575b600080fd5b610135600480360381019061013091906117a2565b610369565b005b610151600480360381019061014c9190611873565b6103ad565b60405161015e9190611bd9565b60405180910390f35b610181600480360381019061017c919061189c565b6103e0565b005b61019d60048036038101906101989190611950565b6104b2565b005b6101b960048036038101906101b49190611873565b6105b3565b6040516101c69190611bf4565b60405180910390f35b6101e960048036038101906101e4919061199f565b6105d3565b005b6101f3610727565b005b61020f600480360381019061020a9190611873565b610864565b60405161021c9190611bd9565b60405180910390f35b61022d610897565b60405161023a9190611bd9565b60405180910390f35b61024b6108bd565b6040516102589190611bd9565b60405180910390f35b61027b60048036038101906102769190611873565b6108e7565b6040516102889190611bd9565b60405180910390f35b6102ab60048036038101906102a69190611914565b61091a565b005b6102c760048036038101906102c29190611914565b610a1e565b6040516102d49190611bd9565b60405180910390f35b6102f760048036038101906102f29190611950565b610b59565b005b610313600480360381019061030e91906117f4565b610c5a565b005b61032f600480360381019061032a91906119ee565b610eb5565b005b61034b600480360381019061034691906117a2565b61107f565b005b610367600480360381019061036291906118d8565b61122b565b005b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60686020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103e86112d6565b73ffffffffffffffffffffffffffffffffffffffff166104066108bd565b73ffffffffffffffffffffffffffffffffffffffff161461045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611d21565b60405180910390fd5b806066600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6104ba6112d6565b73ffffffffffffffffffffffffffffffffffffffff166104d86108bd565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590611d21565b60405180910390fd5b60008383604051602001610543929190611bad565b604051602081830303815290604052805190602001209050816068600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60676020528060005260406000206000915054906101000a900460ff1681565b60006069600084866040516020016105ec929190611bad565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a90611c61565b60405180910390fd5b60006106af8484610a1e565b90508173ffffffffffffffffffffffffffffffffffffffff1663d78801818585846040518463ffffffff1660e01b81526004016106ee93929190611c2a565b600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050505050505050565b61072f6112d6565b73ffffffffffffffffffffffffffffffffffffffff1661074d6108bd565b73ffffffffffffffffffffffffffffffffffffffff16146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611d21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6067600083815260200190815260200160002060009054906101000a900460ff1661097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611d01565b60405180910390fd5b60006109868383610a1e565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488484846040518463ffffffff1660e01b81526004016109e793929190611c2a565b600060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b50505050505050565b6000806066600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe90611ca1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166331ac1d0d846040518263ffffffff1660e01b8152600401610b009190611c0f565b60206040518083038186803b158015610b1857600080fd5b505afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5091906117cb565b91505092915050565b610b616112d6565b73ffffffffffffffffffffffffffffffffffffffff16610b7f6108bd565b73ffffffffffffffffffffffffffffffffffffffff1614610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc90611d21565b60405180910390fd5b60008383604051602001610bea929190611bad565b604051602081830303815290604052805190602001209050816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600060019054906101000a900460ff1680610c80575060008054906101000a900460ff16155b610cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb690611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d176112de565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390611d41565b60405180910390fd5b60005b8351811015610e8d57828181518110610de1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160666000868481518110610e26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610e8590611e72565b915050610d9f565b508015610eaf5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000606860008587604051602001610ece929190611bad565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90611cc1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe7577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488585856040518463ffffffff1660e01b815260040161104693929190611c2a565b600060405180830381600087803b15801561106057600080fd5b505af1158015611074573d6000803e3d6000fd5b505050505050505050565b6110876112d6565b73ffffffffffffffffffffffffffffffffffffffff166110a56108bd565b73ffffffffffffffffffffffffffffffffffffffff16146110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290611d21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116290611c81565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112336112d6565b73ffffffffffffffffffffffffffffffffffffffff166112516108bd565b73ffffffffffffffffffffffffffffffffffffffff16146112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90611d21565b60405180910390fd5b806067600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b600060019054906101000a900460ff1680611304575060008054906101000a900460ff16155b611343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133a90611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611393576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61139b6113c7565b6113a36114a0565b80156113c45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806113ed575060008054906101000a900460ff16155b61142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390611ce1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561147c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561149d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806114c6575060008054906101000a900460ff16155b611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611555576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600061155f6112d6565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350801561161f5760008060016101000a81548160ff0219169083151502179055505b50565b600061163561163084611d86565b611d61565b9050808382526020820190508285602086028201111561165457600080fd5b60005b85811015611684578161166a88826116fa565b845260208401935060208301925050600181019050611657565b5050509392505050565b60006116a161169c84611db2565b611d61565b905080838252602082019050828560208602820111156116c057600080fd5b60005b858110156116f057816116d6888261178d565b8452602084019350602083019250506001810190506116c3565b5050509392505050565b60008135905061170981612160565b92915050565b60008151905061171e81612160565b92915050565b600082601f83011261173557600080fd5b8135611745848260208601611622565b91505092915050565b600082601f83011261175f57600080fd5b813561176f84826020860161168e565b91505092915050565b60008135905061178781612177565b92915050565b60008135905061179c8161218e565b92915050565b6000602082840312156117b457600080fd5b60006117c2848285016116fa565b91505092915050565b6000602082840312156117dd57600080fd5b60006117eb8482850161170f565b91505092915050565b60008060006060848603121561180957600080fd5b6000611817868287016116fa565b935050602084013567ffffffffffffffff81111561183457600080fd5b6118408682870161174e565b925050604084013567ffffffffffffffff81111561185d57600080fd5b61186986828701611724565b9150509250925092565b60006020828403121561188557600080fd5b60006118938482850161178d565b91505092915050565b600080604083850312156118af57600080fd5b60006118bd8582860161178d565b92505060206118ce858286016116fa565b9150509250929050565b600080604083850312156118eb57600080fd5b60006118f98582860161178d565b925050602061190a85828601611778565b9150509250929050565b6000806040838503121561192757600080fd5b60006119358582860161178d565b92505060206119468582860161178d565b9150509250929050565b60008060006060848603121561196557600080fd5b60006119738682870161178d565b93505060206119848682870161178d565b9250506040611995868287016116fa565b9150509250925092565b6000806000606084860312156119b457600080fd5b60006119c28682870161178d565b93505060206119d38682870161178d565b92505060406119e48682870161178d565b9150509250925092565b60008060008060808587031215611a0457600080fd5b6000611a128782880161178d565b9450506020611a238782880161178d565b9350506040611a348782880161178d565b9250506060611a45878288016116fa565b91505092959194509250565b611a5a81611def565b82525050565b611a6981611e01565b82525050565b611a7881611e0d565b82525050565b611a8f611a8a82611e0d565b611ebb565b82525050565b6000611aa2603f83611dde565b9150611aad82611f34565b604082019050919050565b6000611ac5602683611dde565b9150611ad082611f83565b604082019050919050565b6000611ae8602083611dde565b9150611af382611fd2565b602082019050919050565b6000611b0b603f83611dde565b9150611b1682611ffb565b604082019050919050565b6000611b2e602e83611dde565b9150611b398261204a565b604082019050919050565b6000611b51603083611dde565b9150611b5c82612099565b604082019050919050565b6000611b74602083611dde565b9150611b7f826120e8565b602082019050919050565b6000611b97602983611dde565b9150611ba282612111565b604082019050919050565b6000611bb98285611a7e565b602082019150611bc98284611a7e565b6020820191508190509392505050565b6000602082019050611bee6000830184611a51565b92915050565b6000602082019050611c096000830184611a60565b92915050565b6000602082019050611c246000830184611a6f565b92915050565b6000606082019050611c3f6000830186611a6f565b611c4c6020830185611a6f565b611c596040830184611a51565b949350505050565b60006020820190508181036000830152611c7a81611a95565b9050919050565b60006020820190508181036000830152611c9a81611ab8565b9050919050565b60006020820190508181036000830152611cba81611adb565b9050919050565b60006020820190508181036000830152611cda81611afe565b9050919050565b60006020820190508181036000830152611cfa81611b21565b9050919050565b60006020820190508181036000830152611d1a81611b44565b9050919050565b60006020820190508181036000830152611d3a81611b67565b9050919050565b60006020820190508181036000830152611d5a81611b8a565b9050919050565b6000611d6b611d7c565b9050611d778282611e41565b919050565b6000604051905090565b600067ffffffffffffffff821115611da157611da0611ef4565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611dcd57611dcc611ef4565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000611dfa82611e17565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611e4a82611f23565b810181811067ffffffffffffffff82111715611e6957611e68611ef4565b5b80604052505050565b6000611e7d82611e37565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611eb057611eaf611ec5565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f7574676f696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420737570706f72746564600082015250565b7f496e636f6d696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420616c6c6f776564206660008201527f6f72206c6f63616c207570646174657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b61216981611def565b811461217457600080fd5b50565b61218081611e01565b811461218b57600080fd5b50565b61219781611e0d565b81146121a257600080fd5b5056fea2646970667358221220006de4f91f54b34d26622dd9007c5b591c0f115ce796be2debfb20249270477964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c7c3d18011610071578063c7c3d180146102dd578063d41b4e72146102f9578063e7da1cd614610315578063f2fde38b14610331578063fe50a1111461034d57610116565b80638da5cb5b14610243578063a485572d14610261578063a5d7a24e14610291578063c6fa176e146102ad57610116565b806356033774116100e9578063560337741461019f5780635f47a231146101cf578063715018a6146101eb578063739f0476146101f55780637b1039991461022557610116565b80631a5da6c81461011b5780631cbfb765146101375780634b5c178714610167578063511147bd14610183575b600080fd5b610135600480360381019061013091906117a2565b610369565b005b610151600480360381019061014c9190611873565b6103ad565b60405161015e9190611bd9565b60405180910390f35b610181600480360381019061017c919061189c565b6103e0565b005b61019d60048036038101906101989190611950565b6104b2565b005b6101b960048036038101906101b49190611873565b6105b3565b6040516101c69190611bf4565b60405180910390f35b6101e960048036038101906101e4919061199f565b6105d3565b005b6101f3610727565b005b61020f600480360381019061020a9190611873565b610864565b60405161021c9190611bd9565b60405180910390f35b61022d610897565b60405161023a9190611bd9565b60405180910390f35b61024b6108bd565b6040516102589190611bd9565b60405180910390f35b61027b60048036038101906102769190611873565b6108e7565b6040516102889190611bd9565b60405180910390f35b6102ab60048036038101906102a69190611914565b61091a565b005b6102c760048036038101906102c29190611914565b610a1e565b6040516102d49190611bd9565b60405180910390f35b6102f760048036038101906102f29190611950565b610b59565b005b610313600480360381019061030e91906117f4565b610c5a565b005b61032f600480360381019061032a91906119ee565b610eb5565b005b61034b600480360381019061034691906117a2565b61107f565b005b610367600480360381019061036291906118d8565b61122b565b005b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60686020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103e86112d6565b73ffffffffffffffffffffffffffffffffffffffff166104066108bd565b73ffffffffffffffffffffffffffffffffffffffff161461045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611d21565b60405180910390fd5b806066600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6104ba6112d6565b73ffffffffffffffffffffffffffffffffffffffff166104d86108bd565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590611d21565b60405180910390fd5b60008383604051602001610543929190611bad565b604051602081830303815290604052805190602001209050816068600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60676020528060005260406000206000915054906101000a900460ff1681565b60006069600084866040516020016105ec929190611bad565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a90611c61565b60405180910390fd5b60006106af8484610a1e565b90508173ffffffffffffffffffffffffffffffffffffffff1663d78801818585846040518463ffffffff1660e01b81526004016106ee93929190611c2a565b600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050505050505050565b61072f6112d6565b73ffffffffffffffffffffffffffffffffffffffff1661074d6108bd565b73ffffffffffffffffffffffffffffffffffffffff16146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611d21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6067600083815260200190815260200160002060009054906101000a900460ff1661097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611d01565b60405180910390fd5b60006109868383610a1e565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488484846040518463ffffffff1660e01b81526004016109e793929190611c2a565b600060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b50505050505050565b6000806066600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe90611ca1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166331ac1d0d846040518263ffffffff1660e01b8152600401610b009190611c0f565b60206040518083038186803b158015610b1857600080fd5b505afa158015610b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5091906117cb565b91505092915050565b610b616112d6565b73ffffffffffffffffffffffffffffffffffffffff16610b7f6108bd565b73ffffffffffffffffffffffffffffffffffffffff1614610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc90611d21565b60405180910390fd5b60008383604051602001610bea929190611bad565b604051602081830303815290604052805190602001209050816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600060019054906101000a900460ff1680610c80575060008054906101000a900460ff16155b610cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb690611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d176112de565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508151835114610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390611d41565b60405180910390fd5b60005b8351811015610e8d57828181518110610de1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160666000868481518110610e26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610e8590611e72565b915050610d9f565b508015610eaf5760008060016101000a81548160ff0219169083151502179055505b50505050565b6000606860008587604051602001610ece929190611bad565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90611cc1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe7577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663479661488585856040518463ffffffff1660e01b815260040161104693929190611c2a565b600060405180830381600087803b15801561106057600080fd5b505af1158015611074573d6000803e3d6000fd5b505050505050505050565b6110876112d6565b73ffffffffffffffffffffffffffffffffffffffff166110a56108bd565b73ffffffffffffffffffffffffffffffffffffffff16146110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290611d21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116290611c81565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112336112d6565b73ffffffffffffffffffffffffffffffffffffffff166112516108bd565b73ffffffffffffffffffffffffffffffffffffffff16146112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90611d21565b60405180910390fd5b806067600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b600060019054906101000a900460ff1680611304575060008054906101000a900460ff16155b611343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133a90611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611393576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61139b6113c7565b6113a36114a0565b80156113c45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806113ed575060008054906101000a900460ff16155b61142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390611ce1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561147c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561149d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806114c6575060008054906101000a900460ff16155b611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90611ce1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611555576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600061155f6112d6565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350801561161f5760008060016101000a81548160ff0219169083151502179055505b50565b600061163561163084611d86565b611d61565b9050808382526020820190508285602086028201111561165457600080fd5b60005b85811015611684578161166a88826116fa565b845260208401935060208301925050600181019050611657565b5050509392505050565b60006116a161169c84611db2565b611d61565b905080838252602082019050828560208602820111156116c057600080fd5b60005b858110156116f057816116d6888261178d565b8452602084019350602083019250506001810190506116c3565b5050509392505050565b60008135905061170981612160565b92915050565b60008151905061171e81612160565b92915050565b600082601f83011261173557600080fd5b8135611745848260208601611622565b91505092915050565b600082601f83011261175f57600080fd5b813561176f84826020860161168e565b91505092915050565b60008135905061178781612177565b92915050565b60008135905061179c8161218e565b92915050565b6000602082840312156117b457600080fd5b60006117c2848285016116fa565b91505092915050565b6000602082840312156117dd57600080fd5b60006117eb8482850161170f565b91505092915050565b60008060006060848603121561180957600080fd5b6000611817868287016116fa565b935050602084013567ffffffffffffffff81111561183457600080fd5b6118408682870161174e565b925050604084013567ffffffffffffffff81111561185d57600080fd5b61186986828701611724565b9150509250925092565b60006020828403121561188557600080fd5b60006118938482850161178d565b91505092915050565b600080604083850312156118af57600080fd5b60006118bd8582860161178d565b92505060206118ce858286016116fa565b9150509250929050565b600080604083850312156118eb57600080fd5b60006118f98582860161178d565b925050602061190a85828601611778565b9150509250929050565b6000806040838503121561192757600080fd5b60006119358582860161178d565b92505060206119468582860161178d565b9150509250929050565b60008060006060848603121561196557600080fd5b60006119738682870161178d565b93505060206119848682870161178d565b9250506040611995868287016116fa565b9150509250925092565b6000806000606084860312156119b457600080fd5b60006119c28682870161178d565b93505060206119d38682870161178d565b92505060406119e48682870161178d565b9150509250925092565b60008060008060808587031215611a0457600080fd5b6000611a128782880161178d565b9450506020611a238782880161178d565b9350506040611a348782880161178d565b9250506060611a45878288016116fa565b91505092959194509250565b611a5a81611def565b82525050565b611a6981611e01565b82525050565b611a7881611e0d565b82525050565b611a8f611a8a82611e0d565b611ebb565b82525050565b6000611aa2603f83611dde565b9150611aad82611f34565b604082019050919050565b6000611ac5602683611dde565b9150611ad082611f83565b604082019050919050565b6000611ae8602083611dde565b9150611af382611fd2565b602082019050919050565b6000611b0b603f83611dde565b9150611b1682611ffb565b604082019050919050565b6000611b2e602e83611dde565b9150611b398261204a565b604082019050919050565b6000611b51603083611dde565b9150611b5c82612099565b604082019050919050565b6000611b74602083611dde565b9150611b7f826120e8565b602082019050919050565b6000611b97602983611dde565b9150611ba282612111565b604082019050919050565b6000611bb98285611a7e565b602082019150611bc98284611a7e565b6020820191508190509392505050565b6000602082019050611bee6000830184611a51565b92915050565b6000602082019050611c096000830184611a60565b92915050565b6000602082019050611c246000830184611a6f565b92915050565b6000606082019050611c3f6000830186611a6f565b611c4c6020830185611a6f565b611c596040830184611a51565b949350505050565b60006020820190508181036000830152611c7a81611a95565b9050919050565b60006020820190508181036000830152611c9a81611ab8565b9050919050565b60006020820190508181036000830152611cba81611adb565b9050919050565b60006020820190508181036000830152611cda81611afe565b9050919050565b60006020820190508181036000830152611cfa81611b21565b9050919050565b60006020820190508181036000830152611d1a81611b44565b9050919050565b60006020820190508181036000830152611d3a81611b67565b9050919050565b60006020820190508181036000830152611d5a81611b8a565b9050919050565b6000611d6b611d7c565b9050611d778282611e41565b919050565b6000604051905090565b600067ffffffffffffffff821115611da157611da0611ef4565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611dcd57611dcc611ef4565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000611dfa82611e17565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611e4a82611f23565b810181811067ffffffffffffffff82111715611e6957611e68611ef4565b5b80604052505050565b6000611e7d82611e37565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611eb057611eaf611ec5565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f7574676f696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420737570706f72746564600082015250565b7f496e636f6d696e672072656c6179206e6f7420737570706f7274656420666f7260008201527f20646f6d61696e20726567697374727920616e6420626c6f636b636861696e00602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f446f6d61696e207265676973747279206973206e6f7420616c6c6f776564206660008201527f6f72206c6f63616c207570646174657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526567697374727920617272617973206d75737420686176652074686520736160008201527f6d65206c656e6774680000000000000000000000000000000000000000000000602082015250565b61216981611def565b811461217457600080fd5b50565b61218081611e01565b811461218b57600080fd5b50565b61219781611e0d565b81146121a257600080fd5b5056fea2646970667358221220006de4f91f54b34d26622dd9007c5b591c0f115ce796be2debfb20249270477964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7524,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 7528,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "domainRegistryLinks",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7532,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "allowedLocalDomainRegistries",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7536,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "incomingBridgeLinks",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7540,
        "contract": "contracts/versioning/PackageOwnershipManager.sol:PackageOwnershipManager",
        "label": "outgoingBridgeLinks",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}