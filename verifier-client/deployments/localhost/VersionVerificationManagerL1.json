{
  "address": "0x11B0C061609DB88f04E1Ec589093899f6D87D1cc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "verifiedVersionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "major",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "VersionPublished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "packageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "patchNodeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "majorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minorVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "patchVersion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "sides",
          "type": "bool[]"
        }
      ],
      "name": "publishVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "updateRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "updateVerificationRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRootUpdater",
          "type": "address"
        }
      ],
      "name": "updateVerificationRootUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationRootUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d77105ab5ef5bf0fbd1476378eb1e541b4fecf14daaeabcd2631306dca4152a",
  "receipt": {
    "to": null,
    "from": "0x72e37d393c70823113a7176aC1F7C579d2C5623E",
    "contractAddress": "0x11B0C061609DB88f04E1Ec589093899f6D87D1cc",
    "transactionIndex": 0,
    "gasUsed": "1662338",
    "logsBloom": "0x
    "blockHash": "0xb19c34a295f5d39108048e9646e5c2cca3582ef52c99ddbc67176ba6e1649c9e",
    "transactionHash": "0x0d77105ab5ef5bf0fbd1476378eb1e541b4fecf14daaeabcd2631306dca4152a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x0d77105ab5ef5bf0fbd1476378eb1e541b4fecf14daaeabcd2631306dca4152a",
        "address": "0x11B0C061609DB88f04E1Ec589093899f6D87D1cc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072e37d393c70823113a7176ac1f7c579d2c5623e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb19c34a295f5d39108048e9646e5c2cca3582ef52c99ddbc67176ba6e1649c9e"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "1662338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42Cc87749B4031c53181692c537622e5c3b7d061"
  ],
  "solcInputHash": "6c4caff23812b8215bae627dc747aac3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"verifiedVersionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"VersionPublished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"packageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"patchNodeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"majorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minorVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"sides\",\"type\":\"bool[]\"}],\"name\":\"publishVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"updateVerificationRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRootUpdater\",\"type\":\"address\"}],\"name\":\"updateVerificationRootUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationRootUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/versioning/VersionVerificationManager.sol\":\"VersionVerificationManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/versioning/VersionVerificationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./registry/Registry.sol\\\";\\n\\ncontract VersionVerificationManager is OwnableUpgradeable {\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    bytes32 indexed verifiedVersionId,\\n    bytes32 indexed patchNodeId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  address public registry;\\n  address public verificationRootUpdater;\\n\\n  bytes32 public verificationRoot;\\n\\n  constructor(address _registry) {\\n    initialize(_registry);\\n  }\\n\\n  function initialize(address _registry) public initializer {\\n    __Ownable_init();\\n\\n    registry = _registry;\\n  }\\n\\n  function updateRegistry(address _registry) public onlyOwner {\\n    registry = _registry;\\n  }\\n\\n  function updateVerificationRootUpdater(address _verificationRootUpdater)\\n    public\\n    onlyOwner\\n  {\\n    verificationRootUpdater = _verificationRootUpdater;\\n  }\\n\\n  function updateVerificationRoot(bytes32 root) public {\\n    assert(msg.sender == verificationRootUpdater);\\n\\n    verificationRoot = root;\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    bytes32 patchNodeId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location,\\n    bytes32[] memory proof,\\n    bool[] memory sides\\n  ) public packageOwner(packageId) {\\n    bytes32 verifiedVersionId = keccak256(\\n      abi.encodePacked(patchNodeId, keccak256(abi.encodePacked(location)))\\n    );\\n\\n    require(\\n      proveVerifiedVersion(proof, sides, verifiedVersionId, verificationRoot),\\n      \\\"Invalid proof\\\"\\n    );\\n\\n    bytes32 actualPatchNodeId = Registry(registry).publishVersion(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    require(\\n      patchNodeId == actualPatchNodeId,\\n      \\\"Supplied patchNodeId does not match the calculated patchNodeId\\\"\\n    );\\n\\n    emit VersionPublished(\\n      packageId,\\n      verifiedVersionId,\\n      patchNodeId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n  }\\n\\n  function proveVerifiedVersion(\\n    bytes32[] memory proof,\\n    bool[] memory sides,\\n    bytes32 verifiedVersionId,\\n    bytes32 root\\n  ) private pure returns (bool) {\\n    bytes32 hash = verifiedVersionId;\\n\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n\\n      if (sides[i]) {\\n        hash = keccak256(abi.encodePacked(proofElement, hash));\\n      } else {\\n        hash = keccak256(abi.encodePacked(hash, proofElement));\\n      }\\n    }\\n\\n    return hash == root;\\n  }\\n\\n  modifier packageOwner(bytes32 packageId) {\\n    require(\\n      getPackageOwner(packageId) == msg.sender,\\n      \\\"You do not have access to the domain of this package\\\"\\n    );\\n    _;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) private view returns (address) {\\n    return Registry(registry).getPackageOwner(packageId);\\n  }\\n}\\n\",\"keccak256\":\"0xd375a1f1367f233e4a2789587abbb1137c03b243d26027111d35e40890aac72d\",\"license\":\"MIT\"},\"contracts/versioning/registry/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Registry is OwnableUpgradeable {\\n  event OwnershipUpdated(\\n    bytes32 indexed domainRegistryNode,\\n    bytes32 packageId,\\n    bytes32 domainRegistry,\\n    address indexed owner\\n  );\\n\\n  event VersionPublished(\\n    bytes32 indexed packageId,\\n    uint256 major,\\n    uint256 minor,\\n    uint256 patch,\\n    string location\\n  );\\n\\n  struct PackageVersion {\\n    bool leaf;\\n    uint256 latestSubVersion;\\n    bool created;\\n    string location; // empty on non-leaf nodes\\n  }\\n\\n  struct PackageInfo {\\n    address owner;\\n    bytes32 domainRegistryNode;\\n    bytes32 domainRegistry;\\n  }\\n\\n  mapping(bytes32 => PackageVersion) public versionNodes;\\n  mapping(bytes32 => PackageInfo) public packages;\\n  address public ownershipUpdater;\\n  address public versionPublisher;\\n\\n  constructor() {\\n    initialize();\\n  }\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  function updateOwnershipUpdater(address _ownershipUpdater) public onlyOwner {\\n    ownershipUpdater = _ownershipUpdater;\\n  }\\n\\n  function updateVersionPublisher(address _versionPublisher) public onlyOwner {\\n    versionPublisher = _versionPublisher;\\n  }\\n\\n  function updateOwnership(\\n    bytes32 domainRegistry,\\n    bytes32 domainRegistryNode,\\n    address domainOwner\\n  ) public {\\n    assert(msg.sender == ownershipUpdater);\\n\\n    bytes32 packageId = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(domainRegistryNode)),\\n        domainRegistry\\n      )\\n    );\\n\\n    packages[packageId] = PackageInfo(\\n      domainOwner,\\n      domainRegistryNode,\\n      domainRegistry\\n    );\\n\\n    emit OwnershipUpdated(\\n      domainRegistryNode,\\n      packageId,\\n      domainRegistry,\\n      domainOwner\\n    );\\n  }\\n\\n  function publishVersion(\\n    bytes32 packageId,\\n    uint256 majorVersion,\\n    uint256 minorVersion,\\n    uint256 patchVersion,\\n    string memory location\\n  ) public returns (bytes32) {\\n    assert(msg.sender == versionPublisher);\\n\\n    bytes32 majorNodeId = keccak256(abi.encodePacked(packageId, majorVersion));\\n    bytes32 minorNodeId = keccak256(\\n      abi.encodePacked(majorNodeId, minorVersion)\\n    );\\n    bytes32 patchNodeId = keccak256(\\n      abi.encodePacked(minorNodeId, patchVersion)\\n    );\\n\\n    PackageVersion storage packageNode = versionNodes[packageId];\\n    PackageVersion storage majorNode = versionNodes[majorNodeId];\\n    PackageVersion storage minorNode = versionNodes[minorNodeId];\\n\\n    if (packageNode.latestSubVersion < majorVersion) {\\n      packageNode.latestSubVersion = majorVersion;\\n    }\\n    packageNode.created = true;\\n\\n    if (majorNode.latestSubVersion < minorVersion) {\\n      majorNode.latestSubVersion = minorVersion;\\n    }\\n    majorNode.created = true;\\n\\n    if (minorNode.latestSubVersion < patchVersion) {\\n      minorNode.latestSubVersion = patchVersion;\\n    }\\n    minorNode.created = true;\\n\\n    require(!versionNodes[patchNodeId].created, \\\"Version is already published\\\");\\n\\n    versionNodes[patchNodeId] = PackageVersion(true, 0, true, location);\\n\\n    emit VersionPublished(\\n      packageId,\\n      majorVersion,\\n      minorVersion,\\n      patchVersion,\\n      location\\n    );\\n\\n    return patchNodeId;\\n  }\\n\\n  function getPackageOwner(bytes32 packageId) public view returns (address) {\\n    return packages[packageId].owner;\\n  }\\n}\\n\",\"keccak256\":\"0x1c57811282ade818ffbe1d4c849ffd6bf9276e57dfe1df52eecbc0a25fd86289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021b4380380620021b483398181016040528101906200003791906200050d565b62000048816200004f60201b60201c565b5062000630565b600060019054906101000a900460ff168062000076575060008054906101000a900460ff16155b620000b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000af9062000560565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000109576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b620001196200018060201b60201c565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156200017c5760008060016101000a81548160ff0219169083151502179055505b5050565b600060019054906101000a900460ff1680620001a7575060008054906101000a900460ff16155b620001e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e09062000560565b60405180910390fd5b60008060019054906101000a900460ff1615905080156200023a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6200024a6200027f60201b60201c565b6200025a6200035e60201b60201c565b80156200027c5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680620002a6575060008054906101000a900460ff16155b620002e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002df9062000560565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000339576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156200035b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168062000385575060008054906101000a900460ff16155b620003c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003be9062000560565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000418576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006200042a620004ee60201b60201c565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015620004eb5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b600081519050620005078162000616565b92915050565b6000602082840312156200052057600080fd5b60006200053084828501620004f6565b91505092915050565b600062000548602e8362000582565b91506200055582620005c7565b604082019050919050565b600060208201905081810360008301526200057b8162000539565b9050919050565b600082825260208201905092915050565b6000620005a082620005a7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b620006218162000593565b81146200062d57600080fd5b50565b611b7480620006406000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637b103999116100715780637b1039991461012a5780638da5cb5b14610148578063b61d211b14610166578063c4d66de814610184578063ce749723146101a0578063f2fde38b146101bc576100a9565b80630d032de8146100ae5780631a5da6c8146100cc57806338a34cf6146100e857806343ed751d14610104578063715018a614610120575b600080fd5b6100b66101d8565b6040516100c39190611577565b60405180910390f35b6100e660048036038101906100e191906111fb565b6101de565b005b61010260048036038101906100fd91906111fb565b61029e565b005b61011e6004803603810190610119919061124d565b61035e565b005b6101286103ec565b005b610132610529565b60405161013f919061155c565b60405180910390f35b61015061054f565b60405161015d919061155c565b60405180910390f35b61016e610579565b60405161017b919061155c565b60405180910390f35b61019e600480360381019061019991906111fb565b61059f565b005b6101ba60048036038101906101b5919061129f565b6106c2565b005b6101d660048036038101906101d191906111fb565b610921565b005b60675481565b6101e6610acd565b73ffffffffffffffffffffffffffffffffffffffff1661020461054f565b73ffffffffffffffffffffffffffffffffffffffff161461025a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102519061164c565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102a6610acd565b73ffffffffffffffffffffffffffffffffffffffff166102c461054f565b73ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103119061164c565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8060678190555050565b6103f4610acd565b73ffffffffffffffffffffffffffffffffffffffff1661041261054f565b73ffffffffffffffffffffffffffffffffffffffff1614610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f9061164c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806105c5575060008054906101000a900460ff16155b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610654576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61065c610ad5565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106be5760008060016101000a81548160ff0219169083151502179055505b5050565b873373ffffffffffffffffffffffffffffffffffffffff166106e382610bbe565b73ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107309061160c565b60405180910390fd5b6000888560405160200161074d9190611545565b60405160208183030381529060405280519060200120604051602001610774929190611519565b60405160208183030381529060405280519060200120905061079a848483606754610c72565b6107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d09061168c565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dc1d99d8c8b8b8b8b6040518663ffffffff1660e01b815260040161083e959493929190611592565b602060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190611276565b9050808a146108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb9061166c565b60405180910390fd5b89828c7f5875b5d75244d9184a17c71dedfa3481a6b268409027ba8fb88b3d8098dc206b8c8c8c8c60405161090c94939291906116ac565b60405180910390a45050505050505050505050565b610929610acd565b73ffffffffffffffffffffffffffffffffffffffff1661094761054f565b73ffffffffffffffffffffffffffffffffffffffff161461099d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109949061164c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a04906115ec565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610afb575060008054906101000a900460ff16155b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b319061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b8a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b92610d8e565b610b9a610e67565b8015610bbb5760008060016101000a81548160ff0219169083151502179055505b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663427a94d4836040518263ffffffff1660e01b8152600401610c1b9190611577565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190611224565b9050919050565b60008083905060005b8651811015610d7f576000878281518110610cbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868281518110610d02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015115610d3f578083604051602001610d22929190611519565b604051602081830303815290604052805190602001209250610d6b565b8281604051602001610d52929190611519565b6040516020818303038152906040528051906020012092505b508080610d7790611892565b915050610c7b565b50828114915050949350505050565b600060019054906101000a900460ff1680610db4575060008054906101000a900460ff16155b610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea9061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e43576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e645760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e8d575060008054906101000a900460ff16155b610ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec39061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f1c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610f26610acd565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610fe65760008060016101000a81548160ff0219169083151502179055505b50565b6000610ffc610ff78461171d565b6116f8565b9050808382526020820190508285602086028201111561101b57600080fd5b60005b8581101561104b5781611031888261117d565b84526020840193506020830192505060018101905061101e565b5050509392505050565b600061106861106384611749565b6116f8565b9050808382526020820190508285602086028201111561108757600080fd5b60005b858110156110b7578161109d8882611192565b84526020840193506020830192505060018101905061108a565b5050509392505050565b60006110d46110cf84611775565b6116f8565b9050828152602081018484840111156110ec57600080fd5b6110f784828561181f565b509392505050565b60008135905061110e81611ae2565b92915050565b60008151905061112381611ae2565b92915050565b600082601f83011261113a57600080fd5b813561114a848260208601610fe9565b91505092915050565b600082601f83011261116457600080fd5b8135611174848260208601611055565b91505092915050565b60008135905061118c81611af9565b92915050565b6000813590506111a181611b10565b92915050565b6000815190506111b681611b10565b92915050565b600082601f8301126111cd57600080fd5b81356111dd8482602086016110c1565b91505092915050565b6000813590506111f581611b27565b92915050565b60006020828403121561120d57600080fd5b600061121b848285016110ff565b91505092915050565b60006020828403121561123657600080fd5b600061124484828501611114565b91505092915050565b60006020828403121561125f57600080fd5b600061126d84828501611192565b91505092915050565b60006020828403121561128857600080fd5b6000611296848285016111a7565b91505092915050565b600080600080600080600080610100898b0312156112bc57600080fd5b60006112ca8b828c01611192565b98505060206112db8b828c01611192565b97505060406112ec8b828c016111e6565b96505060606112fd8b828c016111e6565b955050608061130e8b828c016111e6565b94505060a089013567ffffffffffffffff81111561132b57600080fd5b6113378b828c016111bc565b93505060c089013567ffffffffffffffff81111561135457600080fd5b6113608b828c01611153565b92505060e089013567ffffffffffffffff81111561137d57600080fd5b6113898b828c01611129565b9150509295985092959890939650565b6113a2816117cd565b82525050565b6113b1816117eb565b82525050565b6113c86113c3826117eb565b6118db565b82525050565b60006113d9826117a6565b6113e381856117b1565b93506113f381856020860161182e565b6113fc81611943565b840191505092915050565b6000611412826117a6565b61141c81856117c2565b935061142c81856020860161182e565b80840191505092915050565b60006114456026836117b1565b915061145082611954565b604082019050919050565b60006114686034836117b1565b9150611473826119a3565b604082019050919050565b600061148b602e836117b1565b9150611496826119f2565b604082019050919050565b60006114ae6020836117b1565b91506114b982611a41565b602082019050919050565b60006114d1603e836117b1565b91506114dc82611a6a565b604082019050919050565b60006114f4600d836117b1565b91506114ff82611ab9565b602082019050919050565b61151381611815565b82525050565b600061152582856113b7565b60208201915061153582846113b7565b6020820191508190509392505050565b60006115518284611407565b915081905092915050565b60006020820190506115716000830184611399565b92915050565b600060208201905061158c60008301846113a8565b92915050565b600060a0820190506115a760008301886113a8565b6115b4602083018761150a565b6115c1604083018661150a565b6115ce606083018561150a565b81810360808301526115e081846113ce565b90509695505050505050565b6000602082019050818103600083015261160581611438565b9050919050565b600060208201905081810360008301526116258161145b565b9050919050565b600060208201905081810360008301526116458161147e565b9050919050565b60006020820190508181036000830152611665816114a1565b9050919050565b60006020820190508181036000830152611685816114c4565b9050919050565b600060208201905081810360008301526116a5816114e7565b9050919050565b60006080820190506116c1600083018761150a565b6116ce602083018661150a565b6116db604083018561150a565b81810360608301526116ed81846113ce565b905095945050505050565b6000611702611713565b905061170e8282611861565b919050565b6000604051905090565b600067ffffffffffffffff82111561173857611737611914565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561176457611763611914565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156117905761178f611914565b5b61179982611943565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006117d8826117f5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561184c578082015181840152602081019050611831565b8381111561185b576000848401525b50505050565b61186a82611943565b810181811067ffffffffffffffff8211171561188957611888611914565b5b80604052505050565b600061189d82611815565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118d0576118cf6118e5565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f7420686176652061636365737320746f2074686520646f60008201527f6d61696e206f662074686973207061636b616765000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f537570706c6965642070617463684e6f6465496420646f6573206e6f74206d6160008201527f746368207468652063616c63756c617465642070617463684e6f646549640000602082015250565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b611aeb816117cd565b8114611af657600080fd5b50565b611b02816117df565b8114611b0d57600080fd5b50565b611b19816117eb565b8114611b2457600080fd5b50565b611b3081611815565b8114611b3b57600080fd5b5056fea2646970667358221220a0cf12ab548e43622f029c75c3b8049338c5f8065093b316bedaa280845eaa0664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637b103999116100715780637b1039991461012a5780638da5cb5b14610148578063b61d211b14610166578063c4d66de814610184578063ce749723146101a0578063f2fde38b146101bc576100a9565b80630d032de8146100ae5780631a5da6c8146100cc57806338a34cf6146100e857806343ed751d14610104578063715018a614610120575b600080fd5b6100b66101d8565b6040516100c39190611577565b60405180910390f35b6100e660048036038101906100e191906111fb565b6101de565b005b61010260048036038101906100fd91906111fb565b61029e565b005b61011e6004803603810190610119919061124d565b61035e565b005b6101286103ec565b005b610132610529565b60405161013f919061155c565b60405180910390f35b61015061054f565b60405161015d919061155c565b60405180910390f35b61016e610579565b60405161017b919061155c565b60405180910390f35b61019e600480360381019061019991906111fb565b61059f565b005b6101ba60048036038101906101b5919061129f565b6106c2565b005b6101d660048036038101906101d191906111fb565b610921565b005b60675481565b6101e6610acd565b73ffffffffffffffffffffffffffffffffffffffff1661020461054f565b73ffffffffffffffffffffffffffffffffffffffff161461025a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102519061164c565b60405180910390fd5b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6102a6610acd565b73ffffffffffffffffffffffffffffffffffffffff166102c461054f565b73ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103119061164c565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8060678190555050565b6103f4610acd565b73ffffffffffffffffffffffffffffffffffffffff1661041261054f565b73ffffffffffffffffffffffffffffffffffffffff1614610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f9061164c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff16806105c5575060008054906101000a900460ff16155b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610654576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61065c610ad5565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106be5760008060016101000a81548160ff0219169083151502179055505b5050565b873373ffffffffffffffffffffffffffffffffffffffff166106e382610bbe565b73ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107309061160c565b60405180910390fd5b6000888560405160200161074d9190611545565b60405160208183030381529060405280519060200120604051602001610774929190611519565b60405160208183030381529060405280519060200120905061079a848483606754610c72565b6107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d09061168c565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dc1d99d8c8b8b8b8b6040518663ffffffff1660e01b815260040161083e959493929190611592565b602060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190611276565b9050808a146108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb9061166c565b60405180910390fd5b89828c7f5875b5d75244d9184a17c71dedfa3481a6b268409027ba8fb88b3d8098dc206b8c8c8c8c60405161090c94939291906116ac565b60405180910390a45050505050505050505050565b610929610acd565b73ffffffffffffffffffffffffffffffffffffffff1661094761054f565b73ffffffffffffffffffffffffffffffffffffffff161461099d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109949061164c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a04906115ec565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610afb575060008054906101000a900460ff16155b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b319061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b8a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b92610d8e565b610b9a610e67565b8015610bbb5760008060016101000a81548160ff0219169083151502179055505b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663427a94d4836040518263ffffffff1660e01b8152600401610c1b9190611577565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190611224565b9050919050565b60008083905060005b8651811015610d7f576000878281518110610cbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868281518110610d02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015115610d3f578083604051602001610d22929190611519565b604051602081830303815290604052805190602001209250610d6b565b8281604051602001610d52929190611519565b6040516020818303038152906040528051906020012092505b508080610d7790611892565b915050610c7b565b50828114915050949350505050565b600060019054906101000a900460ff1680610db4575060008054906101000a900460ff16155b610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea9061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e43576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610e645760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610e8d575060008054906101000a900460ff16155b610ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec39061162c565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f1c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610f26610acd565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610fe65760008060016101000a81548160ff0219169083151502179055505b50565b6000610ffc610ff78461171d565b6116f8565b9050808382526020820190508285602086028201111561101b57600080fd5b60005b8581101561104b5781611031888261117d565b84526020840193506020830192505060018101905061101e565b5050509392505050565b600061106861106384611749565b6116f8565b9050808382526020820190508285602086028201111561108757600080fd5b60005b858110156110b7578161109d8882611192565b84526020840193506020830192505060018101905061108a565b5050509392505050565b60006110d46110cf84611775565b6116f8565b9050828152602081018484840111156110ec57600080fd5b6110f784828561181f565b509392505050565b60008135905061110e81611ae2565b92915050565b60008151905061112381611ae2565b92915050565b600082601f83011261113a57600080fd5b813561114a848260208601610fe9565b91505092915050565b600082601f83011261116457600080fd5b8135611174848260208601611055565b91505092915050565b60008135905061118c81611af9565b92915050565b6000813590506111a181611b10565b92915050565b6000815190506111b681611b10565b92915050565b600082601f8301126111cd57600080fd5b81356111dd8482602086016110c1565b91505092915050565b6000813590506111f581611b27565b92915050565b60006020828403121561120d57600080fd5b600061121b848285016110ff565b91505092915050565b60006020828403121561123657600080fd5b600061124484828501611114565b91505092915050565b60006020828403121561125f57600080fd5b600061126d84828501611192565b91505092915050565b60006020828403121561128857600080fd5b6000611296848285016111a7565b91505092915050565b600080600080600080600080610100898b0312156112bc57600080fd5b60006112ca8b828c01611192565b98505060206112db8b828c01611192565b97505060406112ec8b828c016111e6565b96505060606112fd8b828c016111e6565b955050608061130e8b828c016111e6565b94505060a089013567ffffffffffffffff81111561132b57600080fd5b6113378b828c016111bc565b93505060c089013567ffffffffffffffff81111561135457600080fd5b6113608b828c01611153565b92505060e089013567ffffffffffffffff81111561137d57600080fd5b6113898b828c01611129565b9150509295985092959890939650565b6113a2816117cd565b82525050565b6113b1816117eb565b82525050565b6113c86113c3826117eb565b6118db565b82525050565b60006113d9826117a6565b6113e381856117b1565b93506113f381856020860161182e565b6113fc81611943565b840191505092915050565b6000611412826117a6565b61141c81856117c2565b935061142c81856020860161182e565b80840191505092915050565b60006114456026836117b1565b915061145082611954565b604082019050919050565b60006114686034836117b1565b9150611473826119a3565b604082019050919050565b600061148b602e836117b1565b9150611496826119f2565b604082019050919050565b60006114ae6020836117b1565b91506114b982611a41565b602082019050919050565b60006114d1603e836117b1565b91506114dc82611a6a565b604082019050919050565b60006114f4600d836117b1565b91506114ff82611ab9565b602082019050919050565b61151381611815565b82525050565b600061152582856113b7565b60208201915061153582846113b7565b6020820191508190509392505050565b60006115518284611407565b915081905092915050565b60006020820190506115716000830184611399565b92915050565b600060208201905061158c60008301846113a8565b92915050565b600060a0820190506115a760008301886113a8565b6115b4602083018761150a565b6115c1604083018661150a565b6115ce606083018561150a565b81810360808301526115e081846113ce565b90509695505050505050565b6000602082019050818103600083015261160581611438565b9050919050565b600060208201905081810360008301526116258161145b565b9050919050565b600060208201905081810360008301526116458161147e565b9050919050565b60006020820190508181036000830152611665816114a1565b9050919050565b60006020820190508181036000830152611685816114c4565b9050919050565b600060208201905081810360008301526116a5816114e7565b9050919050565b60006080820190506116c1600083018761150a565b6116ce602083018661150a565b6116db604083018561150a565b81810360608301526116ed81846113ce565b905095945050505050565b6000611702611713565b905061170e8282611861565b919050565b6000604051905090565b600067ffffffffffffffff82111561173857611737611914565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561176457611763611914565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156117905761178f611914565b5b61179982611943565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006117d8826117f5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561184c578082015181840152602081019050611831565b8381111561185b576000848401525b50505050565b61186a82611943565b810181811067ffffffffffffffff8211171561188957611888611914565b5b80604052505050565b600061189d82611815565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118d0576118cf6118e5565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f7420686176652061636365737320746f2074686520646f60008201527f6d61696e206f662074686973207061636b616765000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f537570706c6965642070617463684e6f6465496420646f6573206e6f74206d6160008201527f746368207468652063616c63756c617465642070617463684e6f646549640000602082015250565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b611aeb816117cd565b8114611af657600080fd5b50565b611b02816117df565b8114611b0d57600080fd5b50565b611b19816117eb565b8114611b2457600080fd5b50565b611b3081611815565b8114611b3b57600080fd5b5056fea2646970667358221220a0cf12ab548e43622f029c75c3b8049338c5f8065093b316bedaa280845eaa0664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5326,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5329,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5654,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5199,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8383,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "registry",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8385,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "verificationRootUpdater",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8387,
        "contract": "contracts/versioning/VersionVerificationManager.sol:VersionVerificationManager",
        "label": "verificationRoot",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}